fla_CacheSetup ()
{
  <bb 2> :
  _1 = 3758628864B;
  _2 = _1->PCCRMR;
  _3 = 3758628864B;
  _4 = _2 & 4093640703;
  _3->PCCRMR = _4;
  return;

}


fla_ExecuteJob ()
{
  MemIf_JobResultType result;
  MemIf_StatusType memStatus;
  FLA_StatusE retStatus;
  FLA_StatusE D.6291;

  <bb 2> :
  retStatus = 1;

  <bb 3> :
  Fls_MainFunction ();
  memStatus = Fls_GetStatus ();
  if (memStatus != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  result = Fls_GetJobResult ();
  if (result == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  retStatus = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  retStatus = 1;

  <bb 7> :
  D.6291 = retStatus;

  <bb 8> :
<L5>:
  return D.6291;

}


fla_CheckAddressRange (FLA_PartitionIdE partition, uint32_t addressOffset, uint32_t size)
{
  uint32_t endAdd;
  uint32_t startAdd;
  FLA_StatusE check;
  FLA_StatusE D.6286;

  <bb 2> :
  check = 0;
  check = fla_CheckPartitionId (partition);
  if (check == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  startAdd = fla_PartitionsTable[partition].startAddress;
  endAdd = fla_PartitionsTable[partition].endAddress;
  _1 = startAdd + addressOffset;
  _2 = size + _1;
  if (endAdd < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  check = 1;

  <bb 5> :
  D.6286 = check;

  <bb 6> :
<L6>:
  return D.6286;

}


fla_CheckPartitionId (FLA_PartitionIdE partition)
{
  FLA_StatusE check;
  FLA_StatusE D.6278;

  <bb 2> :
  check = 0;
  if (partition > 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  check = 1;

  <bb 4> :
  D.6278 = check;

  <bb 5> :
<L2>:
  return D.6278;

}


FLA_Read (FLA_PartitionIdE partition, uint32_t offset, uint8 * dataBuffer, uint32_t size)
{
  Std_ReturnType status;
  uint32_t startAdd;
  FLA_StatusE retStatus;
  FLA_StatusE D.6274;

  <bb 2> :
  retStatus = 1;
  FLA_Initialized.3_1 = FLA_Initialized;
  if (FLA_Initialized.3_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = fla_CheckAddressRange (partition, offset, size);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = fla_PartitionsTable[partition].startAddress;
  startAdd = offset + _3;
  status = Fls_Read (startAdd, dataBuffer, size);
  if (status == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  retStatus = fla_ExecuteJob ();

  <bb 6> :
  D.6274 = retStatus;

  <bb 7> :
<L9>:
  return D.6274;

}


FLA_Write (FLA_PartitionIdE partition, uint32_t offset, const uint8 * dataBuffer, uint32_t size)
{
  Std_ReturnType status;
  uint32_t startAdd;
  FLA_StatusE retStatus;
  FLA_StatusE D.6263;

  <bb 2> :
  retStatus = 1;
  FLA_Initialized.2_1 = FLA_Initialized;
  if (FLA_Initialized.2_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = fla_CheckAddressRange (partition, offset, size);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = fla_PartitionsTable[partition].startAddress;
  startAdd = offset + _3;
  status = Fls_Write (startAdd, dataBuffer, size);
  if (status == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  retStatus = fla_ExecuteJob ();

  <bb 6> :
  D.6263 = retStatus;

  <bb 7> :
<L9>:
  return D.6263;

}


FLA_Erase (FLA_PartitionIdE partition)
{
  FLA_StatusE check;
  Std_ReturnType status;
  uint32_t size;
  uint32_t startAdd;
  FLA_StatusE retStatus;
  FLA_StatusE D.6252;

  <bb 2> :
  retStatus = 1;
  FLA_Initialized.1_1 = FLA_Initialized;
  if (FLA_Initialized.1_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  check = fla_CheckPartitionId (partition);
  if (check == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  startAdd = fla_PartitionsTable[partition].startAddress;
  _2 = fla_PartitionsTable[partition].endAddress;
  _3 = _2 - startAdd;
  size = _3 + 1;
  status = Fls_Erase (startAdd, size);
  if (status == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  retStatus = fla_ExecuteJob ();

  <bb 6> :
  D.6252 = retStatus;

  <bb 7> :
<L9>:
  return D.6252;

}


Fla_GetPartitionSize (FLA_PartitionIdE partition, uint32_t * size)
{
  FLA_StatusE check;
  FLA_StatusE D.6241;

  <bb 2> :
  check = fla_CheckPartitionId (partition);
  if (check == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = fla_PartitionsTable[partition].endAddress;
  _2 = fla_PartitionsTable[partition].startAddress;
  _3 = _1 - _2;
  _4 = _3 + 1;
  *size = _4;

  <bb 4> :
  D.6241 = check;

  <bb 5> :
<L2>:
  return D.6241;

}


FLA_Deinit ()
{
  <bb 2> :
  FLA_Initialized = 0;
  return;

}


FLA_Init ()
{
  const Fls_AddressType * endAdresses;
  MemIf_StatusType status;
  uint8_t i;

  <bb 2> :
  endAdresses = Fls_Config_Init.paSectorEndAddr;
  FLA_Initialized = 0;
  _1 = Fls_Config_Init.u32SectorCount;
  if (_1 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  if (endAdresses != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  fla_CacheSetup ();
  fla_PartitionsTable[0].startAddress = 0;
  _2 = *endAdresses;
  fla_PartitionsTable[0].endAddress = _2;
  i = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = (sizetype) i;
  _4 = _3 + 1073741823;
  _5 = _4 * 4;
  _6 = endAdresses + _5;
  _7 = *_6;
  _8 = (int) i;
  _9 = _7 + 1;
  fla_PartitionsTable[_8].startAddress = _9;
  _10 = (unsigned int) i;
  _11 = _10 * 4;
  _12 = endAdresses + _11;
  _13 = (int) i;
  _14 = *_12;
  fla_PartitionsTable[_13].endAddress = _14;
  i.0_15 = i;
  i = i.0_15 + 1;

  <bb 6> :
  if (i <= 2)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Fls_Init (&Fls_Config_Init);
  status = Fls_GetStatus ();
  if (status == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FLA_Initialized = 1;

  <bb 9> :
  return;

}


