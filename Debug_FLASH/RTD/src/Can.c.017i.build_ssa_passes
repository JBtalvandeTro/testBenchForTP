Can_ProcessErrorInterrupt (uint8 u8CtrlOffset, boolean bIsErrFast)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  if (bIsErrFast != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _11 = Can_pController->Can_pFDErrNotif;
  if (_11 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _12 = Can_pController->Can_pFDErrNotif;
  _12 ();
  goto <bb 9>; [INV]

  <bb 7> :
  _13 = Can_pController->Can_pErrNotif;
  if (_13 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _14 = Can_pController->Can_pErrNotif;
  _14 ();

  <bb 9> :
  return;

}


Can_ProcessBusOffInterrupt (uint8 u8CtrlOffset)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _11 = Can_Ipw_SetControllerToStopMode (Can_pController);
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _12 = (int) u8ControllerID;
  Can_eControllerState[_12] = 2;
  _13 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerBusOff (_13);

  <bb 6> :
  return;

}


Can_ProcessMesgBufferCommonInterrupt (uint8 u8CtrlOffset, uint8 u8MbIdx, Can_MbType mbType)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  switch (mbType) <default: <L5> [INV], case 0: <L3> [INV], case 1: <L4> [INV], case 3: <L2> [INV]>

  <bb 5> :
<L2>:
  _11 = Can_apxConfig[u32CoreId];
  _12 = _11->Can_pHwObjectConfig;
  Can_Ipw_ProcessTxMesgBuffer (Can_pController, _12, u8MbIdx);
  goto <bb 9>; [INV]

  <bb 6> :
<L3>:
  _13 = Can_apxConfig[u32CoreId];
  _14 = _13->Can_pHwObjectConfig;
  Can_Ipw_ProcessRxMesgBuffer (Can_pController, _14, u8MbIdx);
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  _15 = Can_apxConfig[u32CoreId];
  _16 = _15->Can_pHwObjectConfig;
  Can_Ipw_ProcessRxMesgBuffer (Can_pController, _16, u8MbIdx);
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:

  <bb 9> :
  return;

}


Can_MainFunction_Mode ()
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  goto <bb 8>; [INV]

  <bb 4> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  if (Can_pController != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = Can_pController->Can_bActivation;
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = (int) u8ControllerID;
  _9 = &Can_eControllerState[_8];
  Can_Ipw_MainFunction_Mode (Can_pController, _9);

  <bb 7> :
  u8ControllerID.5_10 = u8ControllerID;
  u8ControllerID = u8ControllerID.5_10 + 1;

  <bb 8> :
  if (u8ControllerID <= 2)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Can_MainFunction_BusOff ()
{
  <bb 2> :
  return;

}


Can_MainFunction_Read ()
{
  <bb 2> :
  return;

}


Can_MainFunction_Write ()
{
  <bb 2> :
  return;

}


Can_Write (Can_HwHandleType Hth, const struct Can_PduType * PduInfo)
{
  const struct Can_HwObjectConfigType * Can_pHwObject;
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7642;

  <bb 2> :
  eRetVal = 1;
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  Can_pHwObject = 0B;
  u32CoreId = 0;
  _1 = Can_ValidateHth (u32CoreId, Hth);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  if (PduInfo == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Det_ReportError (80, 0, 6, 1);
  goto <bb 9>; [INV]

  <bb 5> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pHwObjIDToCtrlIDMap;
  _4 = (sizetype) Hth;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  if (Can_pController != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _11 = Can_apxConfig[u32CoreId];
  _12 = _11->Can_pHwObjectConfig;
  _13 = (unsigned int) Hth;
  _14 = _13 * 36;
  Can_pHwObject = _12 + _14;
  _15 = Can_ValidatePdu (Can_pController, Can_pHwObject, PduInfo);
  if (_15 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _16 = (int) u8ControllerID;
  _17 = Can_eControllerState[_16];
  if (_17 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  eRetVal = Can_Ipw_Write (Can_pController, Can_pHwObject, PduInfo);

  <bb 9> :
  D.7642 = eRetVal;

  <bb 10> :
<L11>:
  return D.7642;

}


Can_GetControllerTxErrorCounter (uint8 ControllerId, uint8 * TxErrorCounterPtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7629;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 49, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  if (ControllerId > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, 49, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  if (TxErrorCounterPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (80, 0, 49, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  _7 = Can_Ipw_GetControllerTxErrorCounter (Can_pController);
  *TxErrorCounterPtr = _7;
  eRetVal = 0;

  <bb 9> :
  D.7629 = eRetVal;

  <bb 10> :
<L9>:
  return D.7629;

}


Can_GetControllerRxErrorCounter (uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7618;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 48, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  if (ControllerId > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, 48, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  if (RxErrorCounterPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (80, 0, 48, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  _7 = Can_Ipw_GetControllerRxErrorCounter (Can_pController);
  *RxErrorCounterPtr = _7;
  eRetVal = 0;

  <bb 9> :
  D.7618 = eRetVal;

  <bb 10> :
<L9>:
  return D.7618;

}


Can_GetControllerMode (uint8 Controller, Can_ControllerStateType * ControllerModePtr)
{
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7607;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  u32CoreId = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 18, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  if (Controller > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, 18, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  if (ControllerModePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (80, 0, 18, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  _2 = (int) Controller;
  _3 = Can_eControllerState[_2];
  *ControllerModePtr = _3;
  eRetVal = 0;

  <bb 9> :
  D.7607 = eRetVal;

  <bb 10> :
<L9>:
  return D.7607;

}


Can_GetControllerErrorState (uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7596;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_ValidateController (u32CoreId, ControllerId, 17);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  if (ErrorStatePtr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Det_ReportError (80, 0, 17, 1);
  goto <bb 10>; [INV]

  <bb 5> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  _7 = Can_Ipw_GetControllerErrorState (Can_pController);
  _8 = (int) _7;
  switch (_8) <default: <L5> [INV], case 0: <L3> [INV], case 1: <L4> [INV]>

  <bb 6> :
<L3>:
  *ErrorStatePtr = 0;
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  *ErrorStatePtr = 1;
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  *ErrorStatePtr = 2;

  <bb 9> :
  eRetVal = 0;

  <bb 10> :
  D.7596 = eRetVal;

  <bb 11> :
<L9>:
  return D.7596;

}


Can_EnableControllerInterrupts (uint8 Controller)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 5, 5);
  goto <bb 10>; [INV]

  <bb 4> :
  if (Controller > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, 5, 4);
  goto <bb 10>; [INV]

  <bb 6> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_01 ();
  _7 = (int) Controller;
  _8 = Can_au8DisableInterruptLevel[_7];
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _9 = (int) Controller;
  _10 = Can_au8DisableInterruptLevel[_9];
  _11 = (int) Controller;
  _12 = _10 + 255;
  Can_au8DisableInterruptLevel[_11] = _12;

  <bb 8> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_01 ();
  _13 = (int) Controller;
  _14 = Can_au8DisableInterruptLevel[_13];
  if (_14 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Can_Ipw_EnableControllerInterrupts (Can_pController);

  <bb 10> :
  return;

}


Can_DisableControllerInterrupts (uint8 Controller)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 4, 5);
  goto <bb 7>; [INV]

  <bb 4> :
  if (Controller > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, 4, 4);
  goto <bb 7>; [INV]

  <bb 6> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_00 ();
  _7 = (int) Controller;
  _8 = Can_au8DisableInterruptLevel[_7];
  _9 = (int) Controller;
  _10 = _8 + 1;
  Can_au8DisableInterruptLevel[_9] = _10;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_00 ();
  Can_Ipw_DisableControllerInterrupts (Can_pController);

  <bb 7> :
  return;

}


Can_SetControllerMode (uint8 Controller, Can_ControllerStateType Transition)
{
  <unnamed type> D.7574;
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7572;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_ValidateController (u32CoreId, Controller, 3);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  switch (Transition) <default: <L20> [INV], case 1: <L1> [INV], case 2: <L7> [INV], case 3: <L15> [INV]>

  <bb 4> :
<L1>:
  _7 = (int) Controller;
  _8 = Can_eControllerState[_7];
  if (_8 == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _9 = Can_Ipw_SetControllerToStartMode (Can_pController);
  if (_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _10 = (int) Controller;
  Can_eControllerState[_10] = 1;
  _11 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_11, 1);
  eRetVal = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (80, 0, 3, 6);

  <bb 8> :
  goto <bb 21>; [INV]

  <bb 9> :
<L7>:
  _12 = (int) Controller;
  _13 = Can_eControllerState[_12];
  switch (_13) <default: <L13> [INV], case 1: <L8> [INV], case 2 ... 3: <L11> [INV]>

  <bb 10> :
<L8>:
  _14 = Can_Ipw_SetControllerToStopMode (Can_pController);
  if (_14 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _15 = (int) Controller;
  Can_eControllerState[_15] = 2;
  _16 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_16, 2);
  eRetVal = 0;

  <bb 12> :
  goto <bb 15>; [INV]

  <bb 13> :
<L11>:
  _17 = (int) Controller;
  Can_eControllerState[_17] = 2;
  _18 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_18, 2);
  eRetVal = 0;
  goto <bb 15>; [INV]

  <bb 14> :
<L13>:

  <bb 15> :
  goto <bb 21>; [INV]

  <bb 16> :
<L15>:
  _19 = (int) Controller;
  _20 = Can_eControllerState[_19];
  D.7574 = _20 + 4294967294;
  if (D.7574 <= 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
<L16>:
  _21 = (int) Controller;
  Can_eControllerState[_21] = 3;
  _22 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_22, 3);
  eRetVal = 0;
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  Det_ReportError (80, 0, 3, 6);

  <bb 19> :
  goto <bb 21>; [INV]

  <bb 20> :
<L20>:
  Det_ReportError (80, 0, 3, 6);

  <bb 21> :
  D.7572 = eRetVal;

  <bb 22> :
<L23>:
  return D.7572;

}


Can_SetBaudrate (uint8 Controller, uint16 BaudRateConfigID)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7561;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_ValidateController (u32CoreId, Controller, 15);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  _7 = Can_pController->Can_u16BaudrateConfigCount;
  if (BaudRateConfigID >= _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Det_ReportError (80, 0, 15, 7);
  goto <bb 8>; [INV]

  <bb 5> :
  _8 = (int) Controller;
  _9 = Can_eControllerState[_8];
  if (_9 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  eRetVal = Can_Ipw_SetBaudrate (Can_pController, BaudRateConfigID);
  if (eRetVal == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _10 = (int) Controller;
  Can_au16BaudrateIDConfig[_10] = BaudRateConfigID;

  <bb 8> :
  D.7561 = eRetVal;

  <bb 9> :
<L9>:
  return D.7561;

}


Can_DeInit ()
{
  uint32 u32CoreId;
  boolean bCtrlBusy;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  bCtrlBusy = 0;
  u32CoreId = 0;
  u32CoreId = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 16, 6);
  goto <bb 12>; [INV]

  <bb 4> :
  u8ControllerID = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID;
  _5 = _4 * 4;
  _6 = _3 + _5;
  _7 = *_6;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _8 = (int) u8ControllerID;
  _9 = Can_eControllerState[_8];
  if (_9 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (80, 0, 16, 6);
  bCtrlBusy = 1;
  goto <bb 10>; [INV]

  <bb 8> :
  u8ControllerID.4_10 = u8ControllerID;
  u8ControllerID = u8ControllerID.4_10 + 1;

  <bb 9> :
  if (u8ControllerID <= 2)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _11 = ~bCtrlBusy;
  if (_11 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Can_eDriverStatus[u32CoreId] = 0;
  Can_DeInitControllers (u32CoreId);
  Can_apxConfig[u32CoreId] = 0B;

  <bb 12> :
  return;

}


Can_Init (const struct Can_ConfigType * Config)
{
  boolean bCtrlBusy;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  bCtrlBusy = 0;
  u32CoreId = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 0, 6);
  goto <bb 8>; [INV]

  <bb 4> :
  if (Config == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, 0, 9);
  goto <bb 8>; [INV]

  <bb 6> :
  Can_apxConfig[u32CoreId] = Config;
  bCtrlBusy = Can_IsControllersBusy (u32CoreId);
  _2 = ~bCtrlBusy;
  if (_2 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Can_InitControllers (u32CoreId);

  <bb 8> :
  return;

}


Can_DeInitControllers (uint32 u32CoreId)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  Can_pController = 0B;
  u8ControllerID = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = Can_apxConfig[u32CoreId];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController = *_11;
  _12 = Can_pController->Can_bActivation;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _13 = (int) u8ControllerID;
  Can_eControllerState[_13] = 0;
  Can_Ipw_DeInit (Can_pController);

  <bb 6> :
  u8ControllerID.3_14 = u8ControllerID;
  u8ControllerID = u8ControllerID.3_14 + 1;

  <bb 7> :
  if (u8ControllerID <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Can_ValidatePdu (const struct Can_ControllerConfigType * Can_pController, const struct Can_HwObjectConfigType * Can_pHwObject, const struct Can_PduType * PduInfo)
{
  boolean bInvalidDataLength;
  boolean bResult;
  uint16 u16BaudrateID;
  boolean D.7529;

  <bb 2> :
  u16BaudrateID = 0;
  bResult = 0;
  bInvalidDataLength = 0;
  _1 = Can_pController->Can_u8ControllerID;
  _2 = (int) _1;
  u16BaudrateID = Can_au16BaudrateIDConfig[_2];
  _3 = Can_pController->Can_pBaudrateConfig;
  _4 = (unsigned int) u16BaudrateID;
  _5 = _4 * 24;
  _6 = _3 + _5;
  _7 = _6->Can_bFDFrame;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _8 = PduInfo->length;
  _9 = Can_pHwObject->Can_u8PayloadLength;
  if (_8 > _9)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _10 = PduInfo->length;
  if (_10 > 8)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _11 = PduInfo->id;
  _12 = _11 & 1073741824;
  if (_12 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  bInvalidDataLength = 1;
  goto <bb 9>; [INV]

  <bb 7> :
  _13 = PduInfo->length;
  if (_13 > 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  bInvalidDataLength = 1;

  <bb 9> :
  if (bInvalidDataLength != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Det_ReportError (80, 0, 6, 3);
  goto <bb 15>; [INV]

  <bb 11> :
  _14 = PduInfo->sdu;
  if (_14 == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _15 = Can_pHwObject->Can_bTriggerTransmit;
  _16 = ~_15;
  if (_16 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Det_ReportError (80, 0, 6, 1);
  goto <bb 15>; [INV]

  <bb 14> :
  bResult = 1;

  <bb 15> :
  D.7529 = bResult;

  <bb 16> :
<L16>:
  return D.7529;

}


Can_ValidateHth (uint32 u32CoreId, Can_HwHandleType Hth)
{
  boolean bResult;
  boolean D.7511;

  <bb 2> :
  bResult = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, 6, 5);
  goto <bb 8>; [INV]

  <bb 4> :
  if (Hth > 24)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_uHthFirstIndex;
  if (Hth < _3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportError (80, 0, 6, 2);
  goto <bb 8>; [INV]

  <bb 7> :
  bResult = 1;

  <bb 8> :
  D.7511 = bResult;

  <bb 9> :
<L7>:
  return D.7511;

}


Can_ValidateController (uint32 u32CoreId, uint8 u8ControllerID, uint8 u8Sid)
{
  boolean bResult;
  boolean D.7502;

  <bb 2> :
  bResult = 0;
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (80, 0, u8Sid, 5);
  goto <bb 7>; [INV]

  <bb 4> :
  if (u8ControllerID > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, u8Sid, 4);
  goto <bb 7>; [INV]

  <bb 6> :
  bResult = 1;

  <bb 7> :
  D.7502 = bResult;

  <bb 8> :
<L6>:
  return D.7502;

}


Can_InitControllers (uint32 u32CoreId)
{
  const struct Can_ControllerConfigType * Can_pController;
  Std_ReturnType RetVal;
  uint8 u8ControllerID;
  boolean bCtrlBusy;

  <bb 2> :
  bCtrlBusy = 0;
  u8ControllerID = 0;
  RetVal = 1;
  Can_pController = 0B;
  u8ControllerID = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = Can_apxConfig[u32CoreId];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController = *_11;
  _12 = Can_pController->Can_bActivation;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _13 = (int) u8ControllerID;
  _14 = Can_pController->Can_u16DefaultBaudrateID;
  Can_au16BaudrateIDConfig[_13] = _14;
  _15 = (int) u8ControllerID;
  Can_au8DisableInterruptLevel[_15] = 0;
  RetVal = Can_Ipw_Init (Can_pController);
  if (RetVal == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _16 = (int) u8ControllerID;
  Can_eControllerState[_16] = 2;
  goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (80, 0, 0, 9);
  bCtrlBusy = 1;
  goto <bb 10>; [INV]

  <bb 8> :
  u8ControllerID.1_17 = u8ControllerID;
  u8ControllerID = u8ControllerID.1_17 + 1;

  <bb 9> :
  if (u8ControllerID <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (bCtrlBusy != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  u8ControllerID = 0;
  goto <bb 15>; [INV]

  <bb 12> :
  _18 = Can_apxConfig[u32CoreId];
  _19 = _18->Can_ppController;
  _20 = (unsigned int) u8ControllerID;
  _21 = _20 * 4;
  _22 = _19 + _21;
  _23 = *_22;
  if (_23 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _24 = (int) u8ControllerID;
  Can_eControllerState[_24] = 0;

  <bb 14> :
  u8ControllerID.2_25 = u8ControllerID;
  u8ControllerID = u8ControllerID.2_25 + 1;

  <bb 15> :
  if (u8ControllerID <= 2)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  Can_eDriverStatus[u32CoreId] = 1;

  <bb 17> :
  return;

}


Can_IsControllersBusy (uint32 u32CoreId)
{
  uint8 u8ControllerID;
  boolean bCtrlBusy;
  boolean D.7482;

  <bb 2> :
  bCtrlBusy = 0;
  u8ControllerID = 0;
  u8ControllerID = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = (int) u8ControllerID;
  _8 = Can_eControllerState[_7];
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (80, 0, 0, 6);
  bCtrlBusy = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  u8ControllerID.0_9 = u8ControllerID;
  u8ControllerID = u8ControllerID.0_9 + 1;

  <bb 7> :
  if (u8ControllerID <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.7482 = bCtrlBusy;

  <bb 9> :
<L7>:
  return D.7482;

}


