
Marking local functions: Crc_Ip_DevAssert Crc_Ip_LibTranspose Crc_Ip_LibByteSwap16U Crc_Ip_LibByteSwap32U Crc_Ip_LibByteSwap64U Crc_Ip_LibBitSwap64U Crc_Ip_LibBitSwap32U Crc_Ip_LibBitSwap16U Crc_Ip_LibBitSwap8U


Marking externally visible functions: Crc_Ip_LookupTablesCalculate


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Crc_Ip_LookupTablesCalculate/21 (Crc_Ip_LookupTablesCalculate) @05c671c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Crc_TableCalculateCRC64/20 Crc_TableCalculateCRC32/19 Crc_TableCalculateCRC16/18 Crc_TableCalculateCRC8/17 Crc_Ip_DevAssert/9 Crc_Ip_DevAssert/9 
Crc_TableCalculateCRC64/20 (Crc_TableCalculateCRC64) @05aeee00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Crc_u64CrcTable/16 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Crc_Ip_LookupTablesCalculate/21 
  Calls: Crc_Ip_LibTranspose/8 Crc_Ip_DevAssert/9 Crc_Ip_LibTranspose/8 
Crc_TableCalculateCRC32/19 (Crc_TableCalculateCRC32) @05aee8c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: s_TableCrc32/14 (read)s_TableCrc32P4/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Crc_Ip_LookupTablesCalculate/21 
  Calls: Crc_Ip_LibTranspose/8 Crc_Ip_DevAssert/9 Crc_Ip_LibTranspose/8 
Crc_TableCalculateCRC16/18 (Crc_TableCalculateCRC16) @05aeed20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: s_TableCrc16/12 (read)s_TableCrc16ARC/13 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Crc_Ip_LookupTablesCalculate/21 
  Calls: Crc_Ip_LibTranspose/8 Crc_Ip_DevAssert/9 Crc_Ip_LibTranspose/8 
Crc_TableCalculateCRC8/17 (Crc_TableCalculateCRC8) @05aeea80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: s_TableCrc8/10 (read)s_TableCrc8H2F/11 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Crc_Ip_LookupTablesCalculate/21 
  Calls: Crc_Ip_LibTranspose/8 Crc_Ip_DevAssert/9 Crc_Ip_LibTranspose/8 
Crc_u64CrcTable/16 (Crc_u64CrcTable) @05ac3cf0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_TableCalculateCRC64/20 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
s_TableCrc32P4/15 (s_TableCrc32P4) @05ac3b40
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_TableCalculateCRC32/19 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
s_TableCrc32/14 (s_TableCrc32) @05ac3ee8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_TableCalculateCRC32/19 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
s_TableCrc16ARC/13 (s_TableCrc16ARC) @05ac3e10
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_TableCalculateCRC16/18 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
s_TableCrc16/12 (s_TableCrc16) @05ac3d38
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_TableCalculateCRC16/18 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
s_TableCrc8H2F/11 (s_TableCrc8H2F) @05ac3c60
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_TableCalculateCRC8/17 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
s_TableCrc8/10 (s_TableCrc8) @05ac3b88
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_TableCalculateCRC8/17 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Crc_Ip_DevAssert/9 (Crc_Ip_DevAssert) @05ac9540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LookupTablesCalculate/21 Crc_Ip_LookupTablesCalculate/21 Crc_TableCalculateCRC64/20 Crc_TableCalculateCRC32/19 Crc_TableCalculateCRC16/18 Crc_TableCalculateCRC8/17 
  Calls: 
Crc_Ip_LibTranspose/8 (Crc_Ip_LibTranspose) @05ac90e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_TableCalculateCRC64/20 Crc_TableCalculateCRC64/20 Crc_TableCalculateCRC32/19 Crc_TableCalculateCRC32/19 Crc_TableCalculateCRC16/18 Crc_TableCalculateCRC16/18 Crc_TableCalculateCRC8/17 Crc_TableCalculateCRC8/17 
  Calls: Crc_Ip_LibByteSwap16U/7 Crc_Ip_LibByteSwap32U/6 Crc_Ip_LibByteSwap64U/5 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap16U/2 Crc_Ip_LibBitSwap32U/3 Crc_Ip_LibBitSwap64U/4 
Crc_Ip_LibByteSwap16U/7 (Crc_Ip_LibByteSwap16U) @05b06e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LibTranspose/8 
  Calls: Crc_Ip_LibByteSwap32U/6 
Crc_Ip_LibByteSwap32U/6 (Crc_Ip_LibByteSwap32U) @05b06b60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LibByteSwap16U/7 Crc_Ip_LibTranspose/8 
  Calls: 
Crc_Ip_LibByteSwap64U/5 (Crc_Ip_LibByteSwap64U) @05b068c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LibTranspose/8 
  Calls: 
Crc_Ip_LibBitSwap64U/4 (Crc_Ip_LibBitSwap64U) @05b06620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LibTranspose/8 
  Calls: Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 
Crc_Ip_LibBitSwap32U/3 (Crc_Ip_LibBitSwap32U) @05b06380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LibTranspose/8 
  Calls: Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 
Crc_Ip_LibBitSwap16U/2 (Crc_Ip_LibBitSwap16U) @05b060e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LibTranspose/8 
  Calls: Crc_Ip_LibBitSwap8U/1 Crc_Ip_LibBitSwap8U/1 
Crc_Ip_LibBitSwap8U/1 (Crc_Ip_LibBitSwap8U) @05a9eee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Crc_Ip_au8BitSwapArray/0 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Crc_Ip_LibBitSwap16U/2 Crc_Ip_LibBitSwap16U/2 Crc_Ip_LibBitSwap32U/3 Crc_Ip_LibBitSwap32U/3 Crc_Ip_LibBitSwap32U/3 Crc_Ip_LibBitSwap32U/3 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibBitSwap64U/4 Crc_Ip_LibTranspose/8 
  Calls: 
Crc_Ip_au8BitSwapArray/0 (Crc_Ip_au8BitSwapArray) @05afbaf8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Crc_Ip_LibBitSwap8U/1 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Crc_Ip_LookupTablesCalculate (const struct Crc_Ip_LogicChannelStateType * pxLogicChannelState, const uint8 * DataPtr, const uint32 Length, const uint64 InitialSeedStartValue)
{
  uint64 LocResult;
  uint64 D.5885;

  <bb 2> :
  LocResult = 0;
  _1 = pxLogicChannelState != 0B;
  Crc_Ip_DevAssert (_1);
  _2 = DataPtr != 0B;
  Crc_Ip_DevAssert (_2);
  _3 = pxLogicChannelState->CrcProtocolInfo;
  _4 = _3->Width;
  switch (_4) <default: <L4> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV], case 3: <L3> [INV]>

  <bb 3> :
<L0>:
  _5 = pxLogicChannelState->Protocol;
  _6 = pxLogicChannelState->CrcProtocolInfo;
  _7 = (unsigned char) InitialSeedStartValue;
  _8 = Crc_TableCalculateCRC8 (_5, _6, DataPtr, Length, _7);
  LocResult = (uint64) _8;
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  _9 = pxLogicChannelState->Protocol;
  _10 = pxLogicChannelState->CrcProtocolInfo;
  _11 = (short unsigned int) InitialSeedStartValue;
  _12 = Crc_TableCalculateCRC16 (_9, _10, DataPtr, Length, _11);
  LocResult = (uint64) _12;
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  _13 = pxLogicChannelState->Protocol;
  _14 = pxLogicChannelState->CrcProtocolInfo;
  _15 = (long unsigned int) InitialSeedStartValue;
  _16 = Crc_TableCalculateCRC32 (_13, _14, DataPtr, Length, _15);
  LocResult = (uint64) _16;
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  _17 = pxLogicChannelState->Protocol;
  _18 = pxLogicChannelState->CrcProtocolInfo;
  LocResult = Crc_TableCalculateCRC64 (_17, _18, DataPtr, Length, InitialSeedStartValue);
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  D.5885 = LocResult;

  <bb 9> :
<L6>:
  return D.5885;

}


Crc_TableCalculateCRC64 (const Crc_Ip_ProtocolType Protocol, const struct Crc_Ip_CrcProtocolInfoType * pxCrcProtocolInfo, const uint8 * DataPtr, const uint32 Length, const uint64 StartValue64)
{
  uint64 CrcValue;
  uint64 CrcData;
  uint32 LengthIdx;
  uint8 TableIndex;
  uint64 D.5883;

  <bb 2> :
  TableIndex = 0;
  LengthIdx = 0;
  CrcData = 0;
  CrcValue = StartValue64;
  LengthIdx = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = DataPtr + LengthIdx;
  _2 = *_1;
  _3 = (long long unsigned int) _2;
  _4 = pxCrcProtocolInfo->Width;
  _5 = (unsigned char) _4;
  _6 = pxCrcProtocolInfo->WriteBitSwap;
  _7 = pxCrcProtocolInfo->WriteByteSwap;
  CrcData = Crc_Ip_LibTranspose (_3, _5, _6, _7);
  _8 = CrcData << 56;
  CrcValue = CrcValue ^ _8;
  _9 = CrcValue >> 56;
  TableIndex = (uint8) _9;
  CrcValue = CrcValue << 8;
  if (Protocol == 10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _10 = (int) TableIndex;
  _11 = Crc_u64CrcTable[_10];
  CrcValue = CrcValue ^ _11;
  goto <bb 6>; [INV]

  <bb 5> :
  Crc_Ip_DevAssert (0);

  <bb 6> :
  LengthIdx = LengthIdx + 1;

  <bb 7> :
  if (LengthIdx < Length)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _12 = pxCrcProtocolInfo->Width;
  _13 = (unsigned char) _12;
  _14 = pxCrcProtocolInfo->ReadBitSwap;
  _15 = pxCrcProtocolInfo->ReadByteSwap;
  CrcValue = Crc_Ip_LibTranspose (CrcValue, _13, _14, _15);
  _16 = pxCrcProtocolInfo->InverseEnable;
  if (_16 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  CrcValue = ~CrcValue;

  <bb 10> :
  D.5883 = CrcValue;

  <bb 11> :
<L8>:
  return D.5883;

}


Crc_TableCalculateCRC32 (const Crc_Ip_ProtocolType Protocol, const struct Crc_Ip_CrcProtocolInfoType * pxCrcProtocolInfo, const uint8 * DataPtr, const uint32 Length, const uint32 StartValue32)
{
  uint32 CrcValue;
  uint32 CrcData;
  uint32 LengthIdx;
  uint8 TableIndex;
  uint32 D.5876;

  <bb 2> :
  TableIndex = 0;
  LengthIdx = 0;
  CrcData = 0;
  CrcValue = StartValue32;
  LengthIdx = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = DataPtr + LengthIdx;
  _2 = *_1;
  _3 = (long long unsigned int) _2;
  _4 = pxCrcProtocolInfo->Width;
  _5 = (unsigned char) _4;
  _6 = pxCrcProtocolInfo->WriteBitSwap;
  _7 = pxCrcProtocolInfo->WriteByteSwap;
  _8 = Crc_Ip_LibTranspose (_3, _5, _6, _7);
  CrcData = (uint32) _8;
  _9 = CrcData << 24;
  CrcValue = CrcValue ^ _9;
  _10 = CrcValue >> 24;
  TableIndex = (uint8) _10;
  CrcValue = CrcValue << 8;
  if (Protocol == 9)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _11 = (int) TableIndex;
  _12 = s_TableCrc32[_11];
  CrcValue = CrcValue ^ _12;
  goto <bb 8>; [INV]

  <bb 5> :
  if (Protocol == 8)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _13 = (int) TableIndex;
  _14 = s_TableCrc32P4[_13];
  CrcValue = CrcValue ^ _14;
  goto <bb 8>; [INV]

  <bb 7> :
  Crc_Ip_DevAssert (0);

  <bb 8> :
  LengthIdx = LengthIdx + 1;

  <bb 9> :
  if (LengthIdx < Length)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _15 = (long long unsigned int) CrcValue;
  _16 = pxCrcProtocolInfo->Width;
  _17 = (unsigned char) _16;
  _18 = pxCrcProtocolInfo->ReadBitSwap;
  _19 = pxCrcProtocolInfo->ReadByteSwap;
  _20 = Crc_Ip_LibTranspose (_15, _17, _18, _19);
  CrcValue = (uint32) _20;
  _21 = pxCrcProtocolInfo->InverseEnable;
  if (_21 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  CrcValue = ~CrcValue;

  <bb 12> :
  D.5876 = CrcValue;

  <bb 13> :
<L11>:
  return D.5876;

}


Crc_TableCalculateCRC16 (const Crc_Ip_ProtocolType Protocol, const struct Crc_Ip_CrcProtocolInfoType * pxCrcProtocolInfo, const uint8 * DataPtr, const uint32 Length, const uint16 StartValue16)
{
  uint16 CrcValue;
  uint32 CrcData;
  uint32 LengthIdx;
  uint8 TableIndex;
  uint16 D.5866;

  <bb 2> :
  TableIndex = 0;
  LengthIdx = 0;
  CrcData = 0;
  CrcValue = StartValue16;
  LengthIdx = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = DataPtr + LengthIdx;
  _2 = *_1;
  _3 = (long long unsigned int) _2;
  _4 = pxCrcProtocolInfo->Width;
  _5 = (unsigned char) _4;
  _6 = pxCrcProtocolInfo->WriteBitSwap;
  _7 = pxCrcProtocolInfo->WriteByteSwap;
  _8 = Crc_Ip_LibTranspose (_3, _5, _6, _7);
  CrcData = (uint32) _8;
  _9 = (short unsigned int) CrcData;
  _10 = _9 << 8;
  CrcValue = CrcValue ^ _10;
  _11 = CrcValue >> 8;
  TableIndex = (uint8) _11;
  CrcValue = CrcValue << 8;
  if (Protocol == 7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _12 = (int) TableIndex;
  _13 = s_TableCrc16[_12];
  CrcValue = CrcValue ^ _13;
  goto <bb 8>; [INV]

  <bb 5> :
  if (Protocol == 6)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _14 = (int) TableIndex;
  _15 = s_TableCrc16ARC[_14];
  CrcValue = CrcValue ^ _15;
  goto <bb 8>; [INV]

  <bb 7> :
  Crc_Ip_DevAssert (0);

  <bb 8> :
  LengthIdx = LengthIdx + 1;

  <bb 9> :
  if (LengthIdx < Length)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _16 = (long long unsigned int) CrcValue;
  _17 = pxCrcProtocolInfo->Width;
  _18 = (unsigned char) _17;
  _19 = pxCrcProtocolInfo->ReadBitSwap;
  _20 = pxCrcProtocolInfo->ReadByteSwap;
  _21 = Crc_Ip_LibTranspose (_16, _18, _19, _20);
  CrcValue = (uint16) _21;
  _22 = pxCrcProtocolInfo->InverseEnable;
  if (_22 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  CrcValue = ~CrcValue;

  <bb 12> :
  D.5866 = CrcValue;

  <bb 13> :
<L11>:
  return D.5866;

}


Crc_TableCalculateCRC8 (const Crc_Ip_ProtocolType Protocol, const struct Crc_Ip_CrcProtocolInfoType * pxCrcProtocolInfo, const uint8 * DataPtr, const uint32 Length, const uint8 StartValue8)
{
  uint8 CrcValue;
  uint8 CrcDataU8;
  uint32 CrcDataU32;
  uint32 LengthIdx;
  uint8 D.5812;

  <bb 2> :
  LengthIdx = 0;
  CrcDataU32 = 0;
  CrcDataU8 = 0;
  CrcValue = StartValue8;
  LengthIdx = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = DataPtr + LengthIdx;
  _2 = *_1;
  _3 = (long long unsigned int) _2;
  _4 = pxCrcProtocolInfo->Width;
  _5 = (unsigned char) _4;
  _6 = pxCrcProtocolInfo->WriteBitSwap;
  _7 = pxCrcProtocolInfo->WriteByteSwap;
  _8 = Crc_Ip_LibTranspose (_3, _5, _6, _7);
  CrcDataU32 = (uint32) _8;
  CrcDataU8 = (uint8) CrcDataU32;
  if (Protocol == 5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _9 = CrcValue ^ CrcDataU8;
  _10 = (int) _9;
  CrcValue = s_TableCrc8[_10];
  goto <bb 8>; [INV]

  <bb 5> :
  if (Protocol == 4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _11 = CrcValue ^ CrcDataU8;
  _12 = (int) _11;
  CrcValue = s_TableCrc8H2F[_12];
  goto <bb 8>; [INV]

  <bb 7> :
  Crc_Ip_DevAssert (0);

  <bb 8> :
  LengthIdx = LengthIdx + 1;

  <bb 9> :
  if (LengthIdx < Length)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _13 = (long long unsigned int) CrcValue;
  _14 = pxCrcProtocolInfo->Width;
  _15 = (unsigned char) _14;
  _16 = pxCrcProtocolInfo->ReadBitSwap;
  _17 = pxCrcProtocolInfo->ReadByteSwap;
  _18 = Crc_Ip_LibTranspose (_13, _15, _16, _17);
  CrcValue = (uint8) _18;
  _19 = pxCrcProtocolInfo->InverseEnable;
  if (_19 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  CrcValue = ~CrcValue;

  <bb 12> :
  D.5812 = CrcValue;

  <bb 13> :
<L11>:
  return D.5812;

}


Crc_Ip_DevAssert (volatile boolean x)
{
  <bb 2> :
  x.0_1 = x;
  if (x.0_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


Crc_Ip_LibTranspose (const uint64 InputData, const uint8 CrcWidth, const boolean BitSwap, const boolean ByteSwap)
{
  uint64 Result;
  uint64 D.5842;

  <bb 2> :
  Result = InputData;
  if (BitSwap != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  if (CrcWidth == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Result = Crc_Ip_LibBitSwap64U (Result);
  goto <bb 11>; [INV]

  <bb 5> :
  if (CrcWidth == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _1 = (long unsigned int) Result;
  _2 = Crc_Ip_LibBitSwap32U (_1);
  Result = (uint64) _2;
  goto <bb 11>; [INV]

  <bb 7> :
  if (CrcWidth == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _3 = (short unsigned int) Result;
  _4 = Crc_Ip_LibBitSwap16U (_3);
  Result = (uint64) _4;
  goto <bb 11>; [INV]

  <bb 9> :
  if (CrcWidth == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _5 = (unsigned char) Result;
  _6 = Crc_Ip_LibBitSwap8U (_5);
  Result = (uint64) _6;

  <bb 11> :
  if (ByteSwap != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 12> :
  if (CrcWidth == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Result = Crc_Ip_LibByteSwap64U (Result);
  goto <bb 18>; [INV]

  <bb 14> :
  if (CrcWidth == 2)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _7 = (long unsigned int) Result;
  _8 = Crc_Ip_LibByteSwap32U (_7);
  Result = (uint64) _8;
  goto <bb 18>; [INV]

  <bb 16> :
  if (CrcWidth == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _9 = (short unsigned int) Result;
  _10 = Crc_Ip_LibByteSwap16U (_9);
  Result = (uint64) _10;

  <bb 18> :
  D.5842 = Result;

  <bb 19> :
<L25>:
  return D.5842;

}


Crc_Ip_LibByteSwap16U (const uint16 InputData)
{
  uint16 D.5856;

  <bb 2> :
  _1 = (long unsigned int) InputData;
  _2 = Crc_Ip_LibByteSwap32U (_1);
  _3 = _2 >> 16;
  D.5856 = (uint16) _3;

  <bb 3> :
<L0>:
  return D.5856;

}


Crc_Ip_LibByteSwap32U (const uint32 InputData)
{
  uint32 D.5854;

  <bb 2> :
  _1 = InputData >> 24;
  _2 = InputData >> 16;
  _3 = _2 << 8;
  _4 = _3 & 65535;
  _5 = _1 | _4;
  _6 = InputData >> 8;
  _7 = _6 << 16;
  _8 = _7 & 16711680;
  _9 = _5 | _8;
  _10 = InputData << 24;
  D.5854 = _9 | _10;

  <bb 3> :
<L0>:
  return D.5854;

}


Crc_Ip_LibByteSwap64U (const uint64 InputData)
{
  uint64 D.5852;

  <bb 2> :
  _1 = InputData >> 56;
  _2 = InputData >> 48;
  _3 = _2 << 8;
  _4 = _3 & 65535;
  _5 = _1 | _4;
  _6 = InputData >> 40;
  _7 = _6 << 16;
  _8 = _7 & 16711680;
  _9 = _5 | _8;
  _10 = InputData >> 32;
  _11 = _10 << 24;
  _12 = _11 & 4294967295;
  _13 = _9 | _12;
  _14 = InputData >> 24;
  _15 = _14 << 32;
  _16 = _15 & 1095216660480;
  _17 = _13 | _16;
  _18 = InputData >> 16;
  _19 = _18 << 40;
  _20 = _19 & 280375465082880;
  _21 = _17 | _20;
  _22 = InputData >> 8;
  _23 = _22 << 48;
  _24 = _23 & 71776119061217280;
  _25 = _21 | _24;
  _26 = InputData << 56;
  D.5852 = _25 | _26;

  <bb 3> :
<L0>:
  return D.5852;

}


Crc_Ip_LibBitSwap64U (const uint64 InputData)
{
  uint64 ReturnValue;
  uint64 ReturnValue34;
  uint64 ReturnValue12;
  uint64 ReturnValue4;
  uint64 ReturnValue3;
  uint64 ReturnValue2;
  uint64 ReturnValue1;
  uint64 Tmp8;
  uint64 Tmp7;
  uint64 Tmp6;
  uint64 Tmp5;
  uint64 Tmp4;
  uint64 Tmp3;
  uint64 Tmp2;
  uint64 Tmp1;
  uint64 D.5844;

  <bb 2> :
  _1 = InputData >> 56;
  _2 = (unsigned char) _1;
  _3 = Crc_Ip_LibBitSwap8U (_2);
  _4 = (long long unsigned int) _3;
  Tmp1 = _4 << 56;
  _5 = InputData >> 48;
  _6 = (unsigned char) _5;
  _7 = Crc_Ip_LibBitSwap8U (_6);
  _8 = (long long unsigned int) _7;
  Tmp2 = _8 << 48;
  _9 = InputData >> 40;
  _10 = (unsigned char) _9;
  _11 = Crc_Ip_LibBitSwap8U (_10);
  _12 = (long long unsigned int) _11;
  Tmp3 = _12 << 40;
  _13 = InputData >> 32;
  _14 = (unsigned char) _13;
  _15 = Crc_Ip_LibBitSwap8U (_14);
  _16 = (long long unsigned int) _15;
  Tmp4 = _16 << 32;
  _17 = InputData >> 24;
  _18 = (unsigned char) _17;
  _19 = Crc_Ip_LibBitSwap8U (_18);
  _20 = (long long unsigned int) _19;
  Tmp5 = _20 << 24;
  _21 = InputData >> 16;
  _22 = (unsigned char) _21;
  _23 = Crc_Ip_LibBitSwap8U (_22);
  _24 = (long long unsigned int) _23;
  Tmp6 = _24 << 16;
  _25 = InputData >> 8;
  _26 = (unsigned char) _25;
  _27 = Crc_Ip_LibBitSwap8U (_26);
  _28 = (long long unsigned int) _27;
  Tmp7 = _28 << 8;
  _29 = (unsigned char) InputData;
  _30 = Crc_Ip_LibBitSwap8U (_29);
  Tmp8 = (uint64) _30;
  ReturnValue1 = Tmp1 | Tmp2;
  ReturnValue2 = Tmp3 | Tmp4;
  ReturnValue3 = Tmp5 | Tmp6;
  ReturnValue4 = Tmp7 | Tmp8;
  ReturnValue12 = ReturnValue1 | ReturnValue2;
  ReturnValue34 = ReturnValue3 | ReturnValue4;
  ReturnValue = ReturnValue12 | ReturnValue34;
  D.5844 = ReturnValue;

  <bb 3> :
<L0>:
  return D.5844;

}


Crc_Ip_LibBitSwap32U (const uint32 InputData)
{
  uint32 ReturnValue;
  uint32 ReturnValue2;
  uint32 ReturnValue1;
  uint32 Tmp4;
  uint32 Tmp3;
  uint32 Tmp2;
  uint32 Tmp1;
  uint32 D.5846;

  <bb 2> :
  _1 = InputData >> 24;
  _2 = (unsigned char) _1;
  _3 = Crc_Ip_LibBitSwap8U (_2);
  _4 = (long unsigned int) _3;
  Tmp1 = _4 << 24;
  _5 = InputData >> 16;
  _6 = (unsigned char) _5;
  _7 = Crc_Ip_LibBitSwap8U (_6);
  _8 = (long unsigned int) _7;
  Tmp2 = _8 << 16;
  _9 = InputData >> 8;
  _10 = (unsigned char) _9;
  _11 = Crc_Ip_LibBitSwap8U (_10);
  _12 = (long unsigned int) _11;
  Tmp3 = _12 << 8;
  _13 = (unsigned char) InputData;
  _14 = Crc_Ip_LibBitSwap8U (_13);
  Tmp4 = (uint32) _14;
  ReturnValue1 = Tmp1 | Tmp2;
  ReturnValue2 = Tmp3 | Tmp4;
  ReturnValue = ReturnValue1 | ReturnValue2;
  D.5846 = ReturnValue;

  <bb 3> :
<L0>:
  return D.5846;

}


Crc_Ip_LibBitSwap16U (const uint16 InputData)
{
  uint16 ReturnValue;
  uint16 Tmp2;
  uint16 Tmp1;
  uint16 D.5848;

  <bb 2> :
  _1 = InputData >> 8;
  _2 = (unsigned char) _1;
  _3 = Crc_Ip_LibBitSwap8U (_2);
  _4 = (short unsigned int) _3;
  Tmp1 = _4 << 8;
  _5 = (unsigned char) InputData;
  _6 = Crc_Ip_LibBitSwap8U (_5);
  Tmp2 = (uint16) _6;
  ReturnValue = Tmp1 | Tmp2;
  D.5848 = ReturnValue;

  <bb 3> :
<L0>:
  return D.5848;

}


Crc_Ip_LibBitSwap8U (const uint8 InputData)
{
  uint8 D.5850;

  <bb 2> :
  _1 = (int) InputData;
  D.5850 = Crc_Ip_au8BitSwapArray[_1];

  <bb 3> :
<L0>:
  return D.5850;

}


