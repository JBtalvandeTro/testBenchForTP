
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Clock_Ip_axDividerCallbacks/66 (Clock_Ip_axDividerCallbacks) @0687e288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (addr)Clock_Ip_ClockInitializeObjects/40 (addr)Clock_Ip_ClockInitializeObjects/40 (addr)Clock_Ip_ClockInitializeObjects/40 (addr)Clock_Ip_ClockInitializeObjects/40 (addr)Clock_Ip_ClockInitializeObjects/40 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerCallbackIndex/65 (Clock_Ip_au8DividerCallbackIndex) @0687e240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (read)Clock_Ip_ClockInitializeObjects/40 (read)Clock_Ip_ClockInitializeObjects/40 (read)Clock_Ip_ClockInitializeObjects/40 (read)Clock_Ip_ClockInitializeObjects/40 (read)Clock_Ip_ClockInitializeObjects/40 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axSelectorCallbacks/64 (Clock_Ip_axSelectorCallbacks) @0687e1f8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (addr)Clock_Ip_ClockInitializeObjects/40 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8SelectorCallbackIndex/63 (Clock_Ip_au8SelectorCallbackIndex) @0687e1b0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (read)Clock_Ip_ClockInitializeObjects/40 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axExtOscCallbacks/62 (Clock_Ip_axExtOscCallbacks) @0687e168
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8XoscCallbackIndex/61 (Clock_Ip_au8XoscCallbackIndex) @0687e120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPllCallbacks/60 (Clock_Ip_axPllCallbacks) @0687e0d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PllCallbackIndex/59 (Clock_Ip_au8PllCallbackIndex) @0687e090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_bObjsAreInitialized.6361/58 (Clock_Ip_bObjsAreInitialized) @0687e048
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (read)Clock_Ip_ClockInitializeObjects/40 (write)
  Availability: available
  Varpool flags: initialized
DividerConfigurations.6342/57 (DividerConfigurations) @06a65d38
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getSlowDividerConfig/39 (addr)getSlowDividerConfig/39 (write)getSlowDividerConfig/39 (write)getSlowDividerConfig/39 (write)getSlowDividerConfig/39 (write)
  Availability: available
  Varpool flags:
DividerConfigurations.6322/56 (DividerConfigurations) @06a655e8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getBusDividerConfig/38 (addr)getBusDividerConfig/38 (write)getBusDividerConfig/38 (write)getBusDividerConfig/38 (write)getBusDividerConfig/38 (write)
  Availability: available
  Varpool flags:
DividerConfigurations.6302/55 (DividerConfigurations) @06a5de58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getCoreDividerConfig/37 (addr)getCoreDividerConfig/37 (write)getCoreDividerConfig/37 (write)getCoreDividerConfig/37 (write)getCoreDividerConfig/37 (write)
  Availability: available
  Varpool flags:
ClockSource.6284/54 (ClockSource) @06a5d708
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getSelectorConfig/36 (read)getSelectorConfig/36 (read)getSelectorConfig/36 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
SelectorConfigurations.6281/53 (SelectorConfigurations) @06a5d6c0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getSelectorConfig/36 (addr)getSelectorConfig/36 (write)getSelectorConfig/36 (write)getSelectorConfig/36 (write)getSelectorConfig/36 (write)
  Availability: available
  Varpool flags:
SpllConfiguration.6273/52 (SpllConfiguration) @06a25f30
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getSpllConfig/35 (addr)getSpllConfig/35 (write)getSpllConfig/35 (write)getSpllConfig/35 (write)getSpllConfig/35 (write)
  Availability: available
  Varpool flags:
SoscConfiguration.6264/51 (SoscConfiguration) @06a25a68
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getSoscConfig/34 (addr)getSoscConfig/34 (write)getSoscConfig/34 (write)getSoscConfig/34 (write)
  Availability: available
  Varpool flags:
FircConfiguration.6255/50 (FircConfiguration) @06a255a0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getFircConfig/33 (addr)getFircConfig/33 (write)getFircConfig/33 (write)getFircConfig/33 (write)getFircConfig/33 (write)
  Availability: available
  Varpool flags:
Clock_Ip_ReportClockErrors/49 (Clock_Ip_ReportClockErrors) @06878700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SpecificPlatformInitClock/32 
  Calls: 
Clock_Ip_TimeoutExpired/48 (Clock_Ip_TimeoutExpired) @06878620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SpecificPlatformInitClock/32 
  Calls: 
Clock_Ip_StartTimeout/47 (Clock_Ip_StartTimeout) @06878540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SpecificPlatformInitClock/32 
  Calls: 
Clock_Ip_au8SelectorEntryPcsHardwareValue/46 (Clock_Ip_au8SelectorEntryPcsHardwareValue) @06a1d948
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetSimLpoclksRegister_TrustedCall/31 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au16SelectorEntryHardwareValue/45 (Clock_Ip_au16SelectorEntryHardwareValue) @06a1d900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetSimLpoclksRegister_TrustedCall/31 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axIntOscCallbacks/44 (Clock_Ip_axIntOscCallbacks) @06a1d1f8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: DisableSafeClock/29 (read)DisableSafeClock/29 (read)Clock_Ip_ClockInitializeObjects/40 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8IrcoscCallbackIndex/43 (Clock_Ip_au8IrcoscCallbackIndex) @06a1d1b0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: DisableSafeClock/29 (read)DisableSafeClock/29 (read)Clock_Ip_ClockInitializeObjects/40 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_Command/42 (Clock_Ip_Command) @06868620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DisableSafeClock/29 Clock_Ip_SpecificPlatformInitClock/32 Clock_Ip_ClockInitializeObjects/40 
Clock_Ip_ClockPowerModeChangeNotification/41 (Clock_Ip_ClockPowerModeChangeNotification) @068680e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxScsRunClockSelector/6 (read)Clock_Ip_pxScsConfigVlprMode/14 (read)Clock_Ip_pxCoreRunClockDivider/7 (read)Clock_Ip_pxCoreConfigVlprMode/16 (read)Clock_Ip_pxBusRunClockDivider/8 (read)Clock_Ip_pxBusConfigVlprMode/18 (read)Clock_Ip_pxSlowRunClockDivider/9 (read)Clock_Ip_pxSlowConfigVlprMode/20 (read)Clock_Ip_pxSpllClock/3 (read)Clock_Ip_pxSpllConfig/12 (read)Clock_Ip_pxSoscClock/4 (read)Clock_Ip_pxSoscConfig/11 (read)Clock_Ip_pxFircClock/5 (read)Clock_Ip_pxFircConfig/10 (read)Clock_Ip_pxFircClock/5 (read)Clock_Ip_pxFircConfig/10 (read)Clock_Ip_pxSoscClock/4 (read)Clock_Ip_pxSoscConfig/11 (read)Clock_Ip_pxSoscClock/4 (read)Clock_Ip_pxSoscConfig/11 (read)Clock_Ip_pxSpllClock/3 (read)Clock_Ip_pxSpllConfig/12 (read)Clock_Ip_pxSpllClock/3 (read)Clock_Ip_pxSpllConfig/12 (read)Clock_Ip_pxScsRunClockSelector/6 (read)Clock_Ip_pxScsConfigRunMode/13 (read)Clock_Ip_pxCoreRunClockDivider/7 (read)Clock_Ip_pxCoreConfigRunMode/15 (read)Clock_Ip_pxBusRunClockDivider/8 (read)Clock_Ip_pxBusConfigRunMode/17 (read)Clock_Ip_pxSlowRunClockDivider/9 (read)Clock_Ip_pxSlowConfigRunMode/19 (read)Clock_Ip_pxFircClock/5 (read)Clock_Ip_pxFircConfig/10 (read)Clock_Ip_pxSoscClock/4 (read)Clock_Ip_pxSoscConfig/11 (read)Clock_Ip_pxSoscClock/4 (read)Clock_Ip_pxSoscConfig/11 (read)Clock_Ip_pxSpllClock/3 (read)Clock_Ip_pxSpllConfig/12 (read)Clock_Ip_pxSpllClock/3 (read)Clock_Ip_pxSpllConfig/12 (read)Clock_Ip_pxScsHsrunClockSelector/21 (read)Clock_Ip_pxScsConfigHsrunMode/25 (read)Clock_Ip_pxCoreHsrunClockDivider/22 (read)Clock_Ip_pxCoreConfigHsrunMode/26 (read)Clock_Ip_pxBusHsrunClockDivider/23 (read)Clock_Ip_pxBusConfigHsrunMode/27 (read)Clock_Ip_pxSlowHsrunClockDivider/24 (read)Clock_Ip_pxSlowConfigHsrunMode/28 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
Clock_Ip_ClockInitializeObjects/40 (Clock_Ip_ClockInitializeObjects) @06868d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_bObjsAreInitialized.6361/58 (read)Clock_Ip_bObjsAreInitialized.6361/58 (write)Clock_Ip_au8PllCallbackIndex/59 (read)Clock_Ip_axPllCallbacks/60 (addr)Clock_Ip_pxSpllClock/3 (write)Clock_Ip_au8XoscCallbackIndex/61 (read)Clock_Ip_axExtOscCallbacks/62 (addr)Clock_Ip_pxSoscClock/4 (write)Clock_Ip_au8IrcoscCallbackIndex/43 (read)Clock_Ip_axIntOscCallbacks/44 (addr)Clock_Ip_pxFircClock/5 (write)Clock_Ip_au8SelectorCallbackIndex/63 (read)Clock_Ip_axSelectorCallbacks/64 (addr)Clock_Ip_pxScsRunClockSelector/6 (write)Clock_Ip_au8SelectorCallbackIndex/63 (read)Clock_Ip_axSelectorCallbacks/64 (addr)Clock_Ip_pxScsHsrunClockSelector/21 (write)Clock_Ip_au8DividerCallbackIndex/65 (read)Clock_Ip_axDividerCallbacks/66 (addr)Clock_Ip_pxCoreRunClockDivider/7 (write)Clock_Ip_au8DividerCallbackIndex/65 (read)Clock_Ip_axDividerCallbacks/66 (addr)Clock_Ip_pxCoreHsrunClockDivider/22 (write)Clock_Ip_au8DividerCallbackIndex/65 (read)Clock_Ip_axDividerCallbacks/66 (addr)Clock_Ip_pxBusRunClockDivider/8 (write)Clock_Ip_au8DividerCallbackIndex/65 (read)Clock_Ip_axDividerCallbacks/66 (addr)Clock_Ip_pxBusHsrunClockDivider/23 (write)Clock_Ip_au8DividerCallbackIndex/65 (read)Clock_Ip_axDividerCallbacks/66 (addr)Clock_Ip_pxSlowRunClockDivider/9 (write)Clock_Ip_au8DividerCallbackIndex/65 (read)Clock_Ip_axDividerCallbacks/66 (addr)Clock_Ip_pxSlowHsrunClockDivider/24 (write)Clock_Ip_pxFircConfig/10 (write)Clock_Ip_pxSoscConfig/11 (write)Clock_Ip_pxSpllConfig/12 (write)Clock_Ip_pxScsConfigRunMode/13 (write)Clock_Ip_pxScsConfigVlprMode/14 (write)Clock_Ip_pxScsConfigHsrunMode/25 (write)Clock_Ip_pxCoreConfigRunMode/15 (write)Clock_Ip_pxCoreConfigVlprMode/16 (write)Clock_Ip_pxCoreConfigHsrunMode/26 (write)Clock_Ip_pxBusConfigRunMode/17 (write)Clock_Ip_pxBusConfigVlprMode/18 (write)Clock_Ip_pxBusConfigHsrunMode/27 (write)Clock_Ip_pxSlowConfigRunMode/19 (write)Clock_Ip_pxSlowConfigVlprMode/20 (write)Clock_Ip_pxSlowConfigHsrunMode/28 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Command/42 
  Calls: getSlowDividerConfig/39 getSlowDividerConfig/39 getSlowDividerConfig/39 getBusDividerConfig/38 getBusDividerConfig/38 getBusDividerConfig/38 getCoreDividerConfig/37 getCoreDividerConfig/37 getCoreDividerConfig/37 getSelectorConfig/36 getSelectorConfig/36 getSelectorConfig/36 getSpllConfig/35 getSoscConfig/34 getFircConfig/33 
getSlowDividerConfig/39 (getSlowDividerConfig) @06868a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)DividerConfigurations.6342/57 (addr)DividerConfigurations.6342/57 (write)DividerConfigurations.6342/57 (write)DividerConfigurations.6342/57 (write)DividerConfigurations.6342/57 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 
  Calls: 
getBusDividerConfig/38 (getBusDividerConfig) @068687e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)DividerConfigurations.6322/56 (addr)DividerConfigurations.6322/56 (write)DividerConfigurations.6322/56 (write)DividerConfigurations.6322/56 (write)DividerConfigurations.6322/56 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 
  Calls: 
getCoreDividerConfig/37 (getCoreDividerConfig) @06868540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)DividerConfigurations.6302/55 (addr)DividerConfigurations.6302/55 (write)DividerConfigurations.6302/55 (write)DividerConfigurations.6302/55 (write)DividerConfigurations.6302/55 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 
  Calls: 
getSelectorConfig/36 (getSelectorConfig) @068682a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)SelectorConfigurations.6281/53 (addr)SelectorConfigurations.6281/53 (write)ClockSource.6284/54 (read)SelectorConfigurations.6281/53 (write)ClockSource.6284/54 (read)SelectorConfigurations.6281/53 (write)ClockSource.6284/54 (read)SelectorConfigurations.6281/53 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 Clock_Ip_ClockInitializeObjects/40 
  Calls: 
getSpllConfig/35 (getSpllConfig) @06868000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)SpllConfiguration.6273/52 (addr)SpllConfiguration.6273/52 (write)SpllConfiguration.6273/52 (write)SpllConfiguration.6273/52 (write)SpllConfiguration.6273/52 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_ClockInitializeObjects/40 
  Calls: 
getSoscConfig/34 (getSoscConfig) @068168c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)SoscConfiguration.6264/51 (addr)SoscConfiguration.6264/51 (write)SoscConfiguration.6264/51 (write)SoscConfiguration.6264/51 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_ClockInitializeObjects/40 
  Calls: 
getFircConfig/33 (getFircConfig) @068160e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)FircConfiguration.6255/50 (addr)FircConfiguration.6255/50 (write)FircConfiguration.6255/50 (write)FircConfiguration.6255/50 (write)FircConfiguration.6255/50 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_ClockInitializeObjects/40 
  Calls: 
Clock_Ip_SpecificPlatformInitClock/32 (Clock_Ip_SpecificPlatformInitClock) @06816d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (write)Clock_Ip_bFircWasEnabledBeforeMcuInit/1 (write)Clock_Ip_bFircWasEnabledBeforeMcuInit/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Command/42 
  Calls: SetSimLpoclksRegister_TrustedCall/31 Clock_Ip_ReportClockErrors/49 Clock_Ip_TimeoutExpired/48 Clock_Ip_StartTimeout/47 SetFircToResetValue_TrustedCall/30 DevAssert/0 
SetSimLpoclksRegister_TrustedCall/31 (SetSimLpoclksRegister_TrustedCall) @06816a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_au16SelectorEntryHardwareValue/45 (read)Clock_Ip_au8SelectorEntryPcsHardwareValue/46 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_SpecificPlatformInitClock/32 
  Calls: 
SetFircToResetValue_TrustedCall/30 (SetFircToResetValue_TrustedCall) @068167e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_SpecificPlatformInitClock/32 
  Calls: 
DisableSafeClock/29 (DisableSafeClock) @068162a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_apConfig/2 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_au8IrcoscCallbackIndex/43 (read)Clock_Ip_axIntOscCallbacks/44 (read)Clock_Ip_apConfig/2 (read)Clock_Ip_bFircWasEnabledBeforeMcuInit/1 (read)Clock_Ip_au8IrcoscCallbackIndex/43 (read)Clock_Ip_axIntOscCallbacks/44 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Command/42 
  Calls: 
   Indirect call
   Indirect call
Clock_Ip_pxSlowConfigHsrunMode/28 (Clock_Ip_pxSlowConfigHsrunMode) @0680fc60
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusConfigHsrunMode/27 (Clock_Ip_pxBusConfigHsrunMode) @0680fbd0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreConfigHsrunMode/26 (Clock_Ip_pxCoreConfigHsrunMode) @0680fb40
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsConfigHsrunMode/25 (Clock_Ip_pxScsConfigHsrunMode) @0680fab0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowHsrunClockDivider/24 (Clock_Ip_pxSlowHsrunClockDivider) @0680fa20
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusHsrunClockDivider/23 (Clock_Ip_pxBusHsrunClockDivider) @0680f990
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreHsrunClockDivider/22 (Clock_Ip_pxCoreHsrunClockDivider) @0680f900
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsHsrunClockSelector/21 (Clock_Ip_pxScsHsrunClockSelector) @0680f870
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowConfigVlprMode/20 (Clock_Ip_pxSlowConfigVlprMode) @0680f7e0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowConfigRunMode/19 (Clock_Ip_pxSlowConfigRunMode) @0680f750
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusConfigVlprMode/18 (Clock_Ip_pxBusConfigVlprMode) @0680f6c0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusConfigRunMode/17 (Clock_Ip_pxBusConfigRunMode) @0680f630
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreConfigVlprMode/16 (Clock_Ip_pxCoreConfigVlprMode) @0680f5a0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreConfigRunMode/15 (Clock_Ip_pxCoreConfigRunMode) @0680f510
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsConfigVlprMode/14 (Clock_Ip_pxScsConfigVlprMode) @0680f480
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsConfigRunMode/13 (Clock_Ip_pxScsConfigRunMode) @0680f3f0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSpllConfig/12 (Clock_Ip_pxSpllConfig) @0680f2d0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSoscConfig/11 (Clock_Ip_pxSoscConfig) @0680f240
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxFircConfig/10 (Clock_Ip_pxFircConfig) @0680f1b0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowRunClockDivider/9 (Clock_Ip_pxSlowRunClockDivider) @0680f120
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusRunClockDivider/8 (Clock_Ip_pxBusRunClockDivider) @0680f090
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreRunClockDivider/7 (Clock_Ip_pxCoreRunClockDivider) @0680f000
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsRunClockSelector/6 (Clock_Ip_pxScsRunClockSelector) @0680af30
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxFircClock/5 (Clock_Ip_pxFircClock) @0680ae58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSoscClock/4 (Clock_Ip_pxSoscClock) @0680adc8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSpllClock/3 (Clock_Ip_pxSpllClock) @0680ad38
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/40 (write)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)Clock_Ip_ClockPowerModeChangeNotification/41 (read)
  Availability: available
  Varpool flags:
Clock_Ip_apConfig/2 (Clock_Ip_apConfig) @0680aca8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: getCoreDividerConfig/37 (read)getCoreDividerConfig/37 (read)getCoreDividerConfig/37 (read)getBusDividerConfig/38 (read)getCoreDividerConfig/37 (read)getBusDividerConfig/38 (read)getBusDividerConfig/38 (read)DisableSafeClock/29 (read)getBusDividerConfig/38 (read)DisableSafeClock/29 (read)DisableSafeClock/29 (read)Clock_Ip_SpecificPlatformInitClock/32 (write)getFircConfig/33 (read)getFircConfig/33 (read)getFircConfig/33 (read)getFircConfig/33 (read)getSoscConfig/34 (read)getSoscConfig/34 (read)getSoscConfig/34 (read)getSoscConfig/34 (read)getSpllConfig/35 (read)getSpllConfig/35 (read)getSpllConfig/35 (read)getSpllConfig/35 (read)getSelectorConfig/36 (read)getSelectorConfig/36 (read)getSelectorConfig/36 (read)getSelectorConfig/36 (read)getSlowDividerConfig/39 (read)getSlowDividerConfig/39 (read)getSlowDividerConfig/39 (read)getSlowDividerConfig/39 (read)
  Availability: available
  Varpool flags:
Clock_Ip_bFircWasEnabledBeforeMcuInit/1 (Clock_Ip_bFircWasEnabledBeforeMcuInit) @0680ac18
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: DisableSafeClock/29 (read)Clock_Ip_SpecificPlatformInitClock/32 (write)Clock_Ip_SpecificPlatformInitClock/32 (write)
  Availability: available
  Varpool flags:
DevAssert/0 (DevAssert) @067dc540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Clock_Ip_SpecificPlatformInitClock/32 
  Calls: 
Clock_Ip_Command (const struct Clock_Ip_ClockConfigType * Config, Clock_Ip_CommandType Command)
{
  <bb 2> :
  switch (Command_2(D)) <default: <L3> [INV], case 1: <L1> [INV], case 2: <L0> [INV], case 4: <L2> [INV]>

  <bb 3> :
<L0>:
  Clock_Ip_ClockInitializeObjects ();
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  Clock_Ip_SpecificPlatformInitClock (Config_4(D));
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  DisableSafeClock (Config_4(D));
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  return;

}


Clock_Ip_ClockPowerModeChangeNotification (Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsRunClockSelector.35_1;
  void (*<T5d5>) (const struct Clock_Ip_SelectorConfigType *) _2;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigVlprMode.36_3;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreRunClockDivider.37_4;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _5;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigVlprMode.38_6;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusRunClockDivider.39_7;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _8;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigVlprMode.40_9;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowRunClockDivider.41_10;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _11;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigVlprMode.42_12;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.43_13;
  void (*<T580>) (Clock_Ip_NameType) _14;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.44_15;
  <unnamed type> _16;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.45_17;
  void (*<T580>) (Clock_Ip_NameType) _18;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.46_19;
  <unnamed type> _20;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.47_21;
  void (*<T580>) (Clock_Ip_NameType) _22;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.48_23;
  <unnamed type> _24;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.49_25;
  void (*<T57d>) (const struct Clock_Ip_IrcoscConfigType *) _26;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.50_27;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.51_28;
  void (*<T58c>) (const struct Clock_Ip_XoscConfigType *) _29;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.52_30;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.53_31;
  void (*<T58c>) (const struct Clock_Ip_XoscConfigType *) _32;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.54_33;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.55_34;
  void (*<T5c2>) (const struct Clock_Ip_PllConfigType *) _35;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.56_36;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.57_37;
  Clock_Ip_PllStatusReturnType (*<T5c8>) (Clock_Ip_NameType) _38;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.58_39;
  <unnamed type> _40;
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsRunClockSelector.59_41;
  void (*<T5d5>) (const struct Clock_Ip_SelectorConfigType *) _42;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigRunMode.60_43;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreRunClockDivider.61_44;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _45;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigRunMode.62_46;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusRunClockDivider.63_47;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _48;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigRunMode.64_49;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowRunClockDivider.65_50;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _51;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigRunMode.66_52;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.67_53;
  void (*<T57d>) (const struct Clock_Ip_IrcoscConfigType *) _54;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.68_55;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.69_56;
  void (*<T58c>) (const struct Clock_Ip_XoscConfigType *) _57;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.70_58;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.71_59;
  void (*<T58c>) (const struct Clock_Ip_XoscConfigType *) _60;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.72_61;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.73_62;
  void (*<T5c2>) (const struct Clock_Ip_PllConfigType *) _63;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.74_64;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.75_65;
  Clock_Ip_PllStatusReturnType (*<T5c8>) (Clock_Ip_NameType) _66;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.76_67;
  <unnamed type> _68;
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsHsrunClockSelector.77_69;
  void (*<T5d5>) (const struct Clock_Ip_SelectorConfigType *) _70;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigHsrunMode.78_71;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreHsrunClockDivider.79_72;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _73;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigHsrunMode.80_74;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusHsrunClockDivider.81_75;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _76;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigHsrunMode.82_77;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowHsrunClockDivider.83_78;
  void (*<T59a>) (const struct Clock_Ip_DividerConfigType *) _79;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigHsrunMode.84_80;

  <bb 2> :
  switch (PowerMode_85(D)) <default: <L10> [INV], case 0: <L4> [INV], case 1 ... 2: <L0> [INV], case 3: <L7> [INV]>

  <bb 3> :
<L0>:
  if (Notification_86(D) == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Clock_Ip_pxScsRunClockSelector.35_1 = Clock_Ip_pxScsRunClockSelector;
  _2 = Clock_Ip_pxScsRunClockSelector.35_1->Set;
  Clock_Ip_pxScsConfigVlprMode.36_3 = Clock_Ip_pxScsConfigVlprMode;
  _2 (Clock_Ip_pxScsConfigVlprMode.36_3);
  Clock_Ip_pxCoreRunClockDivider.37_4 = Clock_Ip_pxCoreRunClockDivider;
  _5 = Clock_Ip_pxCoreRunClockDivider.37_4->Set;
  Clock_Ip_pxCoreConfigVlprMode.38_6 = Clock_Ip_pxCoreConfigVlprMode;
  _5 (Clock_Ip_pxCoreConfigVlprMode.38_6);
  Clock_Ip_pxBusRunClockDivider.39_7 = Clock_Ip_pxBusRunClockDivider;
  _8 = Clock_Ip_pxBusRunClockDivider.39_7->Set;
  Clock_Ip_pxBusConfigVlprMode.40_9 = Clock_Ip_pxBusConfigVlprMode;
  _8 (Clock_Ip_pxBusConfigVlprMode.40_9);
  Clock_Ip_pxSlowRunClockDivider.41_10 = Clock_Ip_pxSlowRunClockDivider;
  _11 = Clock_Ip_pxSlowRunClockDivider.41_10->Set;
  Clock_Ip_pxSlowConfigVlprMode.42_12 = Clock_Ip_pxSlowConfigVlprMode;
  _11 (Clock_Ip_pxSlowConfigVlprMode.42_12);
  Clock_Ip_pxSpllClock.43_13 = Clock_Ip_pxSpllClock;
  _14 = Clock_Ip_pxSpllClock.43_13->Disable;
  Clock_Ip_pxSpllConfig.44_15 = Clock_Ip_pxSpllConfig;
  _16 = Clock_Ip_pxSpllConfig.44_15->Name;
  _14 (_16);
  Clock_Ip_pxSoscClock.45_17 = Clock_Ip_pxSoscClock;
  _18 = Clock_Ip_pxSoscClock.45_17->Disable;
  Clock_Ip_pxSoscConfig.46_19 = Clock_Ip_pxSoscConfig;
  _20 = Clock_Ip_pxSoscConfig.46_19->Name;
  _18 (_20);
  Clock_Ip_pxFircClock.47_21 = Clock_Ip_pxFircClock;
  _22 = Clock_Ip_pxFircClock.47_21->Disable;
  Clock_Ip_pxFircConfig.48_23 = Clock_Ip_pxFircConfig;
  _24 = Clock_Ip_pxFircConfig.48_23->Name;
  _22 (_24);

  <bb 5> :
  goto <bb 13>; [INV]

  <bb 6> :
<L4>:
  if (Notification_86(D) == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Clock_Ip_pxFircClock.49_25 = Clock_Ip_pxFircClock;
  _26 = Clock_Ip_pxFircClock.49_25->Enable;
  Clock_Ip_pxFircConfig.50_27 = Clock_Ip_pxFircConfig;
  _26 (Clock_Ip_pxFircConfig.50_27);
  Clock_Ip_pxSoscClock.51_28 = Clock_Ip_pxSoscClock;
  _29 = Clock_Ip_pxSoscClock.51_28->Enable;
  Clock_Ip_pxSoscConfig.52_30 = Clock_Ip_pxSoscConfig;
  _29 (Clock_Ip_pxSoscConfig.52_30);
  Clock_Ip_pxSoscClock.53_31 = Clock_Ip_pxSoscClock;
  _32 = Clock_Ip_pxSoscClock.53_31->Complete;
  Clock_Ip_pxSoscConfig.54_33 = Clock_Ip_pxSoscConfig;
  _32 (Clock_Ip_pxSoscConfig.54_33);
  Clock_Ip_pxSpllClock.55_34 = Clock_Ip_pxSpllClock;
  _35 = Clock_Ip_pxSpllClock.55_34->Enable;
  Clock_Ip_pxSpllConfig.56_36 = Clock_Ip_pxSpllConfig;
  _35 (Clock_Ip_pxSpllConfig.56_36);
  Clock_Ip_pxSpllClock.57_37 = Clock_Ip_pxSpllClock;
  _38 = Clock_Ip_pxSpllClock.57_37->Complete;
  Clock_Ip_pxSpllConfig.58_39 = Clock_Ip_pxSpllConfig;
  _40 = Clock_Ip_pxSpllConfig.58_39->Name;
  _38 (_40);
  Clock_Ip_pxScsRunClockSelector.59_41 = Clock_Ip_pxScsRunClockSelector;
  _42 = Clock_Ip_pxScsRunClockSelector.59_41->Set;
  Clock_Ip_pxScsConfigRunMode.60_43 = Clock_Ip_pxScsConfigRunMode;
  _42 (Clock_Ip_pxScsConfigRunMode.60_43);
  Clock_Ip_pxCoreRunClockDivider.61_44 = Clock_Ip_pxCoreRunClockDivider;
  _45 = Clock_Ip_pxCoreRunClockDivider.61_44->Set;
  Clock_Ip_pxCoreConfigRunMode.62_46 = Clock_Ip_pxCoreConfigRunMode;
  _45 (Clock_Ip_pxCoreConfigRunMode.62_46);
  Clock_Ip_pxBusRunClockDivider.63_47 = Clock_Ip_pxBusRunClockDivider;
  _48 = Clock_Ip_pxBusRunClockDivider.63_47->Set;
  Clock_Ip_pxBusConfigRunMode.64_49 = Clock_Ip_pxBusConfigRunMode;
  _48 (Clock_Ip_pxBusConfigRunMode.64_49);
  Clock_Ip_pxSlowRunClockDivider.65_50 = Clock_Ip_pxSlowRunClockDivider;
  _51 = Clock_Ip_pxSlowRunClockDivider.65_50->Set;
  Clock_Ip_pxSlowConfigRunMode.66_52 = Clock_Ip_pxSlowConfigRunMode;
  _51 (Clock_Ip_pxSlowConfigRunMode.66_52);

  <bb 8> :
  goto <bb 13>; [INV]

  <bb 9> :
<L7>:
  if (Notification_86(D) == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Clock_Ip_pxFircClock.67_53 = Clock_Ip_pxFircClock;
  _54 = Clock_Ip_pxFircClock.67_53->Enable;
  Clock_Ip_pxFircConfig.68_55 = Clock_Ip_pxFircConfig;
  _54 (Clock_Ip_pxFircConfig.68_55);
  Clock_Ip_pxSoscClock.69_56 = Clock_Ip_pxSoscClock;
  _57 = Clock_Ip_pxSoscClock.69_56->Enable;
  Clock_Ip_pxSoscConfig.70_58 = Clock_Ip_pxSoscConfig;
  _57 (Clock_Ip_pxSoscConfig.70_58);
  Clock_Ip_pxSoscClock.71_59 = Clock_Ip_pxSoscClock;
  _60 = Clock_Ip_pxSoscClock.71_59->Complete;
  Clock_Ip_pxSoscConfig.72_61 = Clock_Ip_pxSoscConfig;
  _60 (Clock_Ip_pxSoscConfig.72_61);
  Clock_Ip_pxSpllClock.73_62 = Clock_Ip_pxSpllClock;
  _63 = Clock_Ip_pxSpllClock.73_62->Enable;
  Clock_Ip_pxSpllConfig.74_64 = Clock_Ip_pxSpllConfig;
  _63 (Clock_Ip_pxSpllConfig.74_64);
  Clock_Ip_pxSpllClock.75_65 = Clock_Ip_pxSpllClock;
  _66 = Clock_Ip_pxSpllClock.75_65->Complete;
  Clock_Ip_pxSpllConfig.76_67 = Clock_Ip_pxSpllConfig;
  _68 = Clock_Ip_pxSpllConfig.76_67->Name;
  _66 (_68);
  Clock_Ip_pxScsHsrunClockSelector.77_69 = Clock_Ip_pxScsHsrunClockSelector;
  _70 = Clock_Ip_pxScsHsrunClockSelector.77_69->Set;
  Clock_Ip_pxScsConfigHsrunMode.78_71 = Clock_Ip_pxScsConfigHsrunMode;
  _70 (Clock_Ip_pxScsConfigHsrunMode.78_71);
  Clock_Ip_pxCoreHsrunClockDivider.79_72 = Clock_Ip_pxCoreHsrunClockDivider;
  _73 = Clock_Ip_pxCoreHsrunClockDivider.79_72->Set;
  Clock_Ip_pxCoreConfigHsrunMode.80_74 = Clock_Ip_pxCoreConfigHsrunMode;
  _73 (Clock_Ip_pxCoreConfigHsrunMode.80_74);
  Clock_Ip_pxBusHsrunClockDivider.81_75 = Clock_Ip_pxBusHsrunClockDivider;
  _76 = Clock_Ip_pxBusHsrunClockDivider.81_75->Set;
  Clock_Ip_pxBusConfigHsrunMode.82_77 = Clock_Ip_pxBusConfigHsrunMode;
  _76 (Clock_Ip_pxBusConfigHsrunMode.82_77);
  Clock_Ip_pxSlowHsrunClockDivider.83_78 = Clock_Ip_pxSlowHsrunClockDivider;
  _79 = Clock_Ip_pxSlowHsrunClockDivider.83_78->Set;
  Clock_Ip_pxSlowConfigHsrunMode.84_80 = Clock_Ip_pxSlowConfigHsrunMode;
  _79 (Clock_Ip_pxSlowConfigHsrunMode.84_80);

  <bb 11> :
  goto <bb 13>; [INV]

  <bb 12> :
<L10>:

  <bb 13> :
  return;

}


Clock_Ip_ClockInitializeObjects ()
{
  static boolean Clock_Ip_bObjsAreInitialized = 0;
  _Bool Clock_Ip_bObjsAreInitialized.34_1;
  _Bool _2;
  unsigned char _3;
  int _4;
  const struct Clock_Ip_PllCallbackType * _5;
  unsigned char _6;
  int _7;
  const struct Clock_Ip_ExtOscCallbackType * _8;
  unsigned char _9;
  int _10;
  const struct Clock_Ip_IntOscCallbackType * _11;
  unsigned char _12;
  int _13;
  const struct Clock_Ip_SelectorCallbackType * _14;
  unsigned char _15;
  int _16;
  const struct Clock_Ip_SelectorCallbackType * _17;
  unsigned char _18;
  int _19;
  const struct Clock_Ip_DividerCallbackType * _20;
  unsigned char _21;
  int _22;
  const struct Clock_Ip_DividerCallbackType * _23;
  unsigned char _24;
  int _25;
  const struct Clock_Ip_DividerCallbackType * _26;
  unsigned char _27;
  int _28;
  const struct Clock_Ip_DividerCallbackType * _29;
  unsigned char _30;
  int _31;
  const struct Clock_Ip_DividerCallbackType * _32;
  unsigned char _33;
  int _34;
  const struct Clock_Ip_DividerCallbackType * _35;
  const struct Clock_Ip_IrcoscConfigType * _36;
  const struct Clock_Ip_XoscConfigType * _37;
  const struct Clock_Ip_PllConfigType * _38;
  const struct Clock_Ip_SelectorConfigType * _39;
  const struct Clock_Ip_SelectorConfigType * _40;
  const struct Clock_Ip_SelectorConfigType * _41;
  const struct Clock_Ip_DividerConfigType * _42;
  const struct Clock_Ip_DividerConfigType * _43;
  const struct Clock_Ip_DividerConfigType * _44;
  const struct Clock_Ip_DividerConfigType * _45;
  const struct Clock_Ip_DividerConfigType * _46;
  const struct Clock_Ip_DividerConfigType * _47;
  const struct Clock_Ip_DividerConfigType * _48;
  const struct Clock_Ip_DividerConfigType * _49;
  const struct Clock_Ip_DividerConfigType * _50;

  <bb 2> :
  Clock_Ip_bObjsAreInitialized.34_1 = Clock_Ip_bObjsAreInitialized;
  _2 = ~Clock_Ip_bObjsAreInitialized.34_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_bObjsAreInitialized = 1;
  _3 = Clock_Ip_au8PllCallbackIndex[1];
  _4 = (int) _3;
  _5 = &Clock_Ip_axPllCallbacks[_4];
  Clock_Ip_pxSpllClock = _5;
  _6 = Clock_Ip_au8XoscCallbackIndex[1];
  _7 = (int) _6;
  _8 = &Clock_Ip_axExtOscCallbacks[_7];
  Clock_Ip_pxSoscClock = _8;
  _9 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _10 = (int) _9;
  _11 = &Clock_Ip_axIntOscCallbacks[_10];
  Clock_Ip_pxFircClock = _11;
  _12 = Clock_Ip_au8SelectorCallbackIndex[5];
  _13 = (int) _12;
  _14 = &Clock_Ip_axSelectorCallbacks[_13];
  Clock_Ip_pxScsRunClockSelector = _14;
  _15 = Clock_Ip_au8SelectorCallbackIndex[7];
  _16 = (int) _15;
  _17 = &Clock_Ip_axSelectorCallbacks[_16];
  Clock_Ip_pxScsHsrunClockSelector = _17;
  _18 = Clock_Ip_au8DividerCallbackIndex[6];
  _19 = (int) _18;
  _20 = &Clock_Ip_axDividerCallbacks[_19];
  Clock_Ip_pxCoreRunClockDivider = _20;
  _21 = Clock_Ip_au8DividerCallbackIndex[8];
  _22 = (int) _21;
  _23 = &Clock_Ip_axDividerCallbacks[_22];
  Clock_Ip_pxCoreHsrunClockDivider = _23;
  _24 = Clock_Ip_au8DividerCallbackIndex[9];
  _25 = (int) _24;
  _26 = &Clock_Ip_axDividerCallbacks[_25];
  Clock_Ip_pxBusRunClockDivider = _26;
  _27 = Clock_Ip_au8DividerCallbackIndex[11];
  _28 = (int) _27;
  _29 = &Clock_Ip_axDividerCallbacks[_28];
  Clock_Ip_pxBusHsrunClockDivider = _29;
  _30 = Clock_Ip_au8DividerCallbackIndex[12];
  _31 = (int) _30;
  _32 = &Clock_Ip_axDividerCallbacks[_31];
  Clock_Ip_pxSlowRunClockDivider = _32;
  _33 = Clock_Ip_au8DividerCallbackIndex[14];
  _34 = (int) _33;
  _35 = &Clock_Ip_axDividerCallbacks[_34];
  Clock_Ip_pxSlowHsrunClockDivider = _35;

  <bb 4> :
  _36 = getFircConfig ();
  Clock_Ip_pxFircConfig = _36;
  _37 = getSoscConfig ();
  Clock_Ip_pxSoscConfig = _37;
  _38 = getSpllConfig ();
  Clock_Ip_pxSpllConfig = _38;
  _39 = getSelectorConfig (25);
  Clock_Ip_pxScsConfigRunMode = _39;
  _40 = getSelectorConfig (26);
  Clock_Ip_pxScsConfigVlprMode = _40;
  _41 = getSelectorConfig (27);
  Clock_Ip_pxScsConfigHsrunMode = _41;
  _42 = getCoreDividerConfig (29);
  Clock_Ip_pxCoreConfigRunMode = _42;
  _43 = getCoreDividerConfig (30);
  Clock_Ip_pxCoreConfigVlprMode = _43;
  _44 = getCoreDividerConfig (31);
  Clock_Ip_pxCoreConfigHsrunMode = _44;
  _45 = getBusDividerConfig (33);
  Clock_Ip_pxBusConfigRunMode = _45;
  _46 = getBusDividerConfig (34);
  Clock_Ip_pxBusConfigVlprMode = _46;
  _47 = getBusDividerConfig (35);
  Clock_Ip_pxBusConfigHsrunMode = _47;
  _48 = getSlowDividerConfig (37);
  Clock_Ip_pxSlowConfigRunMode = _48;
  _49 = getSlowDividerConfig (38);
  Clock_Ip_pxSlowConfigVlprMode = _49;
  _50 = getSlowDividerConfig (39);
  Clock_Ip_pxSlowConfigHsrunMode = _50;
  return;

}


getSlowDividerConfig (Clock_Ip_NameType Name)
{
  uint32 Index;
  uint32 DividerConfigIndex;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  const struct Clock_Ip_DividerConfigType * D.6466;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.30_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.31_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.32_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.33_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  struct SCG_Type * _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  struct SCG_Type * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  const struct Clock_Ip_DividerConfigType * _40;

  <bb 2> :
  ReturnValue_25 = 0B;
  DividerConfigIndex_26 = 0;
  switch (Name_27(D)) <default: <L3> [INV], case 37: <L0> [INV], case 38: <L1> [INV], case 39: <L2> [INV]>

  <bb 3> :
<L0>:
  DividerConfigIndex_30 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  DividerConfigIndex_29 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  DividerConfigIndex_28 = 2;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  # DividerConfigIndex_22 = PHI <DividerConfigIndex_30(3), DividerConfigIndex_29(4), DividerConfigIndex_28(5), DividerConfigIndex_26(6)>
  Clock_Ip_apConfig.30_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.30_1 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  Index_32 = 0;
  goto <bb 12>; [INV]

  <bb 9> :
  Clock_Ip_apConfig.31_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.31_2->Dividers[Index_23].Name;
  if (Name_27(D) == _3)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Clock_Ip_apConfig.32_4 = Clock_Ip_apConfig;
  ReturnValue_34 = &Clock_Ip_apConfig.32_4->Dividers[Index_23];
  goto <bb 13>; [INV]

  <bb 11> :
  Index_33 = Index_23 + 1;

  <bb 12> :
  # Index_23 = PHI <Index_32(8), Index_33(11)>
  Clock_Ip_apConfig.33_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.33_5->DividersCount;
  _7 = (long unsigned int) _6;
  if (Index_23 < _7)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # ReturnValue_20 = PHI <ReturnValue_25(7), ReturnValue_34(10), ReturnValue_25(12)>
  if (ReturnValue_20 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  ReturnValue_35 = &DividerConfigurations[DividerConfigIndex_22];
  DividerConfigurations[DividerConfigIndex_22].Name = Name_27(D);
  switch (Name_27(D)) <default: <L16> [INV], case 37: <L13> [INV], case 38: <L14> [INV], case 39: <L15> [INV]>

  <bb 15> :
<L13>:
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 & 15;
  _11 = _10 + 1;
  DividerConfigurations[DividerConfigIndex_22].Value = _11;
  goto <bb 19>; [INV]

  <bb 16> :
<L14>:
  _12 = 1074151424B;
  _13 ={v} _12->VCCR;
  _14 = _13 & 15;
  _15 = _14 + 1;
  DividerConfigurations[DividerConfigIndex_22].Value = _15;
  goto <bb 19>; [INV]

  <bb 17> :
<L15>:
  _16 = 1074151424B;
  _17 ={v} _16->HCCR;
  _18 = _17 & 15;
  _19 = _18 + 1;
  DividerConfigurations[DividerConfigIndex_22].Value = _19;
  goto <bb 19>; [INV]

  <bb 18> :
<L16>:

  <bb 19> :
  # ReturnValue_21 = PHI <ReturnValue_20(13), ReturnValue_35(15), ReturnValue_35(16), ReturnValue_35(17), ReturnValue_35(18)>
  _40 = ReturnValue_21;

  <bb 20> :
<L19>:
  return _40;

}


getBusDividerConfig (Clock_Ip_NameType Name)
{
  uint32 Index;
  uint32 DividerConfigIndex;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  const struct Clock_Ip_DividerConfigType * D.6458;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.26_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.27_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.28_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.29_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  struct SCG_Type * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  struct SCG_Type * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  const struct Clock_Ip_DividerConfigType * _43;

  <bb 2> :
  ReturnValue_28 = 0B;
  DividerConfigIndex_29 = 0;
  switch (Name_30(D)) <default: <L3> [INV], case 33: <L0> [INV], case 34: <L1> [INV], case 35: <L2> [INV]>

  <bb 3> :
<L0>:
  DividerConfigIndex_33 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  DividerConfigIndex_32 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  DividerConfigIndex_31 = 2;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  # DividerConfigIndex_25 = PHI <DividerConfigIndex_33(3), DividerConfigIndex_32(4), DividerConfigIndex_31(5), DividerConfigIndex_29(6)>
  Clock_Ip_apConfig.26_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.26_1 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  Index_35 = 0;
  goto <bb 12>; [INV]

  <bb 9> :
  Clock_Ip_apConfig.27_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.27_2->Dividers[Index_26].Name;
  if (Name_30(D) == _3)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Clock_Ip_apConfig.28_4 = Clock_Ip_apConfig;
  ReturnValue_37 = &Clock_Ip_apConfig.28_4->Dividers[Index_26];
  goto <bb 13>; [INV]

  <bb 11> :
  Index_36 = Index_26 + 1;

  <bb 12> :
  # Index_26 = PHI <Index_35(8), Index_36(11)>
  Clock_Ip_apConfig.29_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.29_5->DividersCount;
  _7 = (long unsigned int) _6;
  if (Index_26 < _7)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # ReturnValue_23 = PHI <ReturnValue_28(7), ReturnValue_37(10), ReturnValue_28(12)>
  if (ReturnValue_23 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  ReturnValue_38 = &DividerConfigurations[DividerConfigIndex_25];
  DividerConfigurations[DividerConfigIndex_25].Name = Name_30(D);
  switch (Name_30(D)) <default: <L16> [INV], case 33: <L13> [INV], case 34: <L14> [INV], case 35: <L15> [INV]>

  <bb 15> :
<L13>:
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 >> 4;
  _11 = _10 & 15;
  _12 = _11 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _12;
  goto <bb 19>; [INV]

  <bb 16> :
<L14>:
  _13 = 1074151424B;
  _14 ={v} _13->VCCR;
  _15 = _14 >> 4;
  _16 = _15 & 15;
  _17 = _16 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _17;
  goto <bb 19>; [INV]

  <bb 17> :
<L15>:
  _18 = 1074151424B;
  _19 ={v} _18->HCCR;
  _20 = _19 >> 4;
  _21 = _20 & 15;
  _22 = _21 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _22;
  goto <bb 19>; [INV]

  <bb 18> :
<L16>:

  <bb 19> :
  # ReturnValue_24 = PHI <ReturnValue_23(13), ReturnValue_38(15), ReturnValue_38(16), ReturnValue_38(17), ReturnValue_38(18)>
  _43 = ReturnValue_24;

  <bb 20> :
<L19>:
  return _43;

}


getCoreDividerConfig (Clock_Ip_NameType Name)
{
  uint32 Index;
  uint32 DividerConfigIndex;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  const struct Clock_Ip_DividerConfigType * D.6450;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.22_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.23_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.24_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.25_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  struct SCG_Type * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  struct SCG_Type * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  const struct Clock_Ip_DividerConfigType * _43;

  <bb 2> :
  ReturnValue_28 = 0B;
  DividerConfigIndex_29 = 0;
  switch (Name_30(D)) <default: <L3> [INV], case 29: <L0> [INV], case 30: <L1> [INV], case 31: <L2> [INV]>

  <bb 3> :
<L0>:
  DividerConfigIndex_33 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  DividerConfigIndex_32 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  DividerConfigIndex_31 = 2;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  # DividerConfigIndex_25 = PHI <DividerConfigIndex_33(3), DividerConfigIndex_32(4), DividerConfigIndex_31(5), DividerConfigIndex_29(6)>
  Clock_Ip_apConfig.22_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.22_1 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  Index_35 = 0;
  goto <bb 12>; [INV]

  <bb 9> :
  Clock_Ip_apConfig.23_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.23_2->Dividers[Index_26].Name;
  if (Name_30(D) == _3)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Clock_Ip_apConfig.24_4 = Clock_Ip_apConfig;
  ReturnValue_37 = &Clock_Ip_apConfig.24_4->Dividers[Index_26];
  goto <bb 13>; [INV]

  <bb 11> :
  Index_36 = Index_26 + 1;

  <bb 12> :
  # Index_26 = PHI <Index_35(8), Index_36(11)>
  Clock_Ip_apConfig.25_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.25_5->DividersCount;
  _7 = (long unsigned int) _6;
  if (Index_26 < _7)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # ReturnValue_23 = PHI <ReturnValue_28(7), ReturnValue_37(10), ReturnValue_28(12)>
  if (ReturnValue_23 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  ReturnValue_38 = &DividerConfigurations[DividerConfigIndex_25];
  DividerConfigurations[DividerConfigIndex_25].Name = Name_30(D);
  switch (Name_30(D)) <default: <L16> [INV], case 29: <L13> [INV], case 30: <L14> [INV], case 31: <L15> [INV]>

  <bb 15> :
<L13>:
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 >> 16;
  _11 = _10 & 15;
  _12 = _11 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _12;
  goto <bb 19>; [INV]

  <bb 16> :
<L14>:
  _13 = 1074151424B;
  _14 ={v} _13->VCCR;
  _15 = _14 >> 16;
  _16 = _15 & 15;
  _17 = _16 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _17;
  goto <bb 19>; [INV]

  <bb 17> :
<L15>:
  _18 = 1074151424B;
  _19 ={v} _18->HCCR;
  _20 = _19 >> 16;
  _21 = _20 & 15;
  _22 = _21 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _22;
  goto <bb 19>; [INV]

  <bb 18> :
<L16>:

  <bb 19> :
  # ReturnValue_24 = PHI <ReturnValue_23(13), ReturnValue_38(15), ReturnValue_38(16), ReturnValue_38(17), ReturnValue_38(18)>
  _43 = ReturnValue_24;

  <bb 20> :
<L19>:
  return _43;

}


getSelectorConfig (Clock_Ip_NameType Name)
{
  static const Clock_Ip_NameType ClockSource[7] = {0, 8, 2, 5, 0, 0, 9};
  uint32 Index;
  uint32 SelectorConfigIndex;
  static struct Clock_Ip_SelectorConfigType SelectorConfigurations[3];
  const struct Clock_Ip_SelectorConfigType * ReturnValue;
  const struct Clock_Ip_SelectorConfigType * D.6442;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.18_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.19_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.20_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.21_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  <unnamed type> _12;
  struct SCG_Type * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  <unnamed type> _17;
  struct SCG_Type * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  <unnamed type> _22;
  const struct Clock_Ip_SelectorConfigType * _43;

  <bb 2> :
  ReturnValue_28 = 0B;
  switch (Name_29(D)) <default: <L3> [INV], case 25: <L0> [INV], case 26: <L1> [INV], case 27: <L2> [INV]>

  <bb 3> :
<L0>:
  SelectorConfigIndex_32 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  SelectorConfigIndex_31 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  SelectorConfigIndex_30 = 2;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  SelectorConfigIndex_33 = 0;

  <bb 7> :
  # SelectorConfigIndex_25 = PHI <SelectorConfigIndex_32(3), SelectorConfigIndex_31(4), SelectorConfigIndex_30(5), SelectorConfigIndex_33(6)>
  Clock_Ip_apConfig.18_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.18_1 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  Index_35 = 0;
  goto <bb 12>; [INV]

  <bb 9> :
  Clock_Ip_apConfig.19_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.19_2->Selectors[Index_26].Name;
  if (Name_29(D) == _3)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Clock_Ip_apConfig.20_4 = Clock_Ip_apConfig;
  ReturnValue_37 = &Clock_Ip_apConfig.20_4->Selectors[Index_26];
  goto <bb 13>; [INV]

  <bb 11> :
  Index_36 = Index_26 + 1;

  <bb 12> :
  # Index_26 = PHI <Index_35(8), Index_36(11)>
  Clock_Ip_apConfig.21_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.21_5->SelectorsCount;
  _7 = (long unsigned int) _6;
  if (Index_26 < _7)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # ReturnValue_23 = PHI <ReturnValue_28(7), ReturnValue_37(10), ReturnValue_28(12)>
  if (ReturnValue_23 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  ReturnValue_38 = &SelectorConfigurations[SelectorConfigIndex_25];
  SelectorConfigurations[SelectorConfigIndex_25].Name = Name_29(D);
  switch (Name_29(D)) <default: <L16> [INV], case 25: <L13> [INV], case 26: <L14> [INV], case 27: <L15> [INV]>

  <bb 15> :
<L13>:
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 >> 24;
  _11 = _10 & 15;
  _12 = ClockSource[_11];
  SelectorConfigurations[SelectorConfigIndex_25].Value = _12;
  goto <bb 19>; [INV]

  <bb 16> :
<L14>:
  _13 = 1074151424B;
  _14 ={v} _13->VCCR;
  _15 = _14 >> 24;
  _16 = _15 & 15;
  _17 = ClockSource[_16];
  SelectorConfigurations[SelectorConfigIndex_25].Value = _17;
  goto <bb 19>; [INV]

  <bb 17> :
<L15>:
  _18 = 1074151424B;
  _19 ={v} _18->HCCR;
  _20 = _19 >> 24;
  _21 = _20 & 15;
  _22 = ClockSource[_21];
  SelectorConfigurations[SelectorConfigIndex_25].Value = _22;
  goto <bb 19>; [INV]

  <bb 18> :
<L16>:

  <bb 19> :
  # ReturnValue_24 = PHI <ReturnValue_23(13), ReturnValue_38(15), ReturnValue_38(16), ReturnValue_38(17), ReturnValue_38(18)>
  _43 = ReturnValue_24;

  <bb 20> :
<L19>:
  return _43;

}


getSpllConfig ()
{
  static struct Clock_Ip_PllConfigType SpllConfiguration;
  const struct Clock_Ip_PllConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_PllConfigType * D.6434;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.14_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.15_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.16_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.17_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  struct SCG_Type * _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned char _15;
  unsigned char _16;
  struct SCG_Type * _17;
  long unsigned int _18;
  long unsigned int _19;
  unsigned char _20;
  unsigned char _21;
  const struct Clock_Ip_PllConfigType * _36;

  <bb 2> :
  ReturnValue_26 = 0B;
  Clock_Ip_apConfig.14_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.14_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Index_28 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  Clock_Ip_apConfig.15_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.15_2->Plls[Index_22].Name;
  if (_3 == 9)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Clock_Ip_apConfig.16_4 = Clock_Ip_apConfig;
  ReturnValue_30 = &Clock_Ip_apConfig.16_4->Plls[Index_22];
  goto <bb 8>; [INV]

  <bb 6> :
  Index_29 = Index_22 + 1;

  <bb 7> :
  # Index_22 = PHI <Index_28(3), Index_29(6)>
  Clock_Ip_apConfig.17_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.17_5->PllsCount;
  _7 = (long unsigned int) _6;
  if (Index_22 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_23 = PHI <ReturnValue_26(2), ReturnValue_30(5), ReturnValue_26(7)>
  if (ReturnValue_23 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  ReturnValue_31 = &SpllConfiguration;
  SpllConfiguration.Name = 9;
  _8 = 1074151424B;
  _9 ={v} _8->SPLLCSR;
  _10 = (short unsigned int) _9;
  _11 = _10 & 1;
  SpllConfiguration.Enable = _11;
  _12 = 1074151424B;
  _13 ={v} _12->SPLLCFG;
  _14 = _13 >> 8;
  _15 = (unsigned char) _14;
  _16 = _15 & 7;
  SpllConfiguration.Predivider = _16;
  _17 = 1074151424B;
  _18 ={v} _17->SPLLCFG;
  _19 = _18 >> 16;
  _20 = (unsigned char) _19;
  _21 = _20 & 31;
  SpllConfiguration.MulFactorDiv = _21;

  <bb 10> :
  # ReturnValue_24 = PHI <ReturnValue_23(8), ReturnValue_31(9)>
  _36 = ReturnValue_24;

  <bb 11> :
<L9>:
  return _36;

}


getSoscConfig ()
{
  static struct Clock_Ip_XoscConfigType SoscConfiguration;
  const struct Clock_Ip_XoscConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_XoscConfigType * D.6426;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.10_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.11_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.12_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.13_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  const struct Clock_Ip_XoscConfigType * _25;

  <bb 2> :
  ReturnValue_16 = 0B;
  Clock_Ip_apConfig.10_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.10_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Index_18 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  Clock_Ip_apConfig.11_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.11_2->Xoscs[Index_12].Name;
  if (_3 == 8)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Clock_Ip_apConfig.12_4 = Clock_Ip_apConfig;
  ReturnValue_20 = &Clock_Ip_apConfig.12_4->Xoscs[Index_12];
  goto <bb 8>; [INV]

  <bb 6> :
  Index_19 = Index_12 + 1;

  <bb 7> :
  # Index_12 = PHI <Index_18(3), Index_19(6)>
  Clock_Ip_apConfig.13_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.13_5->XoscsCount;
  _7 = (long unsigned int) _6;
  if (Index_12 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_13 = PHI <ReturnValue_16(2), ReturnValue_20(5), ReturnValue_16(7)>
  if (ReturnValue_13 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  ReturnValue_21 = &SoscConfiguration;
  SoscConfiguration.Name = 8;
  _8 = 1074151424B;
  _9 ={v} _8->SOSCCSR;
  _10 = (short unsigned int) _9;
  _11 = _10 & 1;
  SoscConfiguration.Enable = _11;
  SoscConfiguration.Freq = 40000000;

  <bb 10> :
  # ReturnValue_14 = PHI <ReturnValue_13(8), ReturnValue_21(9)>
  _25 = ReturnValue_14;

  <bb 11> :
<L9>:
  return _25;

}


getFircConfig ()
{
  static struct Clock_Ip_IrcoscConfigType FircConfiguration;
  const struct Clock_Ip_IrcoscConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_IrcoscConfigType * D.6418;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.6_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.7_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.8_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.9_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  struct SCG_Type * _12;
  long unsigned int _13;
  unsigned char _14;
  unsigned char _15;
  struct SCG_Type * _16;
  long unsigned int _17;
  unsigned char _18;
  int _19;
  int _20;
  unsigned char _21;
  unsigned char _22;
  const struct Clock_Ip_IrcoscConfigType * _37;

  <bb 2> :
  ReturnValue_27 = 0B;
  Clock_Ip_apConfig.6_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.6_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Index_29 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  Clock_Ip_apConfig.7_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.7_2->Ircoscs[Index_23].Name;
  if (_3 == 5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Clock_Ip_apConfig.8_4 = Clock_Ip_apConfig;
  ReturnValue_31 = &Clock_Ip_apConfig.8_4->Ircoscs[Index_23];
  goto <bb 8>; [INV]

  <bb 6> :
  Index_30 = Index_23 + 1;

  <bb 7> :
  # Index_23 = PHI <Index_29(3), Index_30(6)>
  Clock_Ip_apConfig.9_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.9_5->IrcoscsCount;
  _7 = (long unsigned int) _6;
  if (Index_23 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_24 = PHI <ReturnValue_27(2), ReturnValue_31(5), ReturnValue_27(7)>
  if (ReturnValue_24 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  ReturnValue_32 = &FircConfiguration;
  FircConfiguration.Name = 5;
  _8 = 1074151424B;
  _9 ={v} _8->FIRCCSR;
  _10 = (short unsigned int) _9;
  _11 = _10 & 1;
  FircConfiguration.Enable = _11;
  _12 = 1074151424B;
  _13 ={v} _12->FIRCCFG;
  _14 = (unsigned char) _13;
  _15 = _14 & 3;
  FircConfiguration.Range = _15;
  _16 = 1074151424B;
  _17 ={v} _16->FIRCCSR;
  _18 = (unsigned char) _17;
  _19 = (int) _18;
  _20 = _19 >> 3;
  _21 = (unsigned char) _20;
  _22 = _21 & 1;
  FircConfiguration.Regulator = _22;

  <bb 10> :
  # ReturnValue_25 = PHI <ReturnValue_24(8), ReturnValue_32(9)>
  _37 = ReturnValue_25;

  <bb 11> :
<L9>:
  return _37;

}


Clock_Ip_SpecificPlatformInitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 IrcoscStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  struct SMC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  _Bool _4;
  struct SCG_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int TimeoutTicks.4_11;
  _Bool _12;

  <bb 2> :
  TimeoutOccurred_15 = 0;
  Clock_Ip_apConfig = Config_17(D);
  _1 = 1074257920B;
  _2 ={v} _1->PMSTAT;
  _3 = _2 & 255;
  _4 = _3 == 1;
  DevAssert (_4);
  _5 = 1074151424B;
  _6 ={v} _5->FIRCCSR;
  _7 = _6 & 1;
  if (_7 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Clock_Ip_bFircWasEnabledBeforeMcuInit = 0;
  SetFircToResetValue_TrustedCall ();
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  _8 = 1074151424B;
  _9 ={v} _8->FIRCCSR;
  _10 = _9 >> 24;
  IrcoscStatus_24 = _10 & 1;
  TimeoutTicks.4_11 = TimeoutTicks;
  TimeoutOccurred_26 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.4_11);
  if (IrcoscStatus_24 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _12 = ~TimeoutOccurred_26;
  if (_12 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (TimeoutOccurred_26 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  Clock_Ip_ReportClockErrors (1, 5);
  goto <bb 9>; [INV]

  <bb 8> :
  Clock_Ip_bFircWasEnabledBeforeMcuInit = 1;

  <bb 9> :
  SetSimLpoclksRegister_TrustedCall (Config_17(D));
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


SetSimLpoclksRegister_TrustedCall (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 SimLpoValue;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  <unnamed type> _6;
  <unnamed type> _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;
  long unsigned int _12;
  <unnamed type> _13;
  short unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  <unnamed type> _17;
  short unsigned int _18;
  long unsigned int _19;
  unsigned char _20;
  long unsigned int _21;
  struct SIM_Type * _22;

  <bb 2> :
  SimLpoValue_31 = 3;
  Index_32 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = Config_34(D)->Selectors[Index_29].Name;
  if (_1 == 40)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _2 = Config_34(D)->Selectors[Index_29].Value;
  _3 = Clock_Ip_au16SelectorEntryHardwareValue[_2];
  _4 = (long unsigned int) _3;
  _5 = _4 << 4;
  SimLpoValue_40 = SimLpoValue_25 | _5;

  <bb 5> :
  # SimLpoValue_23 = PHI <SimLpoValue_25(3), SimLpoValue_40(4)>
  _6 = Config_34(D)->Selectors[Index_29].Name;
  if (_6 == 41)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _7 = Config_34(D)->Selectors[Index_29].Value;
  _8 = Clock_Ip_au8SelectorEntryPcsHardwareValue[_7];
  _9 = (long unsigned int) _8;
  _10 = _9 << 2;
  SimLpoValue_41 = SimLpoValue_23 | _10;

  <bb 7> :
  # SimLpoValue_24 = PHI <SimLpoValue_23(5), SimLpoValue_41(6)>
  Index_42 = Index_29 + 1;

  <bb 8> :
  # SimLpoValue_25 = PHI <SimLpoValue_31(2), SimLpoValue_24(7)>
  # Index_29 = PHI <Index_32(2), Index_42(7)>
  _11 = Config_34(D)->SelectorsCount;
  _12 = (long unsigned int) _11;
  if (Index_29 < _12)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  Index_35 = 0;
  goto <bb 15>; [INV]

  <bb 10> :
  _13 = Config_34(D)->Gates[Index_30].Name;
  if (_13 == 18)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _14 = Config_34(D)->Gates[Index_30].Enable;
  _15 = (long unsigned int) _14;
  _16 = _15 << 1;
  SimLpoValue_37 = SimLpoValue_28 | _16;

  <bb 12> :
  # SimLpoValue_26 = PHI <SimLpoValue_28(10), SimLpoValue_37(11)>
  _17 = Config_34(D)->Gates[Index_30].Name;
  if (_17 == 19)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _18 = Config_34(D)->Gates[Index_30].Enable;
  _19 = (long unsigned int) _18;
  SimLpoValue_38 = SimLpoValue_26 | _19;

  <bb 14> :
  # SimLpoValue_27 = PHI <SimLpoValue_26(12), SimLpoValue_38(13)>
  Index_39 = Index_30 + 1;

  <bb 15> :
  # SimLpoValue_28 = PHI <SimLpoValue_25(9), SimLpoValue_27(14)>
  # Index_30 = PHI <Index_35(9), Index_39(14)>
  _20 = Config_34(D)->GatesCount;
  _21 = (long unsigned int) _20;
  if (Index_30 < _21)
    goto <bb 10>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _22 = 1074036736B;
  _22->LPOCLKS ={v} SimLpoValue_28;
  return;

}


SetFircToResetValue_TrustedCall ()
{
  struct SCG_Type * _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  struct SCG_Type * _4;
  long unsigned int _5;

  <bb 2> :
  _1 = 1074151424B;
  _1->FIRCCFG ={v} 0;
  _2 = 1074151424B;
  _3 ={v} _2->FIRCCSR;
  _4 = 1074151424B;
  _5 = _3 | 1;
  _4->FIRCCSR ={v} _5;
  return;

}


DisableSafeClock (const struct Clock_Ip_ClockConfigType * Config)
{
  boolean FircConfigFound;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.0_1;
  <unnamed type> _2;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.1_3;
  short unsigned int _4;
  unsigned char _5;
  int _6;
  void (*<T580>) (Clock_Ip_NameType) _7;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.2_8;
  unsigned char _9;
  long unsigned int _10;
  _Bool _11;
  _Bool Clock_Ip_bFircWasEnabledBeforeMcuInit.3_12;
  _Bool _13;
  unsigned char _14;
  int _15;
  void (*<T580>) (Clock_Ip_NameType) _16;

  <bb 2> :
  FircConfigFound_22 = 0;
  if (Config_23(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  Index_25 = 0;
  goto <bb 9>; [INV]

  <bb 4> :
  Clock_Ip_apConfig.0_1 = Clock_Ip_apConfig;
  _2 = Clock_Ip_apConfig.0_1->Ircoscs[Index_17].Name;
  if (_2 == 5)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  FircConfigFound_27 = 1;
  Clock_Ip_apConfig.1_3 = Clock_Ip_apConfig;
  _4 = Clock_Ip_apConfig.1_3->Ircoscs[Index_17].Enable;
  if (_4 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _5 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _6 = (int) _5;
  _7 = Clock_Ip_axIntOscCallbacks[_6].Disable;
  _7 (5);

  <bb 7> :
  goto <bb 10>; [INV]

  <bb 8> :
  Index_26 = Index_17 + 1;

  <bb 9> :
  # Index_17 = PHI <Index_25(3), Index_26(8)>
  Clock_Ip_apConfig.2_8 = Clock_Ip_apConfig;
  _9 = Clock_Ip_apConfig.2_8->IrcoscsCount;
  _10 = (long unsigned int) _9;
  if (Index_17 < _10)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # FircConfigFound_18 = PHI <FircConfigFound_22(2), FircConfigFound_27(7), FircConfigFound_22(9)>
  _11 = ~FircConfigFound_18;
  if (_11 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  Clock_Ip_bFircWasEnabledBeforeMcuInit.3_12 = Clock_Ip_bFircWasEnabledBeforeMcuInit;
  _13 = ~Clock_Ip_bFircWasEnabledBeforeMcuInit.3_12;
  if (_13 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _14 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _15 = (int) _14;
  _16 = Clock_Ip_axIntOscCallbacks[_15].Disable;
  _16 (5);

  <bb 13> :
  return;

}


DevAssert (volatile boolean x)
{
  _Bool x.5_1;

  <bb 2> :
  x.5_1 ={v} x;
  if (x.5_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0");
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


