
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Power_Ip_CM4_EnableSleepOnExit/5 (Power_Ip_CM4_EnableSleepOnExit) @05b68620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 
  Calls: 
Power_Ip_TimeoutExpired/4 (Power_Ip_TimeoutExpired) @05b68540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 
  Calls: 
Power_Ip_StartTimeout/3 (Power_Ip_StartTimeout) @05b68460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 
  Calls: 
Power_Ip_SMC_ModeConfig/2 (Power_Ip_SMC_ModeConfig) @05ae4d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_CM4_EnableSleepOnExit/5 Power_Ip_CM4_EnableSleepOnExit/5 Power_Ip_CM4_EnableSleepOnExit/5 Power_Ip_TimeoutExpired/4 Power_Ip_StartTimeout/3 Power_Ip_TimeoutExpired/4 Power_Ip_StartTimeout/3 Power_Ip_TimeoutExpired/4 Power_Ip_StartTimeout/3 
Power_Ip_SMC_ModeCheckEntry/1 (Power_Ip_SMC_ModeCheckEntry) @05ae47e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Power_Ip_SMC_AllowedModesConfig/0 (Power_Ip_SMC_AllowedModesConfig) @05ae4540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Power_Ip_SMC_ModeConfig (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  uint32 RegValue;
  uint32 PowerModeStatus;
  uint32 TempValue;
  Power_Ip_PowerModeType PowerMode;
  uint32 PowerSwitchMode;
  uint32 D.5787;
  struct SMC_Type * _1;
  struct SMC_Type * _2;
  long unsigned int TimeoutTicks.0_3;
  struct SMC_Type * _4;
  long unsigned int _5;
  _Bool _6;
  struct SMC_Type * _7;
  struct SMC_Type * _8;
  long unsigned int TimeoutTicks.1_9;
  struct SMC_Type * _10;
  long unsigned int _11;
  _Bool _12;
  struct SMC_Type * _13;
  struct SMC_Type * _14;
  long unsigned int TimeoutTicks.2_15;
  struct SMC_Type * _16;
  long unsigned int _17;
  _Bool _18;
  struct SMC_Type * _19;
  struct SMC_Type * _20;
  struct SMC_Type * _21;
  unsigned char _22;
  struct SMC_Type * _23;
  struct SMC_Type * _24;
  struct SMC_Type * _25;
  struct SMC_Type * _26;
  unsigned char _27;
  struct SMC_Type * _28;
  struct SMC_Type * _29;
  struct SMC_Type * _30;
  struct SMC_Type * _31;
  unsigned char _32;
  uint32 _108;

  <bb 2> :
  PowerSwitchMode_44 = 0;
  PowerMode_45 = 0;
  RegValue_46 = 0;
  TimeoutOccurred_47 = 0;
  PowerMode_50 = ModeConfigPtr_49(D)->PowerMode;
  switch (PowerMode_50) <default: <L27> [INV], case 0: <L0> [INV], case 1: <L6> [INV], case 2: <L12> [INV], case 3: <L18> [INV], case 4: <L21> [INV], case 5: <L24> [INV]>

  <bb 3> :
<L0>:
  _1 = 1074257920B;
  TempValue_98 ={v} _1->PMCTRL;
  TempValue_99 = TempValue_98 & 4294967199;
  TempValue_100 = TempValue_99;
  _2 = 1074257920B;
  _2->PMCTRL ={v} TempValue_100;
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  TimeoutTicks.0_3 = TimeoutTicks;
  TimeoutOccurred_104 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_3);
  _4 = 1074257920B;
  _5 ={v} _4->PMSTAT;
  PowerModeStatus_105 = _5 & 1;
  if (PowerModeStatus_105 != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = ~TimeoutOccurred_104;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (TimeoutOccurred_104 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  PowerSwitchMode_106 = 1;

  <bb 8> :
  # PowerSwitchMode_33 = PHI <PowerSwitchMode_44(6), PowerSwitchMode_106(7)>
  goto <bb 31>; [INV]

  <bb 9> :
<L6>:
  _7 = 1074257920B;
  TempValue_89 ={v} _7->PMCTRL;
  TempValue_90 = TempValue_89 & 4294967199;
  TempValue_91 = TempValue_90 | 96;
  _8 = 1074257920B;
  _8->PMCTRL ={v} TempValue_91;
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 10> :
  TimeoutTicks.1_9 = TimeoutTicks;
  TimeoutOccurred_95 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_9);
  _10 = 1074257920B;
  _11 ={v} _10->PMSTAT;
  PowerModeStatus_96 = _11 & 128;
  if (PowerModeStatus_96 != 128)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _12 = ~TimeoutOccurred_95;
  if (_12 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (TimeoutOccurred_95 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  PowerSwitchMode_97 = 1;

  <bb 14> :
  # PowerSwitchMode_34 = PHI <PowerSwitchMode_44(12), PowerSwitchMode_97(13)>
  goto <bb 31>; [INV]

  <bb 15> :
<L12>:
  _13 = 1074257920B;
  TempValue_80 ={v} _13->PMCTRL;
  TempValue_81 = TempValue_80 & 4294967199;
  TempValue_82 = TempValue_81 | 64;
  _14 = 1074257920B;
  _14->PMCTRL ={v} TempValue_82;
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 16> :
  TimeoutTicks.2_15 = TimeoutTicks;
  TimeoutOccurred_86 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.2_15);
  _16 = 1074257920B;
  _17 ={v} _16->PMSTAT;
  PowerModeStatus_87 = _17 & 4;
  if (PowerModeStatus_87 != 4)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _18 = ~TimeoutOccurred_86;
  if (_18 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  if (TimeoutOccurred_86 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  PowerSwitchMode_88 = 1;

  <bb 20> :
  # PowerSwitchMode_35 = PHI <PowerSwitchMode_44(18), PowerSwitchMode_88(19)>
  goto <bb 31>; [INV]

  <bb 21> :
<L18>:
  _19 = 1074257920B;
  TempValue_71 ={v} _19->PMCTRL;
  TempValue_72 = TempValue_71 & 4294967288;
  TempValue_73 = TempValue_72 | 2;
  _20 = 1074257920B;
  _20->PMCTRL ={v} TempValue_73;
  _21 = 1074257920B;
  RegValue_75 ={v} _21->PMCTRL;
  _22 = ModeConfigPtr_49(D)->SleepOnExit;
  if (_22 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  Power_Ip_CM4_EnableSleepOnExit ();

  <bb 23> :
  __asm__ __volatile__(" cpsie i");
  __asm__ __volatile__("  wfi");
  __asm__ __volatile__(" cpsid i");
  goto <bb 31>; [INV]

  <bb 24> :
<L21>:
  _23 = 1074257920B;
  _23->STOPCTRL ={v} 64;
  _24 = 1074257920B;
  TempValue_62 ={v} _24->PMCTRL;
  TempValue_63 = TempValue_62 & 4294967288;
  TempValue_64 = TempValue_63;
  _25 = 1074257920B;
  _25->PMCTRL ={v} TempValue_64;
  _26 = 1074257920B;
  RegValue_66 ={v} _26->STOPCTRL;
  _27 = ModeConfigPtr_49(D)->SleepOnExit;
  if (_27 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Power_Ip_CM4_EnableSleepOnExit ();

  <bb 26> :
  __asm__ __volatile__(" cpsie i");
  __asm__ __volatile__("  wfi");
  __asm__ __volatile__(" cpsid i");
  goto <bb 31>; [INV]

  <bb 27> :
<L24>:
  _28 = 1074257920B;
  _28->STOPCTRL ={v} 128;
  _29 = 1074257920B;
  TempValue_52 ={v} _29->PMCTRL;
  TempValue_53 = TempValue_52 & 4294967288;
  TempValue_54 = TempValue_53;
  _30 = 1074257920B;
  _30->PMCTRL ={v} TempValue_54;
  _31 = 1074257920B;
  RegValue_56 ={v} _31->STOPCTRL;
  _32 = ModeConfigPtr_49(D)->SleepOnExit;
  if (_32 != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  Power_Ip_CM4_EnableSleepOnExit ();

  <bb 29> :
  __asm__ __volatile__(" cpsie i");
  __asm__ __volatile__("  wfi");
  __asm__ __volatile__(" cpsid i");
  goto <bb 31>; [INV]

  <bb 30> :
<L27>:
  PowerSwitchMode_107 = 1;

  <bb 31> :
  # PowerSwitchMode_36 = PHI <PowerSwitchMode_33(8), PowerSwitchMode_34(14), PowerSwitchMode_35(20), PowerSwitchMode_44(23), PowerSwitchMode_44(26), PowerSwitchMode_44(29), PowerSwitchMode_107(30)>
  _108 = PowerSwitchMode_36;
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};

  <bb 32> :
<L30>:
  return _108;

}


Power_Ip_SMC_ModeCheckEntry (Power_Ip_PowerModeType PowerMode)
{
  uint32 CurrentPowerMode;
  Power_Ip_SMC_ModeStatusType PowerModeCheck;
  Power_Ip_SMC_ModeStatusType D.5770;
  struct SMC_Type * _1;
  long unsigned int _2;
  Power_Ip_SMC_ModeStatusType _20;

  <bb 2> :
  PowerModeCheck_9 = 1;
  CurrentPowerMode_10 = 1;
  _1 = 1074257920B;
  _2 ={v} _1->PMSTAT;
  CurrentPowerMode_12 = _2 & 255;
  switch (PowerMode_13(D)) <default: <L18> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L4> [INV], case 3: <L8> [INV], case 4: <L12> [INV], case 5: <L15> [INV]>

  <bb 3> :
<L0>:
  PowerModeCheck_19 = 0;
  goto <bb 22>; [INV]

  <bb 4> :
<L1>:
  if (CurrentPowerMode_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  PowerModeCheck_18 = 0;

  <bb 6> :
  # PowerModeCheck_3 = PHI <PowerModeCheck_9(4), PowerModeCheck_18(5)>
  goto <bb 22>; [INV]

  <bb 7> :
<L4>:
  if (CurrentPowerMode_12 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (CurrentPowerMode_12 == 16)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  PowerModeCheck_17 = 0;

  <bb 10> :
  # PowerModeCheck_4 = PHI <PowerModeCheck_9(8), PowerModeCheck_17(9)>
  goto <bb 22>; [INV]

  <bb 11> :
<L8>:
  if (CurrentPowerMode_12 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (CurrentPowerMode_12 == 4)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  PowerModeCheck_16 = 0;

  <bb 14> :
  # PowerModeCheck_5 = PHI <PowerModeCheck_9(12), PowerModeCheck_16(13)>
  goto <bb 22>; [INV]

  <bb 15> :
<L12>:
  if (CurrentPowerMode_12 == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  PowerModeCheck_15 = 0;

  <bb 17> :
  # PowerModeCheck_6 = PHI <PowerModeCheck_9(15), PowerModeCheck_15(16)>
  goto <bb 22>; [INV]

  <bb 18> :
<L15>:
  if (CurrentPowerMode_12 == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  PowerModeCheck_14 = 0;

  <bb 20> :
  # PowerModeCheck_7 = PHI <PowerModeCheck_9(18), PowerModeCheck_14(19)>
  goto <bb 22>; [INV]

  <bb 21> :
<L18>:

  <bb 22> :
  # PowerModeCheck_8 = PHI <PowerModeCheck_19(3), PowerModeCheck_3(6), PowerModeCheck_4(10), PowerModeCheck_5(14), PowerModeCheck_6(17), PowerModeCheck_7(20), PowerModeCheck_9(21)>
  _20 = PowerModeCheck_8;

  <bb 23> :
<L20>:
  return _20;

}


Power_Ip_SMC_AllowedModesConfig (const struct Power_Ip_SMC_ConfigType * ConfigPtr)
{
  long unsigned int _1;
  struct SMC_Type * _2;
  long unsigned int _3;

  <bb 2> :
  _1 = ConfigPtr_5(D)->AllowedModes;
  _2 = 1074257920B;
  _3 = _1 & 160;
  _2->PMPROT ={v} _3;
  return;

}


