Symbol table:

Pwm_Ipw_UnMaskOutputs/41 (Pwm_Ipw_UnMaskOutputs) @069eb7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_UnMaskOutputs/22 
  Calls: 
Pwm_Ipw_MaskOutputs/40 (Pwm_Ipw_MaskOutputs) @069eb620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_MaskOutputs/21 
  Calls: 
Pwm_Ipw_ValidateSetDutyPhaseShiftParams/39 (Pwm_Ipw_ValidateSetDutyPhaseShiftParams) @069eb460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_ValidateParamsDutyPhaseShift/12 
  Calls: 
Pwm_Ipw_SetDutyPhaseShift/38 (Pwm_Ipw_SetDutyPhaseShift) @069eb2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_SetDutyPhaseShift/20 
  Calls: 
Pwm_Ipw_ValidateSetPhaseShiftParams/37 (Pwm_Ipw_ValidateSetPhaseShiftParams) @069eb0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_ValidateParamsPhaseShift/11 
  Calls: 
Pwm_Ipw_SetPhaseShift/36 (Pwm_Ipw_SetPhaseShift) @06292ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_SetPhaseShift/19 
  Calls: 
Pwm_Ipw_ValidateModuleId/35 (Pwm_Ipw_ValidateModuleId) @06292d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_ValidateModuleId/10 
  Calls: 
Pwm_Ipw_SyncUpdate/34 (Pwm_Ipw_SyncUpdate) @06292b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_SyncUpdate/18 
  Calls: 
Pwm_Ipw_GetChannelState/33 (Pwm_Ipw_GetChannelState) @062929a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_GetChannelState/17 
  Calls: 
Pwm_Ipw_GetMaxPeriodValue/32 (Pwm_Ipw_GetMaxPeriodValue) @062927e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_ValidateParamsPeriodClass/9 
  Calls: 
Pwm_Ipw_SetPeriodAndDuty/31 (Pwm_Ipw_SetPeriodAndDuty) @06292620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_SetPeriodAndDuty/16 
  Calls: 
Pwm_Ipw_ValidateUpdateSynchronous/30 (Pwm_Ipw_ValidateUpdateSynchronous) @062921c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_ValidateChannelConfigCall/5 
  Calls: 
Pwm_Ipw_ValidateSetPhaseShift/29 (Pwm_Ipw_ValidateSetPhaseShift) @062920e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_ValidateChannelConfigCall/5 
  Calls: 
Pwm_Ipw_SetDutyCycle/28 (Pwm_Ipw_SetDutyCycle) @069e1e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_SetDutyCycle/15 
  Calls: 
Pwm_Ipw_DeInitInstance/27 (Pwm_Ipw_DeInitInstance) @069e1b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_DeInit/14 
  Calls: 
Pwm_Ipw_DeInit/26 (Pwm_Ipw_DeInit) @069e1a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_DeInit/14 
  Calls: 
Pwm_Ipw_Init/25 (Pwm_Ipw_Init) @069e1700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Init/13 
  Calls: 
Pwm_Ipw_InitInstance/24 (Pwm_Ipw_InitInstance) @069e1540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Init/13 
  Calls: 
Det_ReportError/23 (Det_ReportError) @069e1380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_SetDutyCycle/15 Pwm_ValidateGlobalConfigCall/3 Pwm_ValidateGlobalConfigCall/3 Pwm_ValidateParamsDutyPhaseShift/12 Pwm_ValidateParamsPhaseShift/11 Pwm_ValidateModuleId/10 Pwm_ValidateParamsPeriodClass/9 Pwm_ValidateParamsPeriodClass/9 Pwm_ValidateChannelConfigCall/5 Pwm_ValidateChannelConfigCall/5 Pwm_ValidateChannelConfigCall/5 Pwm_ValidateChannelConfigCall/5 Pwm_ValidateChannelConfigCall/5 Pwm_ValidateParamDuty/8 Pwm_ValidateParamPtrInit/7 
  Calls: 
Pwm_UnMaskOutputs/22 (Pwm_UnMaskOutputs) @069d5b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateGlobalConfigCall/4 Pwm_Ipw_UnMaskOutputs/41 Pwm_ValidateModuleId/10 Pwm_ValidateGlobalConfigCall/3 
Pwm_MaskOutputs/21 (Pwm_MaskOutputs) @069d5620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateGlobalConfigCall/4 Pwm_Ipw_MaskOutputs/40 Pwm_ValidateModuleId/10 Pwm_ValidateGlobalConfigCall/3 
Pwm_SetDutyPhaseShift/20 (Pwm_SetDutyPhaseShift) @069d50e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateChannelConfigCall/6 Pwm_Ipw_SetDutyPhaseShift/38 Pwm_ValidateParamsDutyPhaseShift/12 Pwm_ValidateParamDuty/8 Pwm_GetPartitionChannelIdx/2 Pwm_ValidateChannelConfigCall/5 
Pwm_SetPhaseShift/19 (Pwm_SetPhaseShift) @069d5d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateChannelConfigCall/6 Pwm_Ipw_SetPhaseShift/36 Pwm_ValidateParamsPhaseShift/11 Pwm_ValidateParamsPeriodClass/9 Pwm_GetPartitionChannelIdx/2 Pwm_ValidateChannelConfigCall/5 
Pwm_SyncUpdate/18 (Pwm_SyncUpdate) @069d5a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateGlobalConfigCall/4 Pwm_Ipw_SyncUpdate/34 Pwm_ValidateModuleId/10 Pwm_ValidateGlobalConfigCall/3 
Pwm_GetChannelState/17 (Pwm_GetChannelState) @069d57e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateChannelConfigCall/6 Pwm_Ipw_GetChannelState/33 Pwm_GetPartitionChannelIdx/2 Pwm_ValidateChannelConfigCall/5 
Pwm_SetPeriodAndDuty/16 (Pwm_SetPeriodAndDuty) @069d5540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateChannelConfigCall/6 Pwm_Ipw_SetPeriodAndDuty/31 Pwm_ValidateParamDuty/8 Pwm_ValidateParamsPeriodClass/9 Pwm_GetPartitionChannelIdx/2 Pwm_ValidateChannelConfigCall/5 
Pwm_SetDutyCycle/15 (Pwm_SetDutyCycle) @069d52a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateChannelConfigCall/6 Det_ReportError/23 Pwm_Ipw_SetDutyCycle/28 Pwm_ValidateParamDuty/8 Pwm_GetPartitionChannelIdx/2 Pwm_ValidateChannelConfigCall/5 
Pwm_DeInit/14 (Pwm_DeInit) @069d5000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (write)Pwm_aState/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateGlobalConfigCall/4 Pwm_Ipw_DeInitInstance/27 Pwm_Ipw_DeInit/26 Pwm_ValidateGlobalConfigCall/3 
Pwm_Init/13 (Pwm_Init) @069c8b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_aState/1 (write)Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (write)Pwm_aState/1 (read)Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pwm_EndValidateGlobalConfigCall/4 Pwm_Ipw_Init/25 Pwm_Ipw_InitInstance/24 Pwm_ValidateParamPtrInit/7 Pwm_ValidateGlobalConfigCall/3 
Pwm_ValidateParamsDutyPhaseShift/12 (Pwm_ValidateParamsDutyPhaseShift) @069c8620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Pwm_aState/1 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_SetDutyPhaseShift/20 
  Calls: Det_ReportError/23 Pwm_Ipw_ValidateSetDutyPhaseShiftParams/39 
Pwm_ValidateParamsPhaseShift/11 (Pwm_ValidateParamsPhaseShift) @069c80e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_SetPhaseShift/19 
  Calls: Det_ReportError/23 Pwm_Ipw_ValidateSetPhaseShiftParams/37 
Pwm_ValidateModuleId/10 (Pwm_ValidateModuleId) @069c8d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_UnMaskOutputs/22 Pwm_MaskOutputs/21 Pwm_SyncUpdate/18 
  Calls: Det_ReportError/23 Pwm_Ipw_ValidateModuleId/35 
Pwm_ValidateParamsPeriodClass/9 (Pwm_ValidateParamsPeriodClass) @069c8a80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Pwm_aState/1 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_SetPhaseShift/19 Pwm_SetPeriodAndDuty/16 
  Calls: Det_ReportError/23 Pwm_Ipw_GetMaxPeriodValue/32 Det_ReportError/23 
Pwm_ValidateParamDuty/8 (Pwm_ValidateParamDuty) @069c87e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_SetDutyPhaseShift/20 Pwm_SetPeriodAndDuty/16 Pwm_SetDutyCycle/15 
  Calls: Det_ReportError/23 
Pwm_ValidateParamPtrInit/7 (Pwm_ValidateParamPtrInit) @069c8540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_Init/13 
  Calls: Det_ReportError/23 
Pwm_EndValidateChannelConfigCall/6 (Pwm_EndValidateChannelConfigCall) @069c82a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_SetDutyPhaseShift/20 Pwm_SetPhaseShift/19 Pwm_GetChannelState/17 Pwm_SetPeriodAndDuty/16 Pwm_SetDutyCycle/15 
  Calls: 
Pwm_ValidateChannelConfigCall/5 (Pwm_ValidateChannelConfigCall) @069c8000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (read)Pwm_aState/1 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_SetDutyPhaseShift/20 Pwm_SetPhaseShift/19 Pwm_GetChannelState/17 Pwm_SetPeriodAndDuty/16 Pwm_SetDutyCycle/15 
  Calls: Det_ReportError/23 Pwm_Ipw_ValidateUpdateSynchronous/30 Det_ReportError/23 Pwm_Ipw_ValidateSetPhaseShift/29 Det_ReportError/23 Pwm_GetPartitionChannelIdx/2 Det_ReportError/23 Det_ReportError/23 
Pwm_EndValidateGlobalConfigCall/4 (Pwm_EndValidateGlobalConfigCall) @068fec40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Pwm_aState/1 (write)Pwm_aState/1 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_UnMaskOutputs/22 Pwm_MaskOutputs/21 Pwm_SyncUpdate/18 Pwm_DeInit/14 Pwm_Init/13 
  Calls: 
Pwm_ValidateGlobalConfigCall/3 (Pwm_ValidateGlobalConfigCall) @068fee00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Pwm_aState/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Pwm_UnMaskOutputs/22 Pwm_MaskOutputs/21 Pwm_SyncUpdate/18 Pwm_DeInit/14 Pwm_Init/13 
  Calls: Det_ReportError/23 Det_ReportError/23 
Pwm_GetPartitionChannelIdx/2 (Pwm_GetPartitionChannelIdx) @068feb60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Pwm_SetDutyPhaseShift/20 Pwm_SetPhaseShift/19 Pwm_GetChannelState/17 Pwm_SetPeriodAndDuty/16 Pwm_SetDutyCycle/15 Pwm_ValidateChannelConfigCall/5 
  Calls: 
Pwm_aState/1 (Pwm_aState) @068f7870
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Pwm_ValidateParamsPeriodClass/9 (read)Pwm_SetPeriodAndDuty/16 (read)Pwm_GetChannelState/17 (read)Pwm_ValidateChannelConfigCall/5 (read)Pwm_Init/13 (read)Pwm_Init/13 (write)Pwm_EndValidateGlobalConfigCall/4 (write)Pwm_ValidateParamsDutyPhaseShift/12 (read)Pwm_SetPhaseShift/19 (read)Pwm_SetDutyPhaseShift/20 (read)Pwm_Init/13 (write)Pwm_Init/13 (read)Pwm_Init/13 (read)Pwm_ValidateChannelConfigCall/5 (read)Pwm_ValidateChannelConfigCall/5 (read)Pwm_ValidateChannelConfigCall/5 (read)Pwm_ValidateGlobalConfigCall/3 (read)Pwm_Init/13 (read)Pwm_SetPeriodAndDuty/16 (read)Pwm_SetPhaseShift/19 (read)Pwm_MaskOutputs/21 (read)Pwm_MaskOutputs/21 (read)Pwm_Init/13 (read)Pwm_DeInit/14 (write)Pwm_EndValidateGlobalConfigCall/4 (write)Pwm_SetDutyCycle/15 (read)Pwm_DeInit/14 (write)Pwm_DeInit/14 (read)Pwm_DeInit/14 (read)Pwm_DeInit/14 (read)Pwm_DeInit/14 (read)Pwm_DeInit/14 (read)Pwm_UnMaskOutputs/22 (read)Pwm_UnMaskOutputs/22 (read)
  Availability: available
  Varpool flags: initialized
Pwm_UnMaskOutputs (uint8 ModuleId, uint8 ChannelMask)
{
  uint8 Index;
  uint32 CoreId;
  Std_ReturnType CallIsValid;
  unsigned char _1;
  const struct Pwm_ConfigType * _2;
  const struct Pwm_IpwInstanceConfigType[<unknown>] * _3;
  int _4;
  const struct Pwm_IpwInstanceConfigType * _5;
  unsigned char Index.6_6;
  const struct Pwm_ConfigType * _7;
  unsigned char _8;

  <bb 2> :
  CoreId_12 = 0;
  CallIsValid_15 = Pwm_ValidateGlobalConfigCall (CoreId_12, 51);
  if (CallIsValid_15 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _1 = Pwm_ValidateModuleId (ModuleId_16(D), 51);
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Index_18 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _2 = Pwm_aState[CoreId_12].PwmConfig;
  _3 = _2->PwmInstancesConfig;
  _4 = (int) Index_9;
  _5 = &*_3[_4];
  Pwm_Ipw_UnMaskOutputs (ModuleId_16(D), ChannelMask_19(D), _5);
  Index.6_6 = Index_9;
  Index_21 = Index.6_6 + 1;

  <bb 6> :
  # Index_9 = PHI <Index_18(4), Index_21(5)>
  _7 = Pwm_aState[CoreId_12].PwmConfig;
  _8 = _7->NumInstances;
  if (Index_9 < _8)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Pwm_EndValidateGlobalConfigCall (CoreId_12, CallIsValid_15, 51);
  return;

}


Pwm_MaskOutputs (uint8 ModuleId, uint8 ChannelMask)
{
  uint8 Index;
  uint32 CoreId;
  Std_ReturnType CallIsValid;
  unsigned char _1;
  const struct Pwm_ConfigType * _2;
  const struct Pwm_IpwInstanceConfigType[<unknown>] * _3;
  int _4;
  const struct Pwm_IpwInstanceConfigType * _5;
  unsigned char Index.5_6;
  const struct Pwm_ConfigType * _7;
  unsigned char _8;

  <bb 2> :
  CoreId_12 = 0;
  CallIsValid_15 = Pwm_ValidateGlobalConfigCall (CoreId_12, 50);
  if (CallIsValid_15 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _1 = Pwm_ValidateModuleId (ModuleId_16(D), 50);
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Index_18 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _2 = Pwm_aState[CoreId_12].PwmConfig;
  _3 = _2->PwmInstancesConfig;
  _4 = (int) Index_9;
  _5 = &*_3[_4];
  Pwm_Ipw_MaskOutputs (ModuleId_16(D), ChannelMask_19(D), _5);
  Index.5_6 = Index_9;
  Index_21 = Index.5_6 + 1;

  <bb 6> :
  # Index_9 = PHI <Index_18(4), Index_21(5)>
  _7 = Pwm_aState[CoreId_12].PwmConfig;
  _8 = _7->NumInstances;
  if (Index_9 < _8)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Pwm_EndValidateGlobalConfigCall (CoreId_12, CallIsValid_15, 50);
  return;

}


Pwm_SetDutyPhaseShift (Pwm_ChannelType ChannelNumber, uint16 DutyCycle, uint16 PhaseShift, boolean SyncUpdate)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  const struct Pwm_ChannelConfigType * _4;
  unsigned int _5;
  unsigned int _6;
  const struct Pwm_ChannelConfigType * _7;
  const struct Pwm_IpwChannelConfigType * _8;

  <bb 2> :
  CoreId_10 = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId_10, ChannelNumber_12(D), 55);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx_15 = Pwm_GetPartitionChannelIdx (CoreId_10, ChannelNumber_12(D));
  _2 = Pwm_ValidateParamDuty (DutyCycle_16(D), 55);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = Pwm_ValidateParamsDutyPhaseShift (CoreId_10, PhaseShift_18(D), DutyCycle_16(D), PartitionChannelIdx_15, 55);
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _4 = Pwm_aState[CoreId_10].PwmChannelConfigs[0];
  _5 = (unsigned int) PartitionChannelIdx_15;
  _6 = _5 * 24;
  _7 = _4 + _6;
  _8 = &_7->IpwChannelCfg;
  Pwm_Ipw_SetDutyPhaseShift (DutyCycle_16(D), PhaseShift_18(D), _8, SyncUpdate_20(D));

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber_12(D));
  return;

}


Pwm_SetPhaseShift (Pwm_ChannelType ChannelNumber, Pwm_PeriodType Period, uint16 PhaseShift)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  unsigned char _1;
  const struct Pwm_ChannelConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Pwm_ChannelConfigType * _5;
  <unnamed type> _6;
  unsigned char _7;
  unsigned char _8;
  const struct Pwm_ChannelConfigType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Pwm_ChannelConfigType * _12;
  const struct Pwm_IpwChannelConfigType * _13;

  <bb 2> :
  CoreId_15 = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId_15, ChannelNumber_17(D), 44);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx_20 = Pwm_GetPartitionChannelIdx (CoreId_15, ChannelNumber_17(D));
  _2 = Pwm_aState[CoreId_15].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx_20;
  _4 = _3 * 24;
  _5 = _2 + _4;
  _6 = _5->PwmChannelClass;
  _7 = Pwm_ValidateParamsPeriodClass (CoreId_15, PartitionChannelIdx_20, _6, Period_21(D), 44);
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Pwm_ValidateParamsPhaseShift (PhaseShift_23(D), 44);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = Pwm_aState[CoreId_15].PwmChannelConfigs[0];
  _10 = (unsigned int) PartitionChannelIdx_20;
  _11 = _10 * 24;
  _12 = _9 + _11;
  _13 = &_12->IpwChannelCfg;
  Pwm_Ipw_SetPhaseShift (Period_21(D), PhaseShift_23(D), _13);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber_17(D));
  return;

}


Pwm_SyncUpdate (uint8 ModuleId)
{
  uint32 CoreId;
  Std_ReturnType CallIsValid;
  unsigned char _1;

  <bb 2> :
  CoreId_3 = 0;
  CallIsValid_6 = Pwm_ValidateGlobalConfigCall (CoreId_3, 40);
  if (CallIsValid_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _1 = Pwm_ValidateModuleId (ModuleId_7(D), 40);
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Pwm_Ipw_SyncUpdate (ModuleId_7(D));

  <bb 5> :
  Pwm_EndValidateGlobalConfigCall (CoreId_3, CallIsValid_6, 40);
  return;

}


Pwm_GetChannelState (Pwm_ChannelType ChannelNumber)
{
  uint16 DutyCycle;
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  uint16 D.6550;
  unsigned char _1;
  const struct Pwm_ChannelConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Pwm_ChannelConfigType * _5;
  const struct Pwm_IpwChannelConfigType * _6;
  uint16 _19;

  <bb 2> :
  DutyCycle_9 = 0;
  CoreId_10 = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId_10, ChannelNumber_12(D), 32);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PartitionChannelIdx_15 = Pwm_GetPartitionChannelIdx (CoreId_10, ChannelNumber_12(D));
  _2 = Pwm_aState[CoreId_10].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx_15;
  _4 = _3 * 24;
  _5 = _2 + _4;
  _6 = &_5->IpwChannelCfg;
  DutyCycle_17 = Pwm_Ipw_GetChannelState (_6);

  <bb 4> :
  # DutyCycle_7 = PHI <DutyCycle_9(2), DutyCycle_17(3)>
  Pwm_EndValidateChannelConfigCall (ChannelNumber_12(D));
  _19 = DutyCycle_7;

  <bb 5> :
<L2>:
  return _19;

}


Pwm_SetPeriodAndDuty (Pwm_ChannelType ChannelNumber, Pwm_PeriodType Period, uint16 DutyCycle)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  unsigned char _1;
  const struct Pwm_ChannelConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Pwm_ChannelConfigType * _5;
  <unnamed type> _6;
  unsigned char _7;
  unsigned char _8;
  const struct Pwm_ChannelConfigType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Pwm_ChannelConfigType * _12;
  const struct Pwm_IpwChannelConfigType * _13;

  <bb 2> :
  CoreId_15 = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId_15, ChannelNumber_17(D), 3);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx_20 = Pwm_GetPartitionChannelIdx (CoreId_15, ChannelNumber_17(D));
  _2 = Pwm_aState[CoreId_15].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx_20;
  _4 = _3 * 24;
  _5 = _2 + _4;
  _6 = _5->PwmChannelClass;
  _7 = Pwm_ValidateParamsPeriodClass (CoreId_15, PartitionChannelIdx_20, _6, Period_21(D), 3);
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Pwm_ValidateParamDuty (DutyCycle_23(D), 3);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = Pwm_aState[CoreId_15].PwmChannelConfigs[0];
  _10 = (unsigned int) PartitionChannelIdx_20;
  _11 = _10 * 24;
  _12 = _9 + _11;
  _13 = &_12->IpwChannelCfg;
  Pwm_Ipw_SetPeriodAndDuty (Period_21(D), DutyCycle_23(D), _13);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber_17(D));
  return;

}


Pwm_SetDutyCycle (Pwm_ChannelType ChannelNumber, uint16 DutyCycle)
{
  Std_ReturnType RetVal;
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  unsigned char _1;
  unsigned char _2;
  const struct Pwm_ChannelConfigType * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Pwm_ChannelConfigType * _6;
  const struct Pwm_IpwChannelConfigType * _7;

  <bb 2> :
  RetVal_9 = 0;
  CoreId_10 = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId_10, ChannelNumber_12(D), 2);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx_15 = Pwm_GetPartitionChannelIdx (CoreId_10, ChannelNumber_12(D));
  _2 = Pwm_ValidateParamDuty (DutyCycle_16(D), 2);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = Pwm_aState[CoreId_10].PwmChannelConfigs[0];
  _4 = (unsigned int) PartitionChannelIdx_15;
  _5 = _4 * 24;
  _6 = _3 + _5;
  _7 = &_6->IpwChannelCfg;
  RetVal_19 = Pwm_Ipw_SetDutyCycle (DutyCycle_16(D), _7);
  if (RetVal_19 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (121, 0, 2, 52);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber_12(D));
  return;

}


Pwm_DeInit ()
{
  uint8 Index;
  uint32 CoreId;
  const struct Pwm_ConfigType * ConfigPtr;
  Std_ReturnType CallIsValid;
  const struct Pwm_ChannelConfigType * _1;
  unsigned int _2;
  unsigned int _3;
  const struct Pwm_ChannelConfigType * _4;
  const struct Pwm_IpwChannelConfigType * _5;
  const struct Pwm_ChannelConfigType * _6;
  unsigned int _7;
  unsigned int _8;
  const struct Pwm_ChannelConfigType * _9;
  <unnamed type> _10;
  unsigned char Index.2_11;
  const struct Pwm_ConfigType * _12;
  unsigned char _13;
  const struct Pwm_IpwInstanceConfigType[<unknown>] * _14;
  int _15;
  const struct Pwm_IpwInstanceConfigType * _16;
  unsigned char Index.3_17;
  const struct Pwm_ConfigType * _18;
  unsigned char _19;
  int _20;
  unsigned char Index.4_21;

  <bb 2> :
  CoreId_29 = 0;
  CallIsValid_32 = Pwm_ValidateGlobalConfigCall (CoreId_29, 1);
  if (CallIsValid_32 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  Index_33 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = Pwm_aState[CoreId_29].PwmChannelConfigs[0];
  _2 = (unsigned int) Index_22;
  _3 = _2 * 24;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  _6 = Pwm_aState[CoreId_29].PwmChannelConfigs[0];
  _7 = (unsigned int) Index_22;
  _8 = _7 * 24;
  _9 = _6 + _8;
  _10 = _9->ChannelIdleState;
  Pwm_Ipw_DeInit (_5, _10);
  Index.2_11 = Index_22;
  Index_43 = Index.2_11 + 1;

  <bb 5> :
  # Index_22 = PHI <Index_33(3), Index_43(4)>
  _12 = Pwm_aState[CoreId_29].PwmConfig;
  _13 = _12->NumChannels;
  if (Index_22 < _13)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  ConfigPtr_34 = Pwm_aState[CoreId_29].PwmConfig;
  Index_35 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _14 = ConfigPtr_34->PwmInstancesConfig;
  _15 = (int) Index_23;
  _16 = &*_14[_15];
  Pwm_Ipw_DeInitInstance (_16);
  Index.3_17 = Index_23;
  Index_41 = Index.3_17 + 1;

  <bb 8> :
  # Index_23 = PHI <Index_35(6), Index_41(7)>
  _18 = Pwm_aState[CoreId_29].PwmConfig;
  _19 = _18->NumInstances;
  if (Index_23 < _19)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  Pwm_aState[CoreId_29].PwmConfig = 0B;
  Index_37 = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  _20 = (int) Index_24;
  Pwm_aState[CoreId_29].PwmChannelConfigs[_20] = 0B;
  Index.4_21 = Index_24;
  Index_39 = Index.4_21 + 1;

  <bb 11> :
  # Index_24 = PHI <Index_37(9), Index_39(10)>
  if (Index_24 <= 12)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  Pwm_EndValidateGlobalConfigCall (CoreId_29, CallIsValid_32, 1);
  return;

}


Pwm_Init (const struct Pwm_ConfigType * ConfigPtr)
{
  uint8 Index;
  uint32 CoreId;
  Std_ReturnType CallIsValid;
  const struct Pwm_ConfigType * _1;
  const struct Pwm_IpwInstanceConfigType[<unknown>] * _2;
  int _3;
  const struct Pwm_IpwInstanceConfigType * _4;
  unsigned char Index.0_5;
  const struct Pwm_ConfigType * _6;
  unsigned char _7;
  const struct Pwm_ConfigType * _8;
  const struct Pwm_ChannelConfigType[<unknown>] * _9;
  int _10;
  int _11;
  const struct Pwm_ChannelConfigType * _12;
  const struct Pwm_ConfigType * _13;
  const struct Pwm_ChannelConfigType[<unknown>] * _14;
  int _15;
  const struct Pwm_IpwChannelConfigType * _16;
  unsigned char Index.1_17;
  const struct Pwm_ConfigType * _18;
  unsigned char _19;

  <bb 2> :
  CoreId_26 = 0;
  CallIsValid_29 = Pwm_ValidateGlobalConfigCall (CoreId_26, 0);
  if (CallIsValid_29 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  CallIsValid_32 = Pwm_ValidateParamPtrInit (CoreId_26, ConfigPtr_30(D));
  if (CallIsValid_32 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  Pwm_aState[CoreId_26].PwmConfig = ConfigPtr_30(D);
  Index_34 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _1 = Pwm_aState[CoreId_26].PwmConfig;
  _2 = _1->PwmInstancesConfig;
  _3 = (int) Index_21;
  _4 = &*_2[_3];
  Pwm_Ipw_InitInstance (_4);
  Index.0_5 = Index_21;
  Index_40 = Index.0_5 + 1;

  <bb 6> :
  # Index_21 = PHI <Index_34(4), Index_40(5)>
  _6 = Pwm_aState[CoreId_26].PwmConfig;
  _7 = _6->NumInstances;
  if (Index_21 < _7)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Index_35 = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _8 = Pwm_aState[CoreId_26].PwmConfig;
  _9 = _8->PwmChannelsConfig;
  _10 = (int) Index_22;
  _11 = (int) Index_22;
  _12 = &*_9[_10];
  Pwm_aState[CoreId_26].PwmChannelConfigs[_11] = _12;
  _13 = Pwm_aState[CoreId_26].PwmConfig;
  _14 = _13->PwmChannelsConfig;
  _15 = (int) Index_22;
  _16 = &*_14[_15].IpwChannelCfg;
  Pwm_Ipw_Init (_16);
  Index.1_17 = Index_22;
  Index_38 = Index.1_17 + 1;

  <bb 9> :
  # Index_22 = PHI <Index_35(7), Index_38(8)>
  _18 = Pwm_aState[CoreId_26].PwmConfig;
  _19 = _18->NumChannels;
  if (Index_22 < _19)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # CallIsValid_20 = PHI <CallIsValid_29(2), CallIsValid_32(3), CallIsValid_32(9)>
  Pwm_EndValidateGlobalConfigCall (CoreId_26, CallIsValid_20, 0);
  return;

}


Pwm_ValidateParamsDutyPhaseShift (uint32 CoreId, uint16 PhaseShift, uint16 DutyCycle, Pwm_ChannelType ChannelNumber, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6579;
  const struct Pwm_ChannelConfigType * _1;
  unsigned int _2;
  unsigned int _3;
  const struct Pwm_ChannelConfigType * _4;
  const struct Pwm_IpwChannelConfigType * _5;
  Std_ReturnType _17;

  <bb 2> :
  RetVal_7 = 0;
  _1 = Pwm_aState[CoreId_9(D)].PwmChannelConfigs[0];
  _2 = (unsigned int) ChannelNumber_10(D);
  _3 = _2 * 24;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  RetVal_14 = Pwm_Ipw_ValidateSetDutyPhaseShiftParams (PhaseShift_11(D), DutyCycle_12(D), _5);
  if (RetVal_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId_15(D), 58);

  <bb 4> :
  _17 = RetVal_14;

  <bb 5> :
<L2>:
  return _17;

}


Pwm_ValidateParamsPhaseShift (uint16 PhaseShift, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6569;
  Std_ReturnType _9;

  <bb 2> :
  RetVal_2 = 0;
  RetVal_6 = Pwm_Ipw_ValidateSetPhaseShiftParams (PhaseShift_4(D));
  if (RetVal_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId_7(D), 58);

  <bb 4> :
  _9 = RetVal_6;

  <bb 5> :
<L2>:
  return _9;

}


Pwm_ValidateModuleId (uint8 ModuleId, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6559;
  unsigned char _1;
  Std_ReturnType _12;

  <bb 2> :
  RetVal_5 = 0;
  if (ModuleId_6(D) > 7)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _1 = Pwm_Ipw_ValidateModuleId (ModuleId_6(D));
  if (_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  RetVal_9 = 1;
  Det_ReportError (121, 0, ServiceId_10(D), 54);

  <bb 5> :
  # RetVal_2 = PHI <RetVal_5(3), RetVal_9(4)>
  _12 = RetVal_2;

  <bb 6> :
<L3>:
  return _12;

}


Pwm_ValidateParamsPeriodClass (uint32 CoreId, Pwm_ChannelType ChannelNumber, Pwm_ChannelClassType ChannelClass, Pwm_PeriodType Period, uint8 ServiceId)
{
  uint32 PeriodMaxValue;
  Std_ReturnType RetVal;
  Std_ReturnType D.6546;
  const struct Pwm_ChannelConfigType * _1;
  unsigned int _2;
  unsigned int _3;
  const struct Pwm_ChannelConfigType * _4;
  const struct Pwm_IpwChannelConfigType * _5;
  long unsigned int _6;
  Std_ReturnType _23;

  <bb 2> :
  RetVal_9 = 0;
  PeriodMaxValue_10 = 0;
  if (ChannelClass_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId_18(D), 19);
  RetVal_22 = 1;
  goto <bb 6>; [INV]

  <bb 4> :
  _1 = Pwm_aState[CoreId_13(D)].PwmChannelConfigs[0];
  _2 = (unsigned int) ChannelNumber_14(D);
  _3 = _2 * 24;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  PeriodMaxValue_16 = Pwm_Ipw_GetMaxPeriodValue (_5);
  _6 = (long unsigned int) Period_17(D);
  if (PeriodMaxValue_16 < _6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (121, 0, ServiceId_18(D), 26);
  RetVal_20 = 1;

  <bb 6> :
  # RetVal_7 = PHI <RetVal_22(3), RetVal_9(4), RetVal_20(5)>
  _23 = RetVal_7;

  <bb 7> :
<L6>:
  return _23;

}


Pwm_ValidateParamDuty (uint16 DutyCycle, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6532;
  Std_ReturnType _9;

  <bb 2> :
  RetVal_3 = 0;
  if (DutyCycle_4(D) > 32768)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId_6(D), 50);
  RetVal_8 = 1;

  <bb 4> :
  # RetVal_1 = PHI <RetVal_3(2), RetVal_8(3)>
  _9 = RetVal_1;

  <bb 5> :
<L2>:
  return _9;

}


Pwm_ValidateParamPtrInit (uint32 CoreId, const struct Pwm_ConfigType * ConfigPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6489;
  Std_ReturnType _8;

  <bb 2> :
  RetVal_3 = 0;
  if (ConfigPtr_4(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, 0, 16);
  RetVal_7 = 1;

  <bb 4> :
  # RetVal_1 = PHI <RetVal_3(2), RetVal_7(3)>
  _8 = RetVal_1;

  <bb 5> :
<L3>:
  return _8;

}


Pwm_EndValidateChannelConfigCall (Pwm_ChannelType ChannelNumber)
{
  <bb 2> :
  return;

}


Pwm_ValidateChannelConfigCall (uint32 CoreId, Pwm_ChannelType ChannelNumber, uint8 ServiceId)
{
  Pwm_ChannelType PartitionChannelIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.6526;
  <unnamed type> _1;
  const struct Pwm_ConfigType * _2;
  unsigned char _3;
  const struct Pwm_ChannelConfigType * _4;
  unsigned int _5;
  unsigned int _6;
  const struct Pwm_ChannelConfigType * _7;
  const struct Pwm_IpwChannelConfigType * _8;
  unsigned char _9;
  const struct Pwm_ChannelConfigType * _10;
  unsigned int _11;
  unsigned int _12;
  const struct Pwm_ChannelConfigType * _13;
  const struct Pwm_IpwChannelConfigType * _14;
  unsigned char _15;
  Std_ReturnType _39;

  <bb 2> :
  RetVal_20 = 0;
  _1 = Pwm_aState[CoreId_22(D)].PwmDriverState;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_37 = 1;
  Det_ReportError (121, 0, ServiceId_26(D), 17);
  goto <bb 19>; [INV]

  <bb 4> :
  if (ChannelNumber_23(D) > 12)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  RetVal_35 = 1;
  Det_ReportError (121, 0, ServiceId_26(D), 18);
  goto <bb 19>; [INV]

  <bb 6> :
  PartitionChannelIdx_25 = Pwm_GetPartitionChannelIdx (CoreId_22(D), ChannelNumber_23(D));
  _2 = Pwm_aState[CoreId_22(D)].PwmConfig;
  _3 = _2->NumChannels;
  if (PartitionChannelIdx_25 >= _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  RetVal_33 = 1;
  Det_ReportError (121, 0, ServiceId_26(D), 64);
  goto <bb 19>; [INV]

  <bb 8> :
  if (ServiceId_26(D) == 44)
    goto <bb 11>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (ServiceId_26(D) == 45)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (ServiceId_26(D) == 55)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _4 = Pwm_aState[CoreId_22(D)].PwmChannelConfigs[0];
  _5 = (unsigned int) PartitionChannelIdx_25;
  _6 = _5 * 24;
  _7 = _4 + _6;
  _8 = &_7->IpwChannelCfg;
  _9 = Pwm_Ipw_ValidateSetPhaseShift (_8);
  if (_9 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  RetVal_28 = 1;
  Det_ReportError (121, 0, ServiceId_26(D), 59);

  <bb 13> :
  # RetVal_16 = PHI <RetVal_20(10), RetVal_20(11), RetVal_28(12)>
  if (ServiceId_26(D) == 41)
    goto <bb 17>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  if (ServiceId_26(D) == 42)
    goto <bb 17>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (ServiceId_26(D) == 45)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  if (ServiceId_26(D) == 40)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _10 = Pwm_aState[CoreId_22(D)].PwmChannelConfigs[0];
  _11 = (unsigned int) PartitionChannelIdx_25;
  _12 = _11 * 24;
  _13 = _10 + _12;
  _14 = &_13->IpwChannelCfg;
  _15 = Pwm_Ipw_ValidateUpdateSynchronous (_14);
  if (_15 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  RetVal_31 = 1;
  Det_ReportError (121, 0, ServiceId_26(D), 60);

  <bb 19> :
  # RetVal_17 = PHI <RetVal_37(3), RetVal_35(5), RetVal_33(7), RetVal_16(16), RetVal_16(17), RetVal_31(18)>
  _39 = RetVal_17;

  <bb 20> :
<L22>:
  return _39;

}


Pwm_EndValidateGlobalConfigCall (uint32 CoreId, Std_ReturnType ValidCall, uint8 ServiceId)
{
  <bb 2> :
  if (ValidCall_2(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (ServiceId_4(D) == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Pwm_aState[CoreId_5(D)].PwmDriverState = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  Pwm_aState[CoreId_5(D)].PwmDriverState = 1;

  <bb 6> :
  return;

}


Pwm_ValidateGlobalConfigCall (uint32 CoreId, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6480;
  <unnamed type> _1;
  Std_ReturnType _12;

  <bb 2> :
  RetVal_4 = 0;
  _1 = Pwm_aState[CoreId_6(D)].PwmDriverState;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (ServiceId_7(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Det_ReportError (121, 0, ServiceId_7(D), 17);
  RetVal_11 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  if (ServiceId_7(D) == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportError (121, 0, ServiceId_7(D), 20);
  RetVal_9 = 1;

  <bb 7> :
  # RetVal_2 = PHI <RetVal_11(4), RetVal_4(5), RetVal_9(6), RetVal_4(3)>
  _12 = RetVal_2;

  <bb 8> :
<L7>:
  return _12;

}


Pwm_GetPartitionChannelIdx (uint32 CoreId, Pwm_ChannelType ChannelNumber)
{
  uint8 D.6528;
  uint8 _2;

  <bb 2> :
  _2 = ChannelNumber_1(D);

  <bb 3> :
<L0>:
  return _2;

}


