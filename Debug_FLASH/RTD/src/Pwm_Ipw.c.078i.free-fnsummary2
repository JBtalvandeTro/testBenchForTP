Pwm_Ipw_GetMaxPeriodValue (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint32 RetVal;
  uint32 D.6280;
  <unnamed type> _1;
  uint32 _7;

  <bb 2> :
  RetVal_3 = 65535;
  _1 = IpConfig_5(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal_6 = 65534;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  # RetVal_2 = PHI <RetVal_6(3), RetVal_3(4)>
  _7 = RetVal_2;

  <bb 6> :
<L4>:
  return _7;

}


Pwm_Ipw_ValidateModuleId (uint8 ModuleId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6278;
  Std_ReturnType _6;

  <bb 2> :
  RetVal_2 = 0;
  if (ModuleId_3(D) > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_5 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  RetVal_4 = 0;

  <bb 5> :
  # RetVal_1 = PHI <RetVal_5(3), RetVal_4(4)>
  _6 = RetVal_1;

  <bb 6> :
<L3>:
  return _6;

}


Pwm_Ipw_ValidateUpdateSynchronous (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6273;
  <unnamed type> _1;
  Std_ReturnType _8;

  <bb 2> :
  RetVal_3 = 0;
  _1 = IpConfig_5(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal_6 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  RetVal_7 = 1;

  <bb 5> :
  # RetVal_2 = PHI <RetVal_6(3), RetVal_7(4)>
  _8 = RetVal_2;

  <bb 6> :
<L4>:
  return _8;

}


Pwm_Ipw_ValidateSetDutyPhaseShiftParams (uint16 PhaseShift, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6271;
  unsigned char _1;
  int _2;
  short unsigned int _3;
  Std_ReturnType _11;

  <bb 2> :
  RetVal_5 = 0;
  if (DutyCycle_6(D) != 32768)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (DutyCycle_6(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _1 = IpConfig_8(D)->ChannelInstanceId;
  _2 = (int) _1;
  _3 = Ftm_Pwm_Ip_aPeriod[_2];
  if (PhaseShift_9(D) >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  RetVal_10 = 1;

  <bb 6> :
  # RetVal_4 = PHI <RetVal_5(2), RetVal_5(3), RetVal_5(4), RetVal_10(5)>
  _11 = RetVal_4;

  <bb 7> :
<L6>:
  return _11;

}


Pwm_Ipw_ValidateSetPhaseShiftParams (uint16 PhaseShift)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6263;
  Std_ReturnType _5;

  <bb 2> :
  RetVal_2 = 0;
  if (PhaseShift_3(D) > 16384)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_4 = 1;

  <bb 4> :
  # RetVal_1 = PHI <RetVal_2(2), RetVal_4(3)>
  _5 = RetVal_1;

  <bb 5> :
<L2>:
  return _5;

}


Pwm_Ipw_ValidateSetPhaseShift (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Pwm_Ip_ChannelModeType ChMode;
  Std_ReturnType RetVal;
  Std_ReturnType D.6259;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  Std_ReturnType _11;

  <bb 2> :
  RetVal_5 = 0;
  _1 = IpConfig_7(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
<L0>:
  _2 = IpConfig_7(D)->FtmChConfig;
  ChMode_8 = _2->ChannelMode;
  if (ChMode_8 != 34)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (ChMode_8 != 98)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  if (ChMode_8 != 97)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (ChMode_8 != 33)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  RetVal_9 = 1;

  <bb 8> :
  # RetVal_3 = PHI <RetVal_5(3), RetVal_5(4), RetVal_5(5), RetVal_5(6), RetVal_9(7)>
  goto <bb 10>; [INV]

  <bb 9> :
<L9>:
  RetVal_10 = 1;

  <bb 10> :
  # RetVal_4 = PHI <RetVal_3(8), RetVal_10(9)>
  _11 = RetVal_4;

  <bb 11> :
<L12>:
  return _11;

}


Pwm_Ipw_SyncUpdate (uint8 ModuleId)
{
  <bb 2> :
  Ftm_Pwm_Ip_SyncUpdate (ModuleId_2(D));
  return;

}


Pwm_Ipw_SetDutyPhaseShift (uint16 DutyCycle, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig, boolean SyncUpdate)
{
  uint16 FtmDutyCycle;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _14;
  unsigned char _15;
  int _16;

  <bb 2> :
  FtmDutyCycle_18 = 0;
  _1 = IpConfig_20(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = IpConfig_20(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = Ftm_Pwm_Ip_aPeriod[_3];
  _5 = (long unsigned int) _4;
  _6 = (long unsigned int) DutyCycle_21(D);
  _7 = _5 * _6;
  _8 = _7 / 32768;
  FtmDutyCycle_22 = (uint16) _8;
  _9 = IpConfig_20(D)->ChannelInstanceId;
  _10 = IpConfig_20(D)->FtmChConfig;
  _11 = _10->ChannelId;
  Ftm_Pwm_Ip_SetDutyPhaseShift (_9, _11, FtmDutyCycle_22, PhaseShift_23(D), SyncUpdate_24(D));
  _12 = IpConfig_20(D)->ChannelInstanceId;
  _13 = (int) _12;
  _14 = IpConfig_20(D)->FtmChConfig;
  _15 = _14->ChannelId;
  _16 = (int) _15;
  Pwm_Ipw_aFtmDutyCycle[_13][_16] = DutyCycle_21(D);

  <bb 4> :
  return;

}


Pwm_Ipw_SetPhaseShift (uint16 Period, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 PhaseShiftVal;
  <unnamed type> _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  short unsigned int _6;
  unsigned char _7;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _8;
  unsigned char _9;

  <bb 2> :
  PhaseShiftVal_11 = 0;
  _1 = IpConfig_13(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) Period_14(D);
  _3 = (long unsigned int) PhaseShift_15(D);
  _4 = _2 * _3;
  _5 = _4 >> 15;
  _6 = (short unsigned int) _5;
  PhaseShiftVal_16 = _6 + 1;
  _7 = IpConfig_13(D)->ChannelInstanceId;
  _8 = IpConfig_13(D)->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_SetPhaseShift (_7, _9, Period_14(D), PhaseShiftVal_16, 1);

  <bb 4> :
  return;

}


Pwm_Ipw_UnMaskOutputs (uint8 ModuleId, uint8 ChannelMask, const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  unsigned char _1;
  long unsigned int _2;

  <bb 2> :
  _1 = IpConfig_5(D)->InstanceId;
  if (ModuleId_6(D) == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) ChannelMask_7(D);
  Ftm_Pwm_Ip_UnMaskOutputChannels (ModuleId_6(D), _2, 1);

  <bb 4> :
  return;

}


Pwm_Ipw_MaskOutputs (uint8 ModuleId, uint8 ChannelMask, const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  unsigned char _1;
  long unsigned int _2;

  <bb 2> :
  _1 = IpConfig_5(D)->InstanceId;
  if (ModuleId_6(D) == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) ChannelMask_7(D);
  Ftm_Pwm_Ip_MaskOutputChannels (ModuleId_6(D), _2, 1);

  <bb 4> :
  return;

}


Pwm_Ipw_GetChannelState (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 DutyCycle;
  uint16 D.6237;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;
  int _6;
  uint16 _12;

  <bb 2> :
  DutyCycle_8 = 0;
  _1 = IpConfig_10(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = IpConfig_10(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig_10(D)->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  DutyCycle_11 = Pwm_Ipw_aFtmDutyCycle[_3][_6];
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  # DutyCycle_7 = PHI <DutyCycle_11(3), DutyCycle_8(4)>
  _12 = DutyCycle_7;

  <bb 6> :
<L4>:
  return _12;

}


Pwm_Ipw_SetPeriodAndDuty (Pwm_PeriodType Period, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _8;
  unsigned char _9;
  unsigned char _10;
  int _11;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _12;
  unsigned char _13;
  int _14;

  <bb 2> :
  FtmDutyCycle_17 = 0;
  _1 = IpConfig_19(D)->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_19(D)->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = (long unsigned int) Period_20(D);
  _4 = (long unsigned int) DutyCycle_21(D);
  _5 = _3 * _4;
  _6 = _5 / 32768;
  FtmDutyCycle_22 = (uint16) _6;
  _7 = IpConfig_19(D)->ChannelInstanceId;
  _8 = IpConfig_19(D)->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (_7, _9, Period_20(D), FtmDutyCycle_22, 1);
  _10 = IpConfig_19(D)->ChannelInstanceId;
  _11 = (int) _10;
  _12 = IpConfig_19(D)->FtmChConfig;
  _13 = _12->ChannelId;
  _14 = (int) _13;
  Pwm_Ipw_aFtmDutyCycle[_11][_14] = DutyCycle_21(D);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_SetDutyCycle (uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  Std_ReturnType RetVal;
  Std_ReturnType D.6233;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  unsigned char _3;
  int _4;
  short unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _11;
  unsigned char _12;
  unsigned char _13;
  int _14;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _15;
  unsigned char _16;
  int _17;
  Std_ReturnType _28;

  <bb 2> :
  RetVal_20 = 0;
  FtmDutyCycle_21 = 0;
  _1 = IpConfig_23(D)->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_23(D)->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig_23(D)->ChannelInstanceId;
  _4 = (int) _3;
  _5 = Ftm_Pwm_Ip_aPeriod[_4];
  _6 = (long unsigned int) _5;
  _7 = (long unsigned int) DutyCycle_24(D);
  _8 = _6 * _7;
  _9 = _8 / 32768;
  FtmDutyCycle_25 = (uint16) _9;
  _10 = IpConfig_23(D)->ChannelInstanceId;
  _11 = IpConfig_23(D)->FtmChConfig;
  _12 = _11->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (_10, _12, FtmDutyCycle_25, 1);
  _13 = IpConfig_23(D)->ChannelInstanceId;
  _14 = (int) _13;
  _15 = IpConfig_23(D)->FtmChConfig;
  _16 = _15->ChannelId;
  _17 = (int) _16;
  Pwm_Ipw_aFtmDutyCycle[_14][_17] = DutyCycle_24(D);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  _28 = RetVal_20;

  <bb 9> :
<L6>:
  return _28;

}


Pwm_Ipw_DeInitInstance (const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_UserCfgType * _2;
  unsigned char _3;

  <bb 2> :
  _1 = IpConfig_7(D)->InstanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_7(D)->FtmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig_7(D)->InstanceId;
  Ftm_Pwm_Ip_DeInit (_3);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_DeInit (const struct Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;
  int _6;

  <bb 2> :
  _1 = IpConfig_9(D)->ChannelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_9(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig_9(D)->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = 0;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


Pwm_Ipw_InitInstance (const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_UserCfgType * _2;
  unsigned char _3;
  const struct Ftm_Pwm_Ip_UserCfgType * _4;

  <bb 2> :
  _1 = IpConfig_8(D)->InstanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_8(D)->FtmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig_8(D)->InstanceId;
  _4 = IpConfig_8(D)->FtmInsConfig;
  Ftm_Pwm_Ip_Init (_3, _4);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_Init (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;
  int _6;
  short unsigned int _7;

  <bb 2> :
  _1 = IpConfig_10(D)->ChannelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_10(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig_10(D)->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  _7 = IpConfig_10(D)->ChannelDutyCycle;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = _7;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


