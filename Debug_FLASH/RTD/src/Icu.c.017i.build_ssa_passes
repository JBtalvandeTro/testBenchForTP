Icu_LogicChStateCallback (uint16 logicChannel, uint8 mask, boolean set)
{
  <bb 2> :
  if (set != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Icu_SetBitChState (logicChannel, mask);
  goto <bb 5>; [INV]

  <bb 4> :
  Icu_ClearBitChState (logicChannel, mask);

  <bb 5> :
  return;

}


Icu_ReportEvents (uint16 Channel, boolean bOverflow)
{
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  Icu_SetBitChState (Channel, 2);
  Icu_ReportWakeupAndOverflow (Channel, bOverflow);
  Icu_CallNotification (Channel, u32CoreId);
  return;

}


Icu_ReportWakeupAndOverflow (uint16 Channel, boolean bOverflow)
{
  <bb 2> :
  _1 = Icu_GetBitChState (Channel, 1);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  Icu_CurrentMode.2_2 = Icu_CurrentMode;
  if (Icu_CurrentMode.2_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Icu_SetBitChState (Channel, 128);

  <bb 5> :
  if (bOverflow != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Icu_SetBitChState (Channel, 16);

  <bb 7> :
  return;

}


Icu_DisableEdgeDetection (Icu_ChannelType Channel)
{
  uint32 u32CoreId;
  const struct Icu_Ipw_ChannelConfigType * ChannelConfig;
  Icu_ChannelType ChannelIndex;

  <bb 2> :
  u32CoreId = 0;
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  ChannelConfig = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_Ipw_DisableEdgeDetection (ChannelConfig);
  Icu_ClearBitChState (Channel, 8);
  return;

}


Icu_EnableEdgeDetection (Icu_ChannelType Channel)
{
  uint32 u32CoreId;
  const struct Icu_Ipw_ChannelConfigType * ChannelConfig;
  Icu_ChannelType ChannelIndex;

  <bb 2> :
  u32CoreId = 0;
  Icu_SetBitChState (Channel, 8);
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  ChannelConfig = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_Ipw_EnableEdgeDetection (ChannelConfig);
  return;

}


Icu_GetEdgeNumbers (Icu_ChannelType Channel)
{
  Icu_EdgeNumberType edgeNumbers;
  uint32 u32CoreId;
  const struct Icu_Ipw_ChannelConfigType * ChannelConfig;
  Icu_ChannelType ChannelIndex;
  Icu_EdgeNumberType D.7316;

  <bb 2> :
  u32CoreId = 0;
  edgeNumbers = 0;
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  ChannelConfig = *_6[_7].Icu_IpwChannelConfigPtr;
  edgeNumbers = Icu_Ipw_GetEdgeNumbers (ChannelConfig);
  D.7316 = edgeNumbers;

  <bb 3> :
<L0>:
  return D.7316;

}


Icu_DisableEdgeCount (Icu_ChannelType Channel)
{
  uint32 u32CoreId;
  const struct Icu_Ipw_ChannelConfigType * ChannelConfig;
  Icu_ChannelType ChannelIndex;

  <bb 2> :
  u32CoreId = 0;
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  ChannelConfig = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_Ipw_DisableEdgeCount (ChannelConfig);
  Icu_ClearBitChState (Channel, 8);
  return;

}


Icu_EnableEdgeCount (Icu_ChannelType Channel)
{
  uint32 u32CoreId;
  const struct Icu_Ipw_ChannelConfigType * ChannelConfig;
  Icu_ChannelType ChannelIndex;

  <bb 2> :
  u32CoreId = 0;
  Icu_ClearBitChState (Channel, 16);
  Icu_SetBitChState (Channel, 8);
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  ChannelConfig = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_Ipw_EnableEdgeCount (ChannelConfig);
  return;

}


Icu_ResetEdgeCount (Icu_ChannelType Channel)
{
  uint32 u32CoreId;
  const struct Icu_Ipw_ChannelConfigType * ChannelConfig;
  Icu_ChannelType ChannelIndex;

  <bb 2> :
  u32CoreId = 0;
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  ChannelConfig = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_ClearBitChState (Channel, 16);
  Icu_Ipw_ResetEdgeCount (ChannelConfig);
  return;

}


Icu_EnableNotification (Icu_ChannelType Channel)
{
  Icu_ChannelType ChannelIndex;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  Icu_SetBitChState (Channel, 4);
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  _8 = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_Ipw_EnableNotification (_8);
  return;

}


Icu_DisableNotification (Icu_ChannelType Channel)
{
  Icu_ChannelType ChannelIndex;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  Icu_ClearBitChState (Channel, 4);
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  _8 = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_Ipw_DisableNotification (_8);
  return;

}


Icu_SetActivationCondition (Icu_ChannelType Channel, Icu_ActivationType Activation)
{
  uint32 u32CoreId;
  Icu_ChannelType ChannelIndex;

  <bb 2> :
  u32CoreId = 0;
  Icu_ClearBitChState (Channel, 2);
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_pCfgPtr[u32CoreId];
  _6 = _5->Icu_ChannelConfigPtr;
  _7 = (int) ChannelIndex;
  _8 = *_6[_7].Icu_IpwChannelConfigPtr;
  Icu_Ipw_SetActivationCondition (Activation, _8);
  return;

}


Icu_Init (const struct Icu_ConfigType * ConfigPtr)
{
  uint32 u32CoreId;
  Icu_ChannelType ChannelIndex;
  Icu_ChannelType Channel;

  <bb 2> :
  u32CoreId = 0;
  Icu_pCfgPtr[u32CoreId] = ConfigPtr;
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->nNumInstances;
  _3 = Icu_pCfgPtr[u32CoreId];
  _4 = _3->Icu_IpConfigPtr;
  Icu_Ipw_Init (_2, _4);
  ChannelIndex = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  Channel = Icu_ConvertChannelIndexToChannel (ChannelIndex, u32CoreId);
  if (Channel <= 5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = (int) Channel;
  Icu_aChannelState[_5] = 0;

  <bb 5> :
  ChannelIndex.0_6 = ChannelIndex;
  ChannelIndex = ChannelIndex.0_6 + 1;

  <bb 6> :
  _7 = Icu_pCfgPtr[u32CoreId];
  _8 = _7->nNumChannels;
  _9 = (short unsigned int) _8;
  if (ChannelIndex < _9)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Icu_CurrentMode = 0;
  return;

}


Icu_ConvertChannelIndexToChannel (Icu_ChannelType ChannelIndex, uint32 u32CoreId)
{
  Icu_ChannelType Channel;
  Icu_ChannelType D.7314;

  <bb 2> :
  Channel = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  _5 = (short unsigned int) _4;
  if (ChannelIndex == _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  Channel.1_6 = Channel;
  Channel = Channel.1_6 + 1;

  <bb 6> :
  if (Channel <= 5)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.7314 = Channel;

  <bb 8> :
<L5>:
  return D.7314;

}


Icu_CallNotification (Icu_ChannelType Channel, uint32 u32CoreId)
{
  Icu_ChannelType ChannelIndex;

  <bb 2> :
  _1 = Icu_pCfgPtr[u32CoreId];
  _2 = _1->Icu_IndexChannelMap;
  _3 = (int) Channel;
  _4 = *_2[_3];
  ChannelIndex = (Icu_ChannelType) _4;
  _5 = Icu_GetBitChState (Channel, 4);
  if (_5 == 4)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _6 = Icu_pCfgPtr[u32CoreId];
  _7 = _6->Icu_ChannelConfigPtr;
  _8 = (int) ChannelIndex;
  _9 = *_7[_8].Icu_ChannelNotification;
  if (_9 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _10 = Icu_pCfgPtr[u32CoreId];
  _11 = _10->Icu_ChannelConfigPtr;
  _12 = (int) ChannelIndex;
  _13 = *_11[_12].Icu_ChannelNotification;
  _13 ();

  <bb 5> :
  return;

}


Icu_ClearBitChState (Icu_ChannelType Channel, Icu_ChannelStateType mask)
{
  <bb 2> :
  SchM_Enter_Icu_ICU_EXCLUSIVE_AREA_01 ();
  _1 = (int) Channel;
  _2 = Icu_aChannelState[_1];
  _3 = ~mask;
  _4 = (int) Channel;
  _5 = _2 & _3;
  Icu_aChannelState[_4] = _5;
  SchM_Exit_Icu_ICU_EXCLUSIVE_AREA_01 ();
  return;

}


Icu_GetBitChState (Icu_ChannelType Channel, Icu_ChannelStateType mask)
{
  Icu_ChannelStateType D.7324;

  <bb 2> :
  _1 = (int) Channel;
  _2 = Icu_aChannelState[_1];
  D.7324 = mask & _2;

  <bb 3> :
<L0>:
  return D.7324;

}


Icu_SetBitChState (Icu_ChannelType Channel, Icu_ChannelStateType mask)
{
  <bb 2> :
  SchM_Enter_Icu_ICU_EXCLUSIVE_AREA_00 ();
  _1 = (int) Channel;
  _2 = Icu_aChannelState[_1];
  _3 = (int) Channel;
  _4 = mask | _2;
  Icu_aChannelState[_3] = _4;
  SchM_Exit_Icu_ICU_EXCLUSIVE_AREA_00 ();
  return;

}


