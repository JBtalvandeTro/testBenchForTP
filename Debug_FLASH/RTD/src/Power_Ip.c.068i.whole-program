
Marking local functions:


Marking externally visible functions: Power_Ip_InstallNotificationsCallback Power_Ip_EnableSleepOnExit Power_Ip_DisableSleepOnExit Power_Ip_Init Power_Ip_GetResetRawValue Power_Ip_GetResetReason Power_Ip_PerformReset Power_Ip_SetMode


Marking externally visible variables: Power_Ip_pfReportErrorsCallback


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Power_Ip_CM4_EnableSleepOnExit/26 (Power_Ip_CM4_EnableSleepOnExit) @05e982a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_EnableSleepOnExit/9 
  Calls: 
Power_Ip_CM4_DisableSleepOnExit/25 (Power_Ip_CM4_DisableSleepOnExit) @05e980e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_DisableSleepOnExit/8 
  Calls: 
Power_Ip_SMC_AllowedModesConfig/24 (Power_Ip_SMC_AllowedModesConfig) @05e92ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_Init/7 
  Calls: 
Power_Ip_PMC_PowerInit/23 (Power_Ip_PMC_PowerInit) @05e92e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_Init/7 
  Calls: 
Power_Ip_RCM_ResetInit/22 (Power_Ip_RCM_ResetInit) @05e92d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_Init/7 
  Calls: 
Power_Ip_RCM_GetResetRawValue/21 (Power_Ip_RCM_GetResetRawValue) @05e92b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_GetResetRawValue/6 
  Calls: 
Power_Ip_RCM_GetResetReason/20 (Power_Ip_RCM_GetResetReason) @05e929a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_GetResetReason/5 
  Calls: 
ResetReasonArray.6078/19 (ResetReasonArray) @05e93870
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Power_Ip_ConvertIntergeToResetType/4 (read)Power_Ip_ConvertIntergeToResetType/4 (read)Power_Ip_ConvertIntergeToResetType/4 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Power_Ip_CM4_SystemReset/18 (Power_Ip_CM4_SystemReset) @05e92700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_PerformReset/3 
  Calls: 
Power_Ip_ReportPowerErrors/17 (Power_Ip_ReportPowerErrors) @05e92540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SetMode/2 
  Calls: 
Power_Ip_CM4_DisableDeepSleep/16 (Power_Ip_CM4_DisableDeepSleep) @05e92460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SetMode/2 
  Calls: 
Power_Ip_SMC_ModeConfig/15 (Power_Ip_SMC_ModeConfig) @05e92380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SetMode/2 
  Calls: 
Power_Ip_SMC_ModeCheckEntry/14 (Power_Ip_SMC_ModeCheckEntry) @05e922a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SetMode/2 
  Calls: 
Power_Ip_CM4_EnableDeepSleep/13 (Power_Ip_CM4_EnableDeepSleep) @05e920e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_PrepareLowPowerMode/1 Power_Ip_PrepareLowPowerMode/1 
  Calls: 
Clock_Ip_PowerModeChangeNotification/12 (Clock_Ip_PowerModeChangeNotification) @05e92000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_PrepareLowPowerMode/1 
  Calls: 
Power_Ip_ReportPowerErrorsEmptyCallback/11 (Power_Ip_ReportPowerErrorsEmptyCallback) @05c1b2a0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Power_Ip_pfReportErrorsCallback/0 (addr)
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
Power_Ip_InstallNotificationsCallback/10 (Power_Ip_InstallNotificationsCallback) @05c1bee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Power_Ip_pfReportErrorsCallback/0 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Power_Ip_EnableSleepOnExit/9 (Power_Ip_EnableSleepOnExit) @05c1bc40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_CM4_EnableSleepOnExit/26 
Power_Ip_DisableSleepOnExit/8 (Power_Ip_DisableSleepOnExit) @05c1b9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_CM4_DisableSleepOnExit/25 
Power_Ip_Init/7 (Power_Ip_Init) @05c1b700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_SMC_AllowedModesConfig/24 Power_Ip_PMC_PowerInit/23 Power_Ip_RCM_ResetInit/22 
Power_Ip_GetResetRawValue/6 (Power_Ip_GetResetRawValue) @05c1b460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_RCM_GetResetRawValue/21 
Power_Ip_GetResetReason/5 (Power_Ip_GetResetReason) @05c1b1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_ConvertIntergeToResetType/4 Power_Ip_RCM_GetResetReason/20 
Power_Ip_ConvertIntergeToResetType/4 (Power_Ip_ConvertIntergeToResetType) @05c15d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: ResetReasonArray.6078/19 (read)ResetReasonArray.6078/19 (read)ResetReasonArray.6078/19 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Power_Ip_GetResetReason/5 
  Calls: 
Power_Ip_PerformReset/3 (Power_Ip_PerformReset) @05c15ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_CM4_SystemReset/18 
Power_Ip_SetMode/2 (Power_Ip_SetMode) @05c15c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_ReportPowerErrors/17 Power_Ip_CM4_DisableDeepSleep/16 Power_Ip_SMC_ModeConfig/15 Power_Ip_PrepareLowPowerMode/1 Power_Ip_SMC_ModeCheckEntry/14 
Power_Ip_PrepareLowPowerMode/1 (Power_Ip_PrepareLowPowerMode) @05c159a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Power_Ip_SetMode/2 
  Calls: Power_Ip_CM4_EnableDeepSleep/13 Power_Ip_CM4_EnableDeepSleep/13 Clock_Ip_PowerModeChangeNotification/12 
Power_Ip_pfReportErrorsCallback/0 (Power_Ip_pfReportErrorsCallback) @05c132d0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Power_Ip_ReportPowerErrorsEmptyCallback/11 (addr)
  Referring: Power_Ip_InstallNotificationsCallback/10 (write)
  Availability: available
  Varpool flags: initialized
Power_Ip_InstallNotificationsCallback (void (*Power_Ip_ReportErrorsCallbackType) (Power_Ip_ReportErrorType, uint8) ReportErrorsCallback)
{
  <bb 2> :
  Power_Ip_pfReportErrorsCallback = ReportErrorsCallback_2(D);
  return;

}


Power_Ip_EnableSleepOnExit ()
{
  <bb 2> :
  Power_Ip_CM4_EnableSleepOnExit ();
  return;

}


Power_Ip_DisableSleepOnExit ()
{
  <bb 2> :
  Power_Ip_CM4_DisableSleepOnExit ();
  return;

}


Power_Ip_Init (const struct Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
  const struct Power_Ip_RCM_ConfigType * _1;
  const struct Power_Ip_PMC_ConfigType * _2;
  const struct Power_Ip_SMC_ConfigType * _3;

  <bb 2> :
  _1 = HwIPsConfigPtr_5(D)->RCMConfigPtr;
  Power_Ip_RCM_ResetInit (_1);
  _2 = HwIPsConfigPtr_5(D)->PMCConfigPtr;
  Power_Ip_PMC_PowerInit (_2);
  _3 = HwIPsConfigPtr_5(D)->SMCConfigPtr;
  Power_Ip_SMC_AllowedModesConfig (_3);
  return;

}


Power_Ip_GetResetRawValue ()
{
  Power_Ip_RawResetType ResetReason;
  Power_Ip_RawResetType D.6130;
  Power_Ip_RawResetType _4;

  <bb 2> :
  ResetReason_3 = Power_Ip_RCM_GetResetRawValue ();
  _4 = ResetReason_3;

  <bb 3> :
<L0>:
  return _4;

}


Power_Ip_GetResetReason ()
{
  uint32 ResetVal;
  Power_Ip_ResetType ResetReason;
  Power_Ip_ResetType D.6128;
  Power_Ip_ResetType _7;

  <bb 2> :
  ResetReason_1 = 14;
  ResetVal_4 = Power_Ip_RCM_GetResetReason ();
  ResetReason_6 = Power_Ip_ConvertIntergeToResetType (ResetVal_4);
  _7 = ResetReason_6;

  <bb 3> :
<L0>:
  return _7;

}


Power_Ip_ConvertIntergeToResetType (uint32 ResetReasonIndex)
{
  static const Power_Ip_ResetType ResetReasonArray[15] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
  Power_Ip_ResetType ResetReason;
  Power_Ip_ResetType D.6126;
  <unnamed type> _1;
  <unnamed type> _2;
  Power_Ip_ResetType _9;

  <bb 2> :
  ResetReason_4 = 12;
  _1 = ResetReasonArray[ResetReasonIndex_6(D)];
  if (_1 <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = ResetReasonArray[ResetReasonIndex_6(D)];
  if (_2 != 33)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ResetReason_7 = ResetReasonArray[ResetReasonIndex_6(D)];
  goto <bb 6>; [INV]

  <bb 5> :
  ResetReason_8 = 12;

  <bb 6> :
  # ResetReason_3 = PHI <ResetReason_7(4), ResetReason_8(5)>
  _9 = ResetReason_3;

  <bb 7> :
<L4>:
  return _9;

}


Power_Ip_PerformReset (const struct Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
  <bb 2> :
  Power_Ip_CM4_SystemReset ();
  return;

}


Power_Ip_SetMode (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  Power_Ip_PowerModeType PowerMode;
  uint32 PowerSwitchMode;
  <unnamed type> _1;

  <bb 2> :
  PowerMode_7 = ModeConfigPtr_6(D)->PowerMode;
  _1 = Power_Ip_SMC_ModeCheckEntry (PowerMode_7);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PowerSwitchMode_13 = 1;
  goto <bb 8>; [INV]

  <bb 4> :
  Power_Ip_PrepareLowPowerMode (PowerMode_7);
  PowerSwitchMode_11 = Power_Ip_SMC_ModeConfig (ModeConfigPtr_6(D));
  if (PowerMode_7 == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (PowerMode_7 == 4)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (PowerMode_7 == 5)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Power_Ip_CM4_DisableDeepSleep ();

  <bb 8> :
  # PowerSwitchMode_2 = PHI <PowerSwitchMode_13(3), PowerSwitchMode_11(6), PowerSwitchMode_11(7)>
  if (PowerSwitchMode_2 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Power_Ip_ReportPowerErrors (3, 255);

  <bb 10> :
  return;

}


Power_Ip_PrepareLowPowerMode (Power_Ip_PowerModeType PowerMode)
{
  <bb 2> :
  if (PowerMode_3(D) == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (PowerMode_3(D) == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  Clock_Ip_PowerModeChangeNotification (1, 0);
  if (PowerMode_3(D) == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Power_Ip_CM4_EnableDeepSleep ();

  <bb 6> :
  if (PowerMode_3(D) == 4)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (PowerMode_3(D) == 5)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Power_Ip_CM4_EnableDeepSleep ();

  <bb 9> :
  return;

}


