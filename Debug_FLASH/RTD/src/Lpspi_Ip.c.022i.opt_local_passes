Lpspi_Ip_GetStatus (uint8 Instance)
{
  Lpspi_Ip_HwStatusType Status;
  const struct Lpspi_Ip_StateStructureType * State;
  Lpspi_Ip_HwStatusType D.6707;
  int _1;
  Lpspi_Ip_HwStatusType _8;

  <bb 2> :
  Status_3 = 0;
  _1 = (int) Instance_4(D);
  State_6 = Lpspi_Ip_apxStateStructureArray[_1];
  if (State_6 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Status_7 = State_6->Status;

  <bb 4> :
  # Status_2 = PHI <Status_3(2), Status_7(3)>
  _8 = Status_2;

  <bb 5> :
<L2>:
  return _8;

}


Lpspi_Ip_IrqHandler (uint8 Instance)
{
  uint32 IrqFlags;
  const struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  long unsigned int D.6700;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _17;

  <bb 2> :
  _1 = (int) Instance_10(D);
  Base_12 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_10(D);
  State_13 = Lpspi_Ip_apxStateStructureArray[_2];
  IrqFlags_14 = 0;
  if (State_13 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _3 ={v} Base_12->SR;
  IrqFlags_16 = _3 & 6147;
  _4 ={v} Base_12->IER;
  _17 = _4 & 6147;
  IrqFlags_18 = _17 & IrqFlags_16;
  if (IrqFlags_18 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Lpspi_Ip_TransferProcess (Instance_10(D));
  goto <bb 7>; [INV]

  <bb 5> :
  _5 ={v} Base_12->SR;
  _6 = _5 & 16128;
  Base_12->SR ={v} _6;
  goto <bb 7>; [INV]

  <bb 6> :
  _7 ={v} Base_12->SR;
  _8 = _7 & 16128;
  Base_12->SR ={v} _8;

  <bb 7> :
  return;

}


Lpspi_Ip_Cancel (uint8 Instance)
{
  uint32 Cfgr1;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  const struct Lpspi_Ip_ConfigType * _10;
  _Bool _11;
  const struct Lpspi_Ip_ConfigType * _12;
  unsigned char _13;
  long unsigned int _14;
  const struct Lpspi_Ip_ConfigType * _15;
  unsigned char _16;
  long unsigned int _17;

  <bb 2> :
  Cfgr1_20 = 0;
  _1 = (int) Instance_21(D);
  Base_23 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_21(D);
  State_24 = Lpspi_Ip_apxStateStructureArray[_2];
  SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10 ();
  _3 = State_24->Status;
  if (_3 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _4 ={v} Base_23->TCR;
  _5 = _4 | 524288;
  Base_23->TCR ={v} _5;
  Cfgr1_27 ={v} Base_23->CFGR1;
  _6 ={v} Base_23->CR;
  _7 = _6 | 2;
  Base_23->CR ={v} _7;
  _8 ={v} Base_23->CR;
  _9 = _8 & 4294967293;
  Base_23->CR ={v} _9;
  Base_23->CFGR1 ={v} Cfgr1_27;
  _10 = State_24->PhyUnitConfig;
  _11 = _10->DmaUsed;
  if (_11 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _12 = State_24->PhyUnitConfig;
  _13 = _12->RxDmaChannel;
  _14 = (long unsigned int) _13;
  Dma_Ip_SetLogicChannelCommand (_14, 1);
  _15 = State_24->PhyUnitConfig;
  _16 = _15->TxDmaChannel;
  _17 = (long unsigned int) _16;
  Dma_Ip_SetLogicChannelCommand (_17, 1);

  <bb 5> :
  State_24->Status = 1;

  <bb 6> :
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10 ();
  return;

}


Lpspi_Ip_UpdateTransferMode (uint8 Instance, Lpspi_Ip_ModeType Mode)
{
  Lpspi_Ip_StatusType Status;
  struct Lpspi_Ip_StateStructureType * State;
  Lpspi_Ip_StatusType D.6692;
  int _1;
  <unnamed type> _2;
  Lpspi_Ip_StatusType _12;

  <bb 2> :
  Status_5 = 0;
  _1 = (int) Instance_6(D);
  State_8 = Lpspi_Ip_apxStateStructureArray[_1];
  _2 = State_8->Status;
  if (_2 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  State_8->TransferMode = Mode_10(D);
  goto <bb 5>; [INV]

  <bb 4> :
  Status_9 = 1;

  <bb 5> :
  # Status_3 = PHI <Status_5(3), Status_9(4)>
  _12 = Status_3;

  <bb 6> :
<L3>:
  return _12;

}


Lpspi_Ip_UpdateDefaultTransmitData (const struct Lpspi_Ip_ExternalDeviceType * ExternalDevice, uint32 DefaultData)
{
  Lpspi_Ip_StatusType Status;
  const struct Lpspi_Ip_StateStructureType * State;
  Lpspi_Ip_StatusType D.6687;
  unsigned char _1;
  int _2;
  <unnamed type> _3;
  struct Lpspi_Ip_DeviceParamsType * _4;
  Lpspi_Ip_StatusType _14;

  <bb 2> :
  Status_7 = 0;
  _1 = ExternalDevice_9(D)->Instance;
  _2 = (int) _1;
  State_10 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_10->Status;
  if (_3 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = ExternalDevice_9(D)->DeviceParams;
  _4->DefaultData = DefaultData_12(D);
  goto <bb 5>; [INV]

  <bb 4> :
  Status_11 = 1;

  <bb 5> :
  # Status_5 = PHI <Status_7(3), Status_11(4)>
  _14 = Status_5;

  <bb 6> :
<L3>:
  return _14;

}


Lpspi_Ip_UpdateLsb (const struct Lpspi_Ip_ExternalDeviceType * ExternalDevice, boolean Lsb)
{
  Lpspi_Ip_StatusType Status;
  const struct Lpspi_Ip_StateStructureType * State;
  Lpspi_Ip_StatusType D.6682;
  unsigned char _1;
  int _2;
  <unnamed type> _3;
  struct Lpspi_Ip_DeviceParamsType * _4;
  Lpspi_Ip_StatusType _14;

  <bb 2> :
  Status_7 = 0;
  _1 = ExternalDevice_9(D)->Instance;
  _2 = (int) _1;
  State_10 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_10->Status;
  if (_3 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = ExternalDevice_9(D)->DeviceParams;
  _4->Lsb = Lsb_12(D);
  goto <bb 5>; [INV]

  <bb 4> :
  Status_11 = 1;

  <bb 5> :
  # Status_5 = PHI <Status_7(3), Status_11(4)>
  _14 = Status_5;

  <bb 6> :
<L3>:
  return _14;

}


Lpspi_Ip_UpdateFrameSize (const struct Lpspi_Ip_ExternalDeviceType * ExternalDevice, uint8 FrameSize)
{
  Lpspi_Ip_StatusType Status;
  const struct Lpspi_Ip_StateStructureType * State;
  Lpspi_Ip_StatusType D.6677;
  unsigned char _1;
  int _2;
  <unnamed type> _3;
  struct Lpspi_Ip_DeviceParamsType * _4;
  Lpspi_Ip_StatusType _14;

  <bb 2> :
  Status_7 = 0;
  _1 = ExternalDevice_9(D)->Instance;
  _2 = (int) _1;
  State_10 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_10->Status;
  if (_3 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = ExternalDevice_9(D)->DeviceParams;
  _4->FrameSize = FrameSize_12(D);
  goto <bb 5>; [INV]

  <bb 4> :
  Status_11 = 1;

  <bb 5> :
  # Status_5 = PHI <Status_7(3), Status_11(4)>
  _14 = Status_5;

  <bb 6> :
<L3>:
  return _14;

}


Lpspi_Ip_ManageBuffers (uint8 Instance)
{
  struct Dma_Ip_LogicChannelStatusType DmaChannelStatus;
  const struct Lpspi_Ip_StateStructureType * State;
  const struct LPSPI_Type * Base;
  int _1;
  int _2;
  <unnamed type> _3;
  const struct Lpspi_Ip_ConfigType * _4;
  _Bool _5;
  _Bool _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;
  const struct Lpspi_Ip_ConfigType * _12;
  unsigned char _13;
  long unsigned int _14;
  _Bool _15;
  const struct Lpspi_Ip_ConfigType * _16;
  unsigned char _17;
  long unsigned int _18;
  const struct Lpspi_Ip_ConfigType * _19;
  unsigned char _20;
  long unsigned int _21;
  _Bool _22;
  const struct Lpspi_Ip_ConfigType * _23;
  unsigned char _24;
  long unsigned int _25;

  <bb 2> :
  _1 = (int) Instance_28(D);
  Base_30 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_28(D);
  State_31 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_31->TransferMode;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _4 = State_31->PhyUnitConfig;
  _5 = _4->DmaUsed;
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 ={v} Base_30->SR;
  _8 = _7 & 2;
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _9 ={v} Base_30->SR;
  _10 = _9 & 1;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  _11 = State_31->CurrentTxFifoSlot;
  if (_11 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  Lpspi_Ip_TransferProcess (Instance_28(D));
  goto <bb 12>; [INV]

  <bb 8> :
  _12 = State_31->PhyUnitConfig;
  _13 = _12->RxDmaChannel;
  _14 = (long unsigned int) _13;
  Dma_Ip_GetLogicChannelStatus (_14, &DmaChannelStatus);
  _15 = DmaChannelStatus.Done;
  if (_15 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _16 = State_31->PhyUnitConfig;
  _17 = _16->RxDmaChannel;
  _18 = (long unsigned int) _17;
  Dma_Ip_SetLogicChannelCommand (_18, 3);
  Lpspi_Ip_IrqRxDmaHandler (Instance_28(D));

  <bb 10> :
  _19 = State_31->PhyUnitConfig;
  _20 = _19->TxDmaChannel;
  _21 = (long unsigned int) _20;
  Dma_Ip_GetLogicChannelStatus (_21, &DmaChannelStatus);
  _22 = DmaChannelStatus.Done;
  if (_22 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _23 = State_31->PhyUnitConfig;
  _24 = _23->TxDmaChannel;
  _25 = (long unsigned int) _24;
  Dma_Ip_SetLogicChannelCommand (_25, 3);
  Lpspi_Ip_IrqTxDmaHandler (Instance_28(D));

  <bb 12> :
  DmaChannelStatus ={v} {CLOBBER};
  return;

}


Lpspi_Ip_AsyncTransmit (const struct Lpspi_Ip_ExternalDeviceType * ExternalDevice, uint8 * TxBuffer, uint8 * RxBuffer, uint16 Length, void (*Lpspi_Ip_CallbackType) (uint8, Lpspi_Ip_EventType) EndCallback)
{
  struct Dma_Ip_LogicChannelTransferListType DmaTcdList[1];
  uint8 Instance;
  Lpspi_Ip_StatusType Status;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  Lpspi_Ip_StatusType D.6658;
  int _1;
  int _2;
  <unnamed type> _3;
  _Bool _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  const struct Lpspi_Ip_ExternalDeviceType * _11;
  struct Lpspi_Ip_DeviceParamsType * _12;
  unsigned char _13;
  const struct Lpspi_Ip_ExternalDeviceType * _14;
  struct Lpspi_Ip_DeviceParamsType * _15;
  _Bool _16;
  const struct Lpspi_Ip_ExternalDeviceType * _17;
  struct Lpspi_Ip_DeviceParamsType * _18;
  unsigned char _19;
  const struct Lpspi_Ip_ConfigType * _20;
  _Bool _21;
  _Bool _22;
  <unnamed type> _23;
  <unnamed type> _24;
  const struct Lpspi_Ip_ConfigType * _25;
  unsigned char _26;
  long unsigned int _27;
  const struct Lpspi_Ip_ConfigType * _28;
  unsigned char _29;
  long unsigned int _30;
  _Bool _31;
  Lpspi_Ip_StatusType _80;

  <bb 2> :
  Status_38 = 0;
  Instance_39 = 0;
  Instance_42 = ExternalDevice_41(D)->Instance;
  _1 = (int) Instance_42;
  State_43 = Lpspi_Ip_apxStateStructureArray[_1];
  _2 = (int) Instance_42;
  Base_44 = Lpspi_Ip_apxBases[_2];
  SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09 ();
  _3 = State_43->Status;
  if (_3 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09 ();
  Status_79 = 1;
  goto <bb 19>; [INV]

  <bb 4> :
  State_43->Status = 2;
  State_43->ExternalDevice = ExternalDevice_41(D);
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09 ();
  State_43->Callback = EndCallback_49(D);
  _4 = State_43->KeepCs;
  State_43->NextTransferConfigAvailable = _4;
  State_43->TxDoneFlag = 0;
  _5 = State_43->FirstCmd;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11 ();
  _6 ={v} Base_44->CR;
  _7 = _6 | 768;
  Base_44->CR ={v} _7;
  _8 ={v} Base_44->SR;
  _9 = _8 & 16128;
  Base_44->SR ={v} _9;
  _10 = ExternalDevice_41(D)->Ccr;
  Base_44->CCR ={v} _10;
  State_43->CurrentTxFifoSlot = 4;
  _11 = State_43->ExternalDevice;
  _12 = _11->DeviceParams;
  _13 = _12->FrameSize;
  _14 = State_43->ExternalDevice;
  _15 = _14->DeviceParams;
  _16 = _15->Lsb;
  Lpspi_TransmitTxInit (Instance_42, TxBuffer_58(D), _13, _16, Length_59(D));
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11 ();

  <bb 6> :
  _17 = State_43->ExternalDevice;
  _18 = _17->DeviceParams;
  _19 = _18->FrameSize;
  Lpspi_TransmitRxInit (Instance_42, RxBuffer_62(D), _19, Length_59(D));
  _20 = State_43->PhyUnitConfig;
  _21 = _20->DmaUsed;
  _22 = ~_21;
  if (_22 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  Base_44->FCR ={v} 3;
  Base_44->DER ={v} 0;
  _23 = State_43->TransferMode;
  switch (_23) <default: <L7> [INV], case 0: <L5> [INV], case 1: <L6> [INV]>

  <bb 8> :
<L5>:
  Base_44->IER ={v} 0;
  goto <bb 11>; [INV]

  <bb 9> :
<L6>:
  Base_44->IER ={v} 6147;
  goto <bb 11>; [INV]

  <bb 10> :
<L7>:

  <bb 11> :
  goto <bb 19>; [INV]

  <bb 12> :
  Base_44->IER ={v} 0;
  DmaTcdList[0].Param = 21;
  _24 = State_43->TransferMode;
  switch (_24) <default: <L12> [INV], case 0: <L10> [INV], case 1: <L11> [INV]>

  <bb 13> :
<L10>:
  DmaTcdList[0].Value = 0;
  goto <bb 16>; [INV]

  <bb 14> :
<L11>:
  DmaTcdList[0].Value = 1;
  goto <bb 16>; [INV]

  <bb 15> :
<L12>:

  <bb 16> :
  Base_44->FCR ={v} 1;
  _25 = State_43->PhyUnitConfig;
  _26 = _25->TxDmaChannel;
  _27 = (long unsigned int) _26;
  Dma_Ip_SetLogicChannelTransferList (_27, &DmaTcdList, 1);
  _28 = State_43->PhyUnitConfig;
  _29 = _28->RxDmaChannel;
  _30 = (long unsigned int) _29;
  Dma_Ip_SetLogicChannelTransferList (_30, &DmaTcdList, 1);
  Lpspi_Ip_RxDmaConfig (Instance_42);
  _31 = State_43->FirstCmd;
  if (_31 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  Lpspi_Ip_TxDmaConfig (Instance_42);

  <bb 18> :
  Base_44->DER ={v} 3;

  <bb 19> :
  # Status_32 = PHI <Status_79(3), Status_38(11), Status_38(18)>
  _80 = Status_32;
  DmaTcdList ={v} {CLOBBER};

  <bb 20> :
<L19>:
  return _80;

}


Lpspi_TransmitRxInit (uint8 Instance, uint8 * RxBuffer, uint8 RxFrameSize, uint16 NumberOfFrames)
{
  struct Lpspi_Ip_StateStructureType * State;
  int _1;
  short unsigned int _2;
  short unsigned int _3;

  <bb 2> :
  _1 = (int) Instance_5(D);
  State_7 = Lpspi_Ip_apxStateStructureArray[_1];
  State_7->RxIndex = 0;
  State_7->RxBuffer = RxBuffer_9(D);
  if (RxFrameSize_11(D) <= 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  State_7->ExpectedFifoReads = NumberOfFrames_12(D);
  goto <bb 7>; [INV]

  <bb 4> :
  if (RxFrameSize_11(D) <= 16)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _2 = NumberOfFrames_12(D) / 2;
  State_7->ExpectedFifoReads = _2;
  goto <bb 7>; [INV]

  <bb 6> :
  _3 = NumberOfFrames_12(D) / 4;
  State_7->ExpectedFifoReads = _3;

  <bb 7> :
  return;

}


Lpspi_TransmitTxInit (uint8 Instance, uint8 * TxBuffer, uint8 TxFrameSize, boolean TxLsb, uint16 NumberOfFrames)
{
  uint8 LsbWriteValue;
  uint32 TransferCommand;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  uint8 iftmp.14;
  int _1;
  int _2;
  const struct Lpspi_Ip_ExternalDeviceType * _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  _Bool _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned char _15;
  unsigned char _16;
  short unsigned int _17;
  short unsigned int _18;
  uint8 iftmp.14_19;
  uint8 iftmp.14_28;
  uint8 iftmp.14_29;

  <bb 2> :
  _1 = (int) Instance_22(D);
  Base_24 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_22(D);
  State_25 = Lpspi_Ip_apxStateStructureArray[_2];
  TransferCommand_26 = 0;
  if (TxLsb_27(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.14_29 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.14_28 = 0;

  <bb 5> :
  # iftmp.14_19 = PHI <iftmp.14_29(3), iftmp.14_28(4)>
  LsbWriteValue_30 = iftmp.14_19;
  State_25->TxFrameSize = TxFrameSize_31(D);
  State_25->TxLsb = TxLsb_27(D);
  _3 = State_25->ExternalDevice;
  _4 = _3->Tcr;
  _5 = (long unsigned int) TxFrameSize_31(D);
  _6 = _5 + 4294967295;
  _7 = _6 & 4095;
  _8 = _4 | _7;
  _9 = (long unsigned int) LsbWriteValue_30;
  _10 = _9 << 23;
  _11 = _10 & 8388608;
  TransferCommand_34 = _8 | _11;
  _12 = State_25->FirstCmd;
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Base_24->TCR ={v} TransferCommand_34;
  goto <bb 10>; [INV]

  <bb 7> :
  _13 = TransferCommand_34 & 2097152;
  if (_13 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _14 = TransferCommand_34 | 1048576;
  Base_24->TCR ={v} _14;
  goto <bb 10>; [INV]

  <bb 9> :
  Base_24->TCR ={v} TransferCommand_34;

  <bb 10> :
  _15 = State_25->CurrentTxFifoSlot;
  _16 = _15 + 255;
  State_25->CurrentTxFifoSlot = _16;
  State_25->TxIndex = 0;
  State_25->TxBuffer = TxBuffer_40(D);
  if (TxFrameSize_31(D) <= 8)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  State_25->ExpectedFifoWrites = NumberOfFrames_42(D);
  goto <bb 15>; [INV]

  <bb 12> :
  if (TxFrameSize_31(D) <= 16)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _17 = NumberOfFrames_42(D) / 2;
  State_25->ExpectedFifoWrites = _17;
  goto <bb 15>; [INV]

  <bb 14> :
  _18 = NumberOfFrames_42(D) / 4;
  State_25->ExpectedFifoWrites = _18;

  <bb 15> :
  return;

}


Lpspi_Ip_SyncTransmit (const struct Lpspi_Ip_ExternalDeviceType * ExternalDevice, uint8 * TxBuffer, uint8 * RxBuffer, uint16 Length, uint32 TimeOut)
{
  boolean TxDoneFlag;
  uint32 Cfgr1;
  uint8 Instance;
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Lpspi_Ip_StatusType Status;
  uint8 NumberOfReads;
  uint8 NumberOfWrites;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  Lpspi_Ip_StatusType D.6623;
  long unsigned int D.6614;
  int _1;
  int _2;
  <unnamed type> _3;
  _Bool _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  const struct Lpspi_Ip_ExternalDeviceType * _13;
  struct Lpspi_Ip_DeviceParamsType * _14;
  unsigned char _15;
  const struct Lpspi_Ip_ExternalDeviceType * _16;
  struct Lpspi_Ip_DeviceParamsType * _17;
  _Bool _18;
  const struct Lpspi_Ip_ExternalDeviceType * _19;
  struct Lpspi_Ip_DeviceParamsType * _20;
  unsigned char _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  unsigned char _25;
  int _26;
  short unsigned int _27;
  int _28;
  short unsigned int _29;
  int _30;
  int _31;
  short unsigned int _32;
  unsigned char _33;
  short unsigned int _34;
  unsigned char _35;
  short unsigned int _36;
  unsigned char _37;
  unsigned char _38;
  unsigned char _39;
  unsigned char _40;
  unsigned char _41;
  _Bool _42;
  short unsigned int _43;
  short unsigned int _44;
  int _45;
  short unsigned int _46;
  int _47;
  short unsigned int _48;
  int _49;
  int _50;
  short unsigned int _51;
  unsigned char _52;
  short unsigned int _53;
  unsigned char _54;
  unsigned char _55;
  unsigned char _56;
  _Bool _57;
  const struct Lpspi_Ip_ExternalDeviceType * _58;
  struct Lpspi_Ip_DeviceParamsType * _59;
  long unsigned int _60;
  uint8 * _61;
  unsigned char _62;
  _Bool _63;
  short unsigned int _64;
  _Bool _65;
  _Bool _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  long unsigned int _70;
  short unsigned int _71;
  short unsigned int _72;
  long unsigned int _143;
  Lpspi_Ip_StatusType _151;

  <bb 2> :
  Status_90 = 0;
  TimeoutTicks_94 = OsIf_MicrosToTicks (TimeOut_92(D), 0);
  CurrentTicks = 0;
  ElapsedTicks_96 = 0;
  Instance_97 = 0;
  Cfgr1_98 = 0;
  TxDoneFlag_99 = 0;
  Instance_101 = ExternalDevice_100(D)->Instance;
  _1 = (int) Instance_101;
  State_102 = Lpspi_Ip_apxStateStructureArray[_1];
  _2 = (int) Instance_101;
  Base_103 = Lpspi_Ip_apxBases[_2];
  SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08 ();
  _3 = State_102->Status;
  if (_3 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08 ();
  Status_150 = 1;
  goto <bb 33>; [INV]

  <bb 4> :
  State_102->Status = 2;
  State_102->ExternalDevice = ExternalDevice_100(D);
  SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08 ();
  Base_103->DER ={v} 0;
  Base_103->IER ={v} 0;
  _4 = State_102->KeepCs;
  State_102->NextTransferConfigAvailable = _4;
  _5 = State_102->FirstCmd;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Cfgr1_111 ={v} Base_103->CFGR1;
  _6 ={v} Base_103->CR;
  _7 = _6 | 2;
  Base_103->CR ={v} _7;
  _8 ={v} Base_103->CR;
  _9 = _8 & 4294967293;
  Base_103->CR ={v} _9;
  Base_103->CFGR1 ={v} Cfgr1_111;
  _10 ={v} Base_103->SR;
  _11 = _10 & 16128;
  Base_103->SR ={v} _11;
  _12 = ExternalDevice_100(D)->Ccr;
  Base_103->CCR ={v} _12;
  State_102->CurrentTxFifoSlot = 4;
  _13 = State_102->ExternalDevice;
  _14 = _13->DeviceParams;
  _15 = _14->FrameSize;
  _16 = State_102->ExternalDevice;
  _17 = _16->DeviceParams;
  _18 = _17->Lsb;
  Lpspi_TransmitTxInit (Instance_101, TxBuffer_118(D), _15, _18, Length_119(D));

  <bb 6> :
  _19 = State_102->ExternalDevice;
  _20 = _19->DeviceParams;
  _21 = _20->FrameSize;
  Lpspi_TransmitRxInit (Instance_101, RxBuffer_121(D), _21, Length_119(D));
  _22 = OsIf_GetCounter (0);
  CurrentTicks = _22;
  goto <bb 26>; [INV]

  <bb 7> :
  _23 ={v} Base_103->FSR;
  _24 = _23 >> 16;
  _25 = (unsigned char) _24;
  NumberOfReads_125 = _25 & 7;
  if (NumberOfReads_125 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  _26 = (int) NumberOfReads_125;
  _27 = State_102->ExpectedFifoReads;
  _28 = (int) _27;
  _29 = State_102->RxIndex;
  _30 = (int) _29;
  _31 = _28 - _30;
  if (_26 > _31)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _32 = State_102->ExpectedFifoReads;
  _33 = (unsigned char) _32;
  _34 = State_102->RxIndex;
  _35 = (unsigned char) _34;
  NumberOfReads_126 = _33 - _35;

  <bb 10> :
  # NumberOfReads_74 = PHI <NumberOfReads_125(8), NumberOfReads_126(9)>
  _36 = State_102->RxIndex;
  if (_36 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _37 = State_102->CurrentTxFifoSlot;
  _38 = _37 + 1;
  State_102->CurrentTxFifoSlot = _38;

  <bb 12> :
  Lpspi_Ip_ReadDataFromFifo (Instance_101, NumberOfReads_74);
  _39 = State_102->CurrentTxFifoSlot;
  _40 = NumberOfReads_74 + _39;
  State_102->CurrentTxFifoSlot = _40;
  ElapsedTicks_130 = 0;

  <bb 13> :
  # ElapsedTicks_78 = PHI <ElapsedTicks_80(7), ElapsedTicks_130(12)>
  _41 = State_102->CurrentTxFifoSlot;
  if (_41 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 14> :
  _42 = ~TxDoneFlag_82;
  if (_42 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 15> :
  _43 = State_102->ExpectedFifoWrites;
  _44 = State_102->TxIndex;
  if (_43 != _44)
    goto <bb 16>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 16> :
  NumberOfWrites_137 = State_102->CurrentTxFifoSlot;
  _45 = (int) NumberOfWrites_137;
  _46 = State_102->ExpectedFifoWrites;
  _47 = (int) _46;
  _48 = State_102->TxIndex;
  _49 = (int) _48;
  _50 = _47 - _49;
  if (_45 > _50)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _51 = State_102->ExpectedFifoWrites;
  _52 = (unsigned char) _51;
  _53 = State_102->TxIndex;
  _54 = (unsigned char) _53;
  NumberOfWrites_138 = _52 - _54;

  <bb 18> :
  # NumberOfWrites_73 = PHI <NumberOfWrites_137(16), NumberOfWrites_138(17)>
  Lpspi_Ip_PushDataToFifo (Instance_101, NumberOfWrites_73);
  _55 = State_102->CurrentTxFifoSlot;
  _56 = _55 - NumberOfWrites_73;
  State_102->CurrentTxFifoSlot = _56;
  ElapsedTicks_141 = 0;
  goto <bb 24>; [INV]

  <bb 19> :
  _57 = State_102->NextTransferConfigAvailable;
  if (_57 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _58 = State_102->ExternalDevice;
  _59 = _58->DeviceParams;
  _60 = State_102->DefaultDataNext;
  _59->DefaultData = _60;
  State_102->FirstCmd = 0;
  _61 = State_102->TxBufferNext;
  _62 = State_102->FrameSizeNext;
  _63 = State_102->LsbNext;
  _64 = State_102->LengthNext;
  Lpspi_TransmitTxInit (Instance_101, _61, _62, _63, _64);
  State_102->NextTransferConfigAvailable = 0;
  goto <bb 24>; [INV]

  <bb 21> :
  TxDoneFlag_131 = 1;
  _65 = State_102->KeepCs;
  _66 = ~_65;
  if (_66 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 22> :
  _67 ={v} Base_103->TCR;
  _68 = _67 & 2097152;
  if (_68 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _69 ={v} Base_103->TCR;
  _70 = _69 & 4291821567;
  Base_103->TCR ={v} _70;

  <bb 24> :
  # ElapsedTicks_79 = PHI <ElapsedTicks_78(13), ElapsedTicks_78(14), ElapsedTicks_141(18), ElapsedTicks_78(20), ElapsedTicks_78(21), ElapsedTicks_78(22), ElapsedTicks_78(23)>
  # TxDoneFlag_81 = PHI <TxDoneFlag_82(13), TxDoneFlag_82(14), TxDoneFlag_82(18), TxDoneFlag_82(20), TxDoneFlag_131(21), TxDoneFlag_131(22), TxDoneFlag_131(23)>
  _143 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_144 = _143 + ElapsedTicks_79;
  if (ElapsedTicks_144 >= TimeoutTicks_94)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Status_145 = 3;
  goto <bb 27>; [INV]

  <bb 26> :
  # ElapsedTicks_80 = PHI <ElapsedTicks_96(6), ElapsedTicks_144(24)>
  # TxDoneFlag_82 = PHI <TxDoneFlag_99(6), TxDoneFlag_81(24)>
  _71 = State_102->RxIndex;
  _72 = State_102->ExpectedFifoReads;
  if (_71 != _72)
    goto <bb 7>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # Status_75 = PHI <Status_145(25), Status_90(26)>
  if (Status_75 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 28> :
  if (Length_119(D) == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 29> :
  if (Length_119(D) == 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  Status_147 = 1;

  <bb 31> :
  # Status_76 = PHI <Status_75(29), Status_147(30)>
  State_102->Status = 3;
  goto <bb 33>; [INV]

  <bb 32> :
  State_102->Status = 1;

  <bb 33> :
  # Status_77 = PHI <Status_150(3), Status_76(31), Status_75(32)>
  _151 = Status_77;
  CurrentTicks ={v} {CLOBBER};

  <bb 34> :
<L39>:
  return _151;

}


Lpspi_Ip_DeInit (uint8 Instance)
{
  Lpspi_Ip_StatusType Status;
  const struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  Lpspi_Ip_StatusType D.6585;
  int _1;
  int _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  Lpspi_Ip_StatusType _18;

  <bb 2> :
  Status_9 = 0;
  _1 = (int) Instance_10(D);
  Base_12 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_10(D);
  State_13 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_13->Status;
  if (_3 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Status_17 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 ={v} Base_12->CR;
  _5 = _4 | 2;
  Base_12->CR ={v} _5;
  Base_12->CR ={v} 0;
  _6 = (int) Instance_10(D);
  Lpspi_Ip_apxStateStructureArray[_6] = 0B;

  <bb 5> :
  # Status_7 = PHI <Status_17(3), Status_9(4)>
  _18 = Status_7;

  <bb 6> :
<L3>:
  return _18;

}


Lpspi_Ip_Init (const struct Lpspi_Ip_ConfigType * PhyUnitConfigPtr)
{
  uint8 Instance;
  Lpspi_Ip_StatusType Status;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  Lpspi_Ip_StatusType D.6580;
  int _1;
  int _2;
  unsigned char _3;
  int _4;
  int _5;
  struct Lpspi_Ip_StateStructureType * _6;
  int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  <unnamed type> _11;
  long unsigned int _12;
  long unsigned int _13;
  Lpspi_Ip_StatusType _32;

  <bb 2> :
  Status_14 = 0;
  Instance_15 = 0;
  Instance_18 = PhyUnitConfigPtr_17(D)->Instance;
  _1 = (int) Instance_18;
  State_19 = Lpspi_Ip_apxStateStructureArray[_1];
  _2 = (int) Instance_18;
  Base_20 = Lpspi_Ip_apxBases[_2];
  _3 = PhyUnitConfigPtr_17(D)->StateIndex;
  _4 = (int) _3;
  _5 = (int) Instance_18;
  _6 = &Lpspi_Ip_axStateStructure[_4];
  Lpspi_Ip_apxStateStructureArray[_5] = _6;
  _7 = (int) Instance_18;
  State_22 = Lpspi_Ip_apxStateStructureArray[_7];
  State_22->PhyUnitConfig = PhyUnitConfigPtr_17(D);
  _8 = PhyUnitConfigPtr_17(D)->Cr;
  _9 = _8 | 8;
  Base_20->CR ={v} _9;
  _10 = PhyUnitConfigPtr_17(D)->Cfgr1;
  Base_20->CFGR1 ={v} _10;
  Base_20->FCR ={v} 3;
  State_22->KeepCs = 0;
  State_22->FirstCmd = 1;
  State_22->Status = 1;
  _11 = PhyUnitConfigPtr_17(D)->TransferMode;
  Lpspi_Ip_UpdateTransferMode (Instance_18, _11);
  _12 ={v} Base_20->CR;
  _13 = _12 | 1;
  Base_20->CR ={v} _13;
  _32 = Status_14;

  <bb 3> :
<L0>:
  return _32;

}


Lpspi_Ip_IrqRxDmaHandler (uint8 Instance)
{
  boolean EndOfTransferFlag;
  boolean ErrorFlag;
  uint32 SrStatusRegister;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  const struct Lpspi_Ip_ConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  void (*<T4ae>) (uint8, Lpspi_Ip_EventType) _12;
  void (*<T4ae>) (uint8, Lpspi_Ip_EventType) _13;
  void (*<T4ae>) (uint8, Lpspi_Ip_EventType) _14;

  <bb 2> :
  _1 = (int) Instance_20(D);
  Base_22 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_20(D);
  State_23 = Lpspi_Ip_apxStateStructureArray[_2];
  SrStatusRegister_24 = 0;
  ErrorFlag_25 = 0;
  EndOfTransferFlag_26 = 0;
  if (State_23 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  _3 = State_23->Status;
  if (_3 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 4> :
  SrStatusRegister_27 ={v} Base_22->SR;
  _4 ={v} Base_22->SR;
  _5 = _4 & 16128;
  Base_22->SR ={v} _5;
  _6 = SrStatusRegister_27 & 6144;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ErrorFlag_31 = 1;
  goto <bb 9>; [INV]

  <bb 6> :
  _7 = State_23->ExpectedFifoReads;
  _8 = State_23->RxIndex;
  if (_7 != _8)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Lpspi_Ip_RxDmaContinueTransfer (Instance_20(D));
  goto <bb 9>; [INV]

  <bb 8> :
  EndOfTransferFlag_29 = 1;

  <bb 9> :
  # ErrorFlag_15 = PHI <ErrorFlag_31(5), ErrorFlag_25(7), ErrorFlag_25(8)>
  # EndOfTransferFlag_16 = PHI <EndOfTransferFlag_26(5), EndOfTransferFlag_26(7), EndOfTransferFlag_29(8)>
  if (EndOfTransferFlag_16 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (ErrorFlag_15 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 11> :
  Base_22->DER ={v} 0;
  if (ErrorFlag_15 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  State_23->Status = 3;
  _9 = State_23->PhyUnitConfig;
  _10 = _9->TxDmaChannel;
  _11 = (long unsigned int) _10;
  Dma_Ip_SetLogicChannelCommand (_11, 1);
  goto <bb 14>; [INV]

  <bb 13> :
  State_23->Status = 1;

  <bb 14> :
  _12 = State_23->Callback;
  if (_12 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  if (ErrorFlag_15 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _13 = State_23->Callback;
  _13 (Instance_20(D), 1);
  goto <bb 18>; [INV]

  <bb 17> :
  _14 = State_23->Callback;
  _14 (Instance_20(D), 0);

  <bb 18> :
  return;

}


Lpspi_Ip_IrqTxDmaHandler (uint8 Instance)
{
  boolean ErrorFlag;
  uint32 SrStatusRegister;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  const struct Lpspi_Ip_ConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  void (*<T4ae>) (uint8, Lpspi_Ip_EventType) _12;
  void (*<T4ae>) (uint8, Lpspi_Ip_EventType) _13;

  <bb 2> :
  _1 = (int) Instance_17(D);
  Base_19 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_17(D);
  State_20 = Lpspi_Ip_apxStateStructureArray[_2];
  SrStatusRegister_21 = 0;
  ErrorFlag_22 = 0;
  if (State_20 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _3 = State_20->Status;
  if (_3 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  SrStatusRegister_23 ={v} Base_19->SR;
  _4 ={v} Base_19->SR;
  _5 = _4 & 16128;
  Base_19->SR ={v} _5;
  _6 = SrStatusRegister_23 & 6144;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ErrorFlag_27 = 1;
  goto <bb 9>; [INV]

  <bb 6> :
  _7 = State_20->ExpectedFifoWrites;
  _8 = State_20->TxIndex;
  if (_7 != _8)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Lpspi_Ip_TxDmaContinueTransfer (Instance_17(D));
  goto <bb 9>; [INV]

  <bb 8> :
  Lpspi_Ip_TxDmaFinishTransfer (Instance_17(D));

  <bb 9> :
  # ErrorFlag_14 = PHI <ErrorFlag_27(5), ErrorFlag_22(7), ErrorFlag_22(8)>
  if (ErrorFlag_14 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  Base_19->DER ={v} 0;
  _9 = State_20->PhyUnitConfig;
  _10 = _9->RxDmaChannel;
  _11 = (long unsigned int) _10;
  Dma_Ip_SetLogicChannelCommand (_11, 1);
  State_20->Status = 3;
  _12 = State_20->Callback;
  if (_12 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _13 = State_20->Callback;
  _13 (Instance_17(D), 1);

  <bb 12> :
  return;

}


Lpspi_Ip_TxDmaFinishTransfer (const uint8 Instance)
{
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  _Bool _11;
  const struct Lpspi_Ip_ExternalDeviceType * _12;
  struct Lpspi_Ip_DeviceParamsType * _13;
  long unsigned int _14;
  uint8 * _15;
  unsigned char _16;
  _Bool _17;
  short unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  const struct Lpspi_Ip_ConfigType * _21;
  unsigned char _22;
  long unsigned int _23;

  <bb 2> :
  _1 = (int) Instance_25(D);
  Base_27 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_25(D);
  State_28 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_28->KeepCs;
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _5 = State_28->KeepCs;
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _7 ={v} Base_27->TCR;
  _8 = _7 & 2097152;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _9 ={v} Base_27->TCR;
  _10 = _9 & 4291821567;
  Base_27->TCR ={v} _10;
  goto <bb 9>; [INV]

  <bb 6> :
  _11 = State_28->NextTransferConfigAvailable;
  if (_11 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _12 = State_28->ExternalDevice;
  _13 = _12->DeviceParams;
  _14 = State_28->DefaultDataNext;
  _13->DefaultData = _14;
  State_28->FirstCmd = 0;
  _15 = State_28->TxBufferNext;
  _16 = State_28->FrameSizeNext;
  _17 = State_28->LsbNext;
  _18 = State_28->LengthNext;
  Lpspi_TransmitTxInit (Instance_25(D), _15, _16, _17, _18);
  State_28->NextTransferConfigAvailable = 0;
  _19 ={v} Base_27->DER;
  _20 = _19 & 4294967294;
  Base_27->DER ={v} _20;
  Lpspi_Ip_TxDmaConfig (Instance_25(D));
  _21 = State_28->PhyUnitConfig;
  _22 = _21->TxDmaChannel;
  _23 = (long unsigned int) _22;
  Dma_Ip_SetLogicChannelCommand (_23, 2);
  goto <bb 9>; [INV]

  <bb 8> :
  State_28->NextTransferDone = 1;

  <bb 9> :
  return;

}


Lpspi_Ip_RxDmaContinueTransfer (uint8 Instance)
{
  uint16 NumberDmaIterRead;
  struct Dma_Ip_LogicChannelTransferListType DmaTcdList[1];
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  short unsigned int _3;
  short unsigned int _4;
  signed short NumberDmaIterRead.13_5;
  short unsigned int _6;
  short unsigned int _7;
  long unsigned int _8;
  const struct Lpspi_Ip_ConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  const struct Lpspi_Ip_ConfigType * _12;
  unsigned char _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;

  <bb 2> :
  _1 = (int) Instance_18(D);
  Base_20 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_18(D);
  State_21 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_21->ExpectedFifoReads;
  _4 = State_21->RxIndex;
  NumberDmaIterRead_22 = _3 - _4;
  NumberDmaIterRead.13_5 = (signed short) NumberDmaIterRead_22;
  if (NumberDmaIterRead.13_5 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  NumberDmaIterRead_23 = 32767;

  <bb 4> :
  # NumberDmaIterRead_17 = PHI <NumberDmaIterRead_22(2), NumberDmaIterRead_23(3)>
  _6 = State_21->RxIndex;
  _7 = NumberDmaIterRead_17 + _6;
  State_21->RxIndex = _7;
  DmaTcdList[0].Param = 18;
  _8 = (long unsigned int) NumberDmaIterRead_17;
  DmaTcdList[0].Value = _8;
  _9 = State_21->PhyUnitConfig;
  _10 = _9->RxDmaChannel;
  _11 = (long unsigned int) _10;
  Dma_Ip_SetLogicChannelTransferList (_11, &DmaTcdList, 1);
  _12 = State_21->PhyUnitConfig;
  _13 = _12->RxDmaChannel;
  _14 = (long unsigned int) _13;
  Dma_Ip_SetLogicChannelCommand (_14, 0);
  _15 ={v} Base_20->DER;
  _16 = _15 | 1;
  Base_20->DER ={v} _16;
  DmaTcdList ={v} {CLOBBER};
  return;

}


Lpspi_Ip_TxDmaContinueTransfer (uint8 Instance)
{
  uint16 NumberDmaIterWrite;
  struct Dma_Ip_LogicChannelTransferListType DmaTcdList[1];
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  short unsigned int _3;
  short unsigned int _4;
  signed short NumberDmaIterWrite.12_5;
  short unsigned int _6;
  short unsigned int _7;
  long unsigned int _8;
  const struct Lpspi_Ip_ConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  const struct Lpspi_Ip_ConfigType * _14;
  unsigned char _15;
  long unsigned int _16;

  <bb 2> :
  _1 = (int) Instance_18(D);
  Base_20 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_18(D);
  State_21 = Lpspi_Ip_apxStateStructureArray[_2];
  _3 = State_21->ExpectedFifoWrites;
  _4 = State_21->TxIndex;
  NumberDmaIterWrite_22 = _3 - _4;
  NumberDmaIterWrite.12_5 = (signed short) NumberDmaIterWrite_22;
  if (NumberDmaIterWrite.12_5 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  NumberDmaIterWrite_23 = 32767;

  <bb 4> :
  # NumberDmaIterWrite_17 = PHI <NumberDmaIterWrite_22(2), NumberDmaIterWrite_23(3)>
  _6 = State_21->TxIndex;
  _7 = NumberDmaIterWrite_17 + _6;
  State_21->TxIndex = _7;
  DmaTcdList[0].Param = 18;
  _8 = (long unsigned int) NumberDmaIterWrite_17;
  DmaTcdList[0].Value = _8;
  _9 = State_21->PhyUnitConfig;
  _10 = _9->TxDmaChannel;
  _11 = (long unsigned int) _10;
  Dma_Ip_SetLogicChannelTransferList (_11, &DmaTcdList, 1);
  _12 ={v} Base_20->DER;
  _13 = _12 & 4294967294;
  Base_20->DER ={v} _13;
  _14 = State_21->PhyUnitConfig;
  _15 = _14->TxDmaChannel;
  _16 = (long unsigned int) _15;
  Dma_Ip_SetLogicChannelCommand (_16, 0);
  DmaTcdList ={v} {CLOBBER};
  return;

}


Lpspi_Ip_RxDmaConfig (uint8 Instance)
{
  uint16 NumberDmaIterRead;
  struct Dma_Ip_LogicChannelTransferListType DmaTcdList[10];
  struct Lpspi_Ip_StateStructureType * State;
  const struct LPSPI_Type * Base;
  int _1;
  int _2;
  signed short NumberDmaIterRead.10_3;
  const uint32_t * _4;
  long unsigned int _5;
  const struct Lpspi_Ip_ExternalDeviceType * _6;
  struct Lpspi_Ip_DeviceParamsType * _7;
  unsigned char _8;
  const struct Lpspi_Ip_ExternalDeviceType * _9;
  struct Lpspi_Ip_DeviceParamsType * _10;
  unsigned char _11;
  uint8 * _12;
  long unsigned int Lpspi_Ip_u32DiscardData.11_13;
  uint8 * _14;
  long unsigned int _15;
  long unsigned int _16;
  const struct Lpspi_Ip_ConfigType * _17;
  unsigned char _18;
  long unsigned int _19;
  const struct Lpspi_Ip_ConfigType * _20;
  unsigned char _21;
  long unsigned int _22;

  <bb 2> :
  _1 = (int) Instance_26(D);
  Base_28 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_26(D);
  State_29 = Lpspi_Ip_apxStateStructureArray[_2];
  NumberDmaIterRead_30 = State_29->ExpectedFifoReads;
  NumberDmaIterRead.10_3 = (signed short) NumberDmaIterRead_30;
  if (NumberDmaIterRead.10_3 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  NumberDmaIterRead_31 = 32767;

  <bb 4> :
  # NumberDmaIterRead_23 = PHI <NumberDmaIterRead_30(2), NumberDmaIterRead_31(3)>
  State_29->RxIndex = NumberDmaIterRead_23;
  DmaTcdList[0].Param = 0;
  DmaTcdList[1].Param = 5;
  DmaTcdList[2].Param = 1;
  DmaTcdList[3].Param = 3;
  DmaTcdList[4].Param = 8;
  DmaTcdList[5].Param = 15;
  DmaTcdList[6].Param = 6;
  DmaTcdList[7].Param = 18;
  DmaTcdList[8].Param = 23;
  DmaTcdList[9].Param = 7;
  _4 = &Base_28->RDR;
  _5 = (long unsigned int) _4;
  DmaTcdList[0].Value = _5;
  DmaTcdList[2].Value = 0;
  _6 = State_29->ExternalDevice;
  _7 = _6->DeviceParams;
  _8 = _7->FrameSize;
  if (_8 <= 8)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  DmaTcdList[3].Value = 0;
  DmaTcdList[4].Value = 0;
  DmaTcdList[5].Value = 1;
  DmaTcdList[6].Value = 1;
  goto <bb 9>; [INV]

  <bb 6> :
  _9 = State_29->ExternalDevice;
  _10 = _9->DeviceParams;
  _11 = _10->FrameSize;
  if (_11 <= 16)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  DmaTcdList[3].Value = 1;
  DmaTcdList[4].Value = 1;
  DmaTcdList[5].Value = 2;
  DmaTcdList[6].Value = 2;
  goto <bb 9>; [INV]

  <bb 8> :
  DmaTcdList[3].Value = 2;
  DmaTcdList[4].Value = 2;
  DmaTcdList[5].Value = 4;
  DmaTcdList[6].Value = 4;

  <bb 9> :
  _12 = State_29->RxBuffer;
  if (_12 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Lpspi_Ip_u32DiscardData.11_13 = (long unsigned int) &Lpspi_Ip_u32DiscardData;
  DmaTcdList[1].Value = Lpspi_Ip_u32DiscardData.11_13;
  DmaTcdList[6].Value = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _14 = State_29->RxBuffer;
  _15 = (long unsigned int) _14;
  DmaTcdList[1].Value = _15;

  <bb 12> :
  _16 = (long unsigned int) NumberDmaIterRead_23;
  DmaTcdList[7].Value = _16;
  DmaTcdList[8].Value = 1;
  DmaTcdList[9].Value = 0;
  _17 = State_29->PhyUnitConfig;
  _18 = _17->RxDmaChannel;
  _19 = (long unsigned int) _18;
  Dma_Ip_SetLogicChannelTransferList (_19, &DmaTcdList, 10);
  _20 = State_29->PhyUnitConfig;
  _21 = _20->RxDmaChannel;
  _22 = (long unsigned int) _21;
  Dma_Ip_SetLogicChannelCommand (_22, 0);
  DmaTcdList ={v} {CLOBBER};
  return;

}


Lpspi_Ip_TxDmaConfig (uint8 Instance)
{
  uint16 NumberDmaIterWrite;
  struct Dma_Ip_LogicChannelTransferListType DmaTcdList[10];
  struct Lpspi_Ip_StateStructureType * State;
  const struct LPSPI_Type * Base;
  int _1;
  int _2;
  signed short NumberDmaIterWrite.9_3;
  const uint32_t * _4;
  long unsigned int _5;
  unsigned char _6;
  unsigned char _7;
  uint8 * _8;
  const struct Lpspi_Ip_ExternalDeviceType * _9;
  struct Lpspi_Ip_DeviceParamsType * _10;
  uint32 * _11;
  long unsigned int _12;
  uint8 * _13;
  long unsigned int _14;
  long unsigned int _15;
  const struct Lpspi_Ip_ConfigType * _16;
  unsigned char _17;
  long unsigned int _18;
  const struct Lpspi_Ip_ConfigType * _19;
  unsigned char _20;
  long unsigned int _21;

  <bb 2> :
  _1 = (int) Instance_25(D);
  Base_27 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_25(D);
  State_28 = Lpspi_Ip_apxStateStructureArray[_2];
  NumberDmaIterWrite_29 = State_28->ExpectedFifoWrites;
  NumberDmaIterWrite.9_3 = (signed short) NumberDmaIterWrite_29;
  if (NumberDmaIterWrite.9_3 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  NumberDmaIterWrite_30 = 32767;

  <bb 4> :
  # NumberDmaIterWrite_22 = PHI <NumberDmaIterWrite_29(2), NumberDmaIterWrite_30(3)>
  State_28->TxIndex = NumberDmaIterWrite_22;
  DmaTcdList[0].Param = 0;
  DmaTcdList[1].Param = 5;
  DmaTcdList[2].Param = 1;
  DmaTcdList[3].Param = 3;
  DmaTcdList[4].Param = 8;
  DmaTcdList[5].Param = 15;
  DmaTcdList[6].Param = 6;
  DmaTcdList[7].Param = 18;
  DmaTcdList[8].Param = 23;
  DmaTcdList[9].Param = 7;
  _4 = &Base_27->TDR;
  _5 = (long unsigned int) _4;
  DmaTcdList[1].Value = _5;
  _6 = State_28->TxFrameSize;
  if (_6 <= 8)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  DmaTcdList[2].Value = 1;
  DmaTcdList[3].Value = 0;
  DmaTcdList[4].Value = 0;
  DmaTcdList[5].Value = 1;
  goto <bb 9>; [INV]

  <bb 6> :
  _7 = State_28->TxFrameSize;
  if (_7 <= 16)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  DmaTcdList[2].Value = 2;
  DmaTcdList[3].Value = 1;
  DmaTcdList[4].Value = 1;
  DmaTcdList[5].Value = 2;
  goto <bb 9>; [INV]

  <bb 8> :
  DmaTcdList[2].Value = 4;
  DmaTcdList[3].Value = 2;
  DmaTcdList[4].Value = 2;
  DmaTcdList[5].Value = 4;

  <bb 9> :
  _8 = State_28->TxBuffer;
  if (_8 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _9 = State_28->ExternalDevice;
  _10 = _9->DeviceParams;
  _11 = &_10->DefaultData;
  _12 = (long unsigned int) _11;
  DmaTcdList[0].Value = _12;
  DmaTcdList[2].Value = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _13 = State_28->TxBuffer;
  _14 = (long unsigned int) _13;
  DmaTcdList[0].Value = _14;

  <bb 12> :
  DmaTcdList[6].Value = 0;
  _15 = (long unsigned int) NumberDmaIterWrite_22;
  DmaTcdList[7].Value = _15;
  DmaTcdList[8].Value = 1;
  DmaTcdList[9].Value = 0;
  _16 = State_28->PhyUnitConfig;
  _17 = _16->TxDmaChannel;
  _18 = (long unsigned int) _17;
  Dma_Ip_SetLogicChannelTransferList (_18, &DmaTcdList, 10);
  _19 = State_28->PhyUnitConfig;
  _20 = _19->TxDmaChannel;
  _21 = (long unsigned int) _20;
  Dma_Ip_SetLogicChannelCommand (_21, 0);
  DmaTcdList ={v} {CLOBBER};
  return;

}


Lpspi_Ip_TransferProcess (uint8 Instance)
{
  boolean ErrorFlag;
  uint8 NumberOfReads;
  uint8 NumberOfWrites;
  uint32 SrStatusRegister;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  int _10;
  short unsigned int _11;
  int _12;
  short unsigned int _13;
  int _14;
  int _15;
  short unsigned int _16;
  unsigned char _17;
  short unsigned int _18;
  unsigned char _19;
  short unsigned int _20;
  unsigned char _21;
  unsigned char _22;
  unsigned char _23;
  unsigned char _24;
  unsigned char _25;
  _Bool _26;
  _Bool _27;
  short unsigned int _28;
  short unsigned int _29;
  int _30;
  short unsigned int _31;
  int _32;
  short unsigned int _33;
  int _34;
  int _35;
  short unsigned int _36;
  unsigned char _37;
  short unsigned int _38;
  unsigned char _39;
  unsigned char _40;
  unsigned char _41;
  _Bool _42;
  const struct Lpspi_Ip_ExternalDeviceType * _43;
  struct Lpspi_Ip_DeviceParamsType * _44;
  long unsigned int _45;
  uint8 * _46;
  unsigned char _47;
  _Bool _48;
  short unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  _Bool _52;
  _Bool _53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  short unsigned int _58;
  short unsigned int _59;

  <bb 2> :
  _1 = (int) Instance_67(D);
  Base_69 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_67(D);
  State_70 = Lpspi_Ip_apxStateStructureArray[_2];
  NumberOfWrites_71 = 0;
  NumberOfReads_72 = 0;
  ErrorFlag_73 = 0;
  _3 = State_70->Status;
  if (_3 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 3> :
  SrStatusRegister_74 ={v} Base_69->SR;
  _4 ={v} Base_69->SR;
  _5 = _4 & 16128;
  Base_69->SR ={v} _5;
  _6 = SrStatusRegister_74 & 6144;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ErrorFlag_92 = 1;
  goto <bb 22>; [INV]

  <bb 5> :
  _7 ={v} Base_69->FSR;
  _8 = _7 >> 16;
  _9 = (unsigned char) _8;
  NumberOfReads_76 = _9 & 7;
  if (NumberOfReads_76 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  _10 = (int) NumberOfReads_76;
  _11 = State_70->ExpectedFifoReads;
  _12 = (int) _11;
  _13 = State_70->RxIndex;
  _14 = (int) _13;
  _15 = _12 - _14;
  if (_10 > _15)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _16 = State_70->ExpectedFifoReads;
  _17 = (unsigned char) _16;
  _18 = State_70->RxIndex;
  _19 = (unsigned char) _18;
  NumberOfReads_77 = _17 - _19;

  <bb 8> :
  # NumberOfReads_61 = PHI <NumberOfReads_76(6), NumberOfReads_77(7)>
  _20 = State_70->RxIndex;
  if (_20 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _21 = State_70->CurrentTxFifoSlot;
  _22 = _21 + 1;
  State_70->CurrentTxFifoSlot = _22;

  <bb 10> :
  Lpspi_Ip_ReadDataFromFifo (Instance_67(D), NumberOfReads_61);
  _23 = State_70->CurrentTxFifoSlot;
  _24 = NumberOfReads_61 + _23;
  State_70->CurrentTxFifoSlot = _24;

  <bb 11> :
  _25 = State_70->CurrentTxFifoSlot;
  if (_25 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 12> :
  _26 = State_70->TxDoneFlag;
  _27 = ~_26;
  if (_27 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 13> :
  _28 = State_70->ExpectedFifoWrites;
  _29 = State_70->TxIndex;
  if (_28 != _29)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  NumberOfWrites_88 = State_70->CurrentTxFifoSlot;
  _30 = (int) NumberOfWrites_88;
  _31 = State_70->ExpectedFifoWrites;
  _32 = (int) _31;
  _33 = State_70->TxIndex;
  _34 = (int) _33;
  _35 = _32 - _34;
  if (_30 > _35)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _36 = State_70->ExpectedFifoWrites;
  _37 = (unsigned char) _36;
  _38 = State_70->TxIndex;
  _39 = (unsigned char) _38;
  NumberOfWrites_89 = _37 - _39;

  <bb 16> :
  # NumberOfWrites_60 = PHI <NumberOfWrites_88(14), NumberOfWrites_89(15)>
  Lpspi_Ip_PushDataToFifo (Instance_67(D), NumberOfWrites_60);
  _40 = State_70->CurrentTxFifoSlot;
  _41 = _40 - NumberOfWrites_60;
  State_70->CurrentTxFifoSlot = _41;
  goto <bb 22>; [INV]

  <bb 17> :
  _42 = State_70->NextTransferConfigAvailable;
  if (_42 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _43 = State_70->ExternalDevice;
  _44 = _43->DeviceParams;
  _45 = State_70->DefaultDataNext;
  _44->DefaultData = _45;
  State_70->FirstCmd = 0;
  _46 = State_70->TxBufferNext;
  _47 = State_70->FrameSizeNext;
  _48 = State_70->LsbNext;
  _49 = State_70->LengthNext;
  Lpspi_TransmitTxInit (Instance_67(D), _46, _47, _48, _49);
  State_70->NextTransferConfigAvailable = 0;
  goto <bb 22>; [INV]

  <bb 19> :
  State_70->TxDoneFlag = 1;
  _50 ={v} Base_69->IER;
  _51 = _50 & 4294967294;
  Base_69->IER ={v} _51;
  _52 = State_70->KeepCs;
  _53 = ~_52;
  if (_53 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _54 ={v} Base_69->TCR;
  _55 = _54 & 2097152;
  if (_55 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  _56 ={v} Base_69->TCR;
  _57 = _56 & 4291821567;
  Base_69->TCR ={v} _57;

  <bb 22> :
  # ErrorFlag_62 = PHI <ErrorFlag_92(4), ErrorFlag_73(11), ErrorFlag_73(12), ErrorFlag_73(16), ErrorFlag_73(18), ErrorFlag_73(19), ErrorFlag_73(20), ErrorFlag_73(21)>
  _58 = State_70->RxIndex;
  _59 = State_70->ExpectedFifoReads;
  if (_58 == _59)
    goto <bb 24>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  if (ErrorFlag_62 != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  Base_69->IER ={v} 0;
  Lpspi_Ip_ChannelFinished (Instance_67(D), ErrorFlag_62);

  <bb 25> :
  return;

}


Lpspi_Ip_ChannelFinished (uint8 Instance, boolean ErrorFlag)
{
  Lpspi_Ip_EventType EventState;
  struct Lpspi_Ip_StateStructureType * State;
  int _1;
  void (*<T4ae>) (uint8, Lpspi_Ip_EventType) _2;
  void (*<T4ae>) (uint8, Lpspi_Ip_EventType) _3;

  <bb 2> :
  _1 = (int) Instance_7(D);
  State_9 = Lpspi_Ip_apxStateStructureArray[_1];
  EventState_10 = 1;
  if (ErrorFlag_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  State_9->Status = 3;
  EventState_15 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  State_9->Status = 1;
  EventState_13 = 0;

  <bb 5> :
  # EventState_4 = PHI <EventState_15(3), EventState_13(4)>
  _2 = State_9->Callback;
  if (_2 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _3 = State_9->Callback;
  _3 (Instance_7(D), EventState_4);

  <bb 7> :
  return;

}


__attribute__((always_inline))
Lpspi_Ip_PushDataToFifo (uint8 Instance, uint8 NumberOfWrites)
{
  uint8 Index;
  uint32 Data;
  struct Lpspi_Ip_StateStructureType * State;
  struct LPSPI_Type * Base;
  int _1;
  int _2;
  const struct Lpspi_Ip_ExternalDeviceType * _3;
  struct Lpspi_Ip_DeviceParamsType * _4;
  uint8 * _5;
  unsigned char _6;
  uint8 * _7;
  short unsigned int _8;
  int _9;
  int _10;
  int _11;
  sizetype _12;
  uint8 * _13;
  unsigned char _14;
  unsigned char Index.5_15;
  unsigned char _16;
  uint8 * _17;
  short unsigned int _18;
  int _19;
  int _20;
  int _21;
  unsigned int _22;
  unsigned int _23;
  uint8 * _24;
  short unsigned int _25;
  unsigned char Index.6_26;
  uint8 * _27;
  short unsigned int _28;
  int _29;
  int _30;
  int _31;
  unsigned int _32;
  unsigned int _33;
  uint8 * _34;
  unsigned char Index.7_35;
  unsigned char Index.8_36;
  short unsigned int _37;
  short unsigned int _38;
  short unsigned int _39;

  <bb 2> :
  _1 = (int) Instance_49(D);
  Base_51 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_49(D);
  State_52 = Lpspi_Ip_apxStateStructureArray[_2];
  Data_53 = 0;
  Index_54 = 0;
  _3 = State_52->ExternalDevice;
  _4 = _3->DeviceParams;
  Data_55 = _4->DefaultData;
  _5 = State_52->TxBuffer;
  if (_5 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  _6 = State_52->TxFrameSize;
  if (_6 <= 8)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Index_68 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _7 = State_52->TxBuffer;
  _8 = State_52->TxIndex;
  _9 = (int) _8;
  _10 = (int) Index_40;
  _11 = _9 + _10;
  _12 = (sizetype) _11;
  _13 = _7 + _12;
  _14 = *_13;
  Data_69 = (uint32) _14;
  Base_51->TDR ={v} Data_69;
  Index.5_15 = Index_40;
  Index_71 = Index.5_15 + 1;

  <bb 6> :
  # Index_40 = PHI <Index_68(4), Index_71(5)>
  if (Index_40 < NumberOfWrites_57(D))
    goto <bb 5>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 7> :
  _16 = State_52->TxFrameSize;
  if (_16 <= 16)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  Index_64 = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _17 = State_52->TxBuffer;
  _18 = State_52->TxIndex;
  _19 = (int) _18;
  _20 = (int) Index_41;
  _21 = _19 + _20;
  _22 = (unsigned int) _21;
  _23 = _22 * 2;
  _24 = _17 + _23;
  _25 = MEM[(uint16 *)_24];
  Data_65 = (uint32) _25;
  Base_51->TDR ={v} Data_65;
  Index.6_26 = Index_41;
  Index_67 = Index.6_26 + 1;

  <bb 10> :
  # Index_41 = PHI <Index_64(8), Index_67(9)>
  if (Index_41 < NumberOfWrites_57(D))
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 11> :
  Index_60 = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _27 = State_52->TxBuffer;
  _28 = State_52->TxIndex;
  _29 = (int) _28;
  _30 = (int) Index_42;
  _31 = _29 + _30;
  _32 = (unsigned int) _31;
  _33 = _32 * 4;
  _34 = _27 + _33;
  Data_61 = MEM[(uint32 *)_34];
  Base_51->TDR ={v} Data_61;
  Index.7_35 = Index_42;
  Index_63 = Index.7_35 + 1;

  <bb 13> :
  # Index_42 = PHI <Index_60(11), Index_63(12)>
  if (Index_42 < NumberOfWrites_57(D))
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  Index_56 = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  Base_51->TDR ={v} Data_55;
  Index.8_36 = Index_43;
  Index_59 = Index.8_36 + 1;

  <bb 16> :
  # Index_43 = PHI <Index_56(14), Index_59(15)>
  if (Index_43 < NumberOfWrites_57(D))
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _37 = State_52->TxIndex;
  _38 = (short unsigned int) NumberOfWrites_57(D);
  _39 = _37 + _38;
  State_52->TxIndex = _39;
  return;

}


__attribute__((always_inline))
Lpspi_Ip_ReadDataFromFifo (uint8 Instance, uint8 NumberOfReads)
{
  uint8 Index;
  uint32 Data;
  struct Lpspi_Ip_StateStructureType * State;
  const struct LPSPI_Type * Base;
  long unsigned int vol.3;
  int _1;
  int _2;
  uint8 * _3;
  const struct Lpspi_Ip_ExternalDeviceType * _4;
  struct Lpspi_Ip_DeviceParamsType * _5;
  unsigned char _6;
  uint8 * _7;
  short unsigned int _8;
  int _9;
  int _10;
  int _11;
  sizetype _12;
  uint8 * _13;
  unsigned char _14;
  unsigned char Index.0_15;
  const struct Lpspi_Ip_ExternalDeviceType * _16;
  struct Lpspi_Ip_DeviceParamsType * _17;
  unsigned char _18;
  uint8 * _19;
  short unsigned int _20;
  int _21;
  int _22;
  int _23;
  unsigned int _24;
  unsigned int _25;
  uint8 * _26;
  short unsigned int _27;
  unsigned char Index.1_28;
  uint8 * _29;
  short unsigned int _30;
  int _31;
  int _32;
  int _33;
  unsigned int _34;
  unsigned int _35;
  uint8 * _36;
  unsigned char Index.2_37;
  unsigned char Index.4_38;
  short unsigned int _39;
  short unsigned int _40;
  short unsigned int _41;
  long unsigned int vol.3_58;

  <bb 2> :
  _1 = (int) Instance_50(D);
  Base_52 = Lpspi_Ip_apxBases[_1];
  _2 = (int) Instance_50(D);
  State_53 = Lpspi_Ip_apxStateStructureArray[_2];
  Data_54 = 0;
  Index_55 = 0;
  _3 = State_53->RxBuffer;
  if (_3 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  _4 = State_53->ExternalDevice;
  _5 = _4->DeviceParams;
  _6 = _5->FrameSize;
  if (_6 <= 8)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Index_68 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  Data_69 ={v} Base_52->RDR;
  _7 = State_53->RxBuffer;
  _8 = State_53->RxIndex;
  _9 = (int) _8;
  _10 = (int) Index_42;
  _11 = _9 + _10;
  _12 = (sizetype) _11;
  _13 = _7 + _12;
  _14 = (unsigned char) Data_69;
  *_13 = _14;
  Index.0_15 = Index_42;
  Index_71 = Index.0_15 + 1;

  <bb 6> :
  # Index_42 = PHI <Index_68(4), Index_71(5)>
  if (Index_42 < NumberOfReads_57(D))
    goto <bb 5>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 7> :
  _16 = State_53->ExternalDevice;
  _17 = _16->DeviceParams;
  _18 = _17->FrameSize;
  if (_18 <= 16)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  Index_64 = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  Data_65 ={v} Base_52->RDR;
  _19 = State_53->RxBuffer;
  _20 = State_53->RxIndex;
  _21 = (int) _20;
  _22 = (int) Index_43;
  _23 = _21 + _22;
  _24 = (unsigned int) _23;
  _25 = _24 * 2;
  _26 = _19 + _25;
  _27 = (short unsigned int) Data_65;
  MEM[(uint16 *)_26] = _27;
  Index.1_28 = Index_43;
  Index_67 = Index.1_28 + 1;

  <bb 10> :
  # Index_43 = PHI <Index_64(8), Index_67(9)>
  if (Index_43 < NumberOfReads_57(D))
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 11> :
  Index_60 = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  Data_61 ={v} Base_52->RDR;
  _29 = State_53->RxBuffer;
  _30 = State_53->RxIndex;
  _31 = (int) _30;
  _32 = (int) Index_44;
  _33 = _31 + _32;
  _34 = (unsigned int) _33;
  _35 = _34 * 4;
  _36 = _29 + _35;
  MEM[(uint32 *)_36] = Data_61;
  Index.2_37 = Index_44;
  Index_63 = Index.2_37 + 1;

  <bb 13> :
  # Index_44 = PHI <Index_60(11), Index_63(12)>
  if (Index_44 < NumberOfReads_57(D))
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  Index_56 = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  vol.3_58 ={v} Base_52->RDR;
  Index.4_38 = Index_45;
  Index_59 = Index.4_38 + 1;

  <bb 16> :
  # Index_45 = PHI <Index_56(14), Index_59(15)>
  if (Index_45 < NumberOfReads_57(D))
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _39 = State_53->RxIndex;
  _40 = (short unsigned int) NumberOfReads_57(D);
  _41 = _39 + _40;
  State_53->RxIndex = _41;
  return;

}


