Rm_Mpu_GetErrorDetails (struct Rm_Mpu_ErrorDetailsType * pErrorDetails)
{
  boolean bErr;
  Std_ReturnType retval;
  Std_ReturnType D.5841;

  <bb 2> :
  retval = 1;
  bErr = Rm_Ipw_Mpu_GetErrorDetails (pErrorDetails);
  if (bErr != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  retval = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  retval = 1;

  <bb 5> :
  D.5841 = retval;

  <bb 6> :
<L3>:
  return D.5841;

}


Rm_Mpu_SetAccessMode (uint8 u8RegionNum, Rm_Mpu_MasterType eMaster, Rm_Mpu_SupervisorAccessModeType eSupervisorMode, Rm_Mpu_UserAccessModeType eUserMode)
{
  <bb 2> :
  Rm_Ipw_Mpu_SetAccessMode (u8RegionNum, eMaster, eSupervisorMode, eUserMode);
  return;

}


Rm_Mpu_EnableRegion (uint8 u8RegionNum, boolean bEnable)
{
  <bb 2> :
  Rm_Ipw_Mpu_EnableRegion (u8RegionNum, bEnable);
  return;

}


Rm_Mpu_SetRegionConfig (uint8 u8RegionNum, const struct Rm_Mpu_RegionConfigType * const pUserConfigPtr)
{
  <bb 2> :
  Rm_Ipw_Mpu_SetRegionConfig (u8RegionNum, pUserConfigPtr);
  return;

}


Rm_Init (const struct Rm_ConfigType * ConfigPtr)
{
  Std_ReturnType valid;

  <bb 2> :
  valid = Rm_ValidateGlobalCall (0);
  if (valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  valid = Rm_ValidatePtrInit (ConfigPtr);
  if (valid == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Rm_pConfig = &Rm_Config;
  Rm_pConfig.1_1 = Rm_pConfig;
  _2 = Rm_pConfig.1_1->Rm_pIpwConfig;
  Rm_Ipw_Mpu_Init (_2);

  <bb 5> :
  return;

}


Rm_ValidatePtrInit (const struct Rm_ConfigType * ConfigPtr)
{
  Std_ReturnType valid;
  Std_ReturnType D.5832;

  <bb 2> :
  valid = 0;
  if (ConfigPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  valid = 1;
  Det_ReportError (255, 0, 0, 4);

  <bb 4> :
  D.5832 = valid;

  <bb 5> :
<L3>:
  return D.5832;

}


Rm_ValidateGlobalCall (uint8 u8ServiceId)
{
  Std_ReturnType valid;
  Std_ReturnType D.5827;

  <bb 2> :
  valid = 1;
  Rm_pConfig.0_1 = Rm_pConfig;
  if (Rm_pConfig.0_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (u8ServiceId == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Det_ReportError (255, 0, u8ServiceId, 2);
  goto <bb 9>; [INV]

  <bb 5> :
  valid = 0;
  goto <bb 9>; [INV]

  <bb 6> :
  if (u8ServiceId == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  valid = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (255, 0, u8ServiceId, 3);

  <bb 9> :
  D.5827 = valid;

  <bb 10> :
<L9>:
  return D.5827;

}


