Csec_Ip_GenerateMacAddrMode (Csec_Ip_KeyIdType eKeyId, const uint8 * pMsg, uint32 u32MsgLen, uint8 * pCmac)
{
  Csec_Ip_ErrorCodeType D.6578;

  <bb 2> :
  Csec_Ip_pState.354_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.354_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.355_3 = Csec_Ip_pState;
  Csec_Ip_pState.355_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.356_4 = Csec_Ip_pState;
  Csec_Ip_pState.356_4->bCmdInProgress = 1;
  Csec_Ip_ClearErrorFlags ();
  pMsg.357_5 = (long unsigned int) pMsg;
  Csec_Ip_WriteCommandWord (16, pMsg.357_5);
  Csec_Ip_WriteCommandWord (12, u32MsgLen);
  Csec_Ip_WriteCmdAndWait (5, 1, 0, eKeyId);
  Csec_Ip_pState.358_6 = Csec_Ip_pState;
  _7 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.358_6->ErrCode = _7;
  Csec_Ip_pState.359_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.359_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_ReadCommandBytes (32, pCmac, 16);

  <bb 6> :
  Csec_Ip_pState.360_10 = Csec_Ip_pState;
  Csec_Ip_pState.360_10->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.361_11 = Csec_Ip_pState;
  D.6578 = Csec_Ip_pState.361_11->ErrCode;

  <bb 8> :
<L5>:
  return D.6578;

}


Csec_Ip_VerifyMacAddrMode (Csec_Ip_KeyIdType eKeyId, const uint8 * pMsg, uint32 u32MsgLen, const uint8 * pMac, uint16 u16MacLen, boolean * pbVerifStatus)
{
  uint32 u32VerifWord;
  Csec_Ip_ErrorCodeType D.6571;

  <bb 2> :
  Csec_Ip_pState.346_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.346_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.347_3 = Csec_Ip_pState;
  Csec_Ip_pState.347_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.348_4 = Csec_Ip_pState;
  Csec_Ip_pState.348_4->bCmdInProgress = 1;
  Csec_Ip_ClearErrorFlags ();
  pMsg.349_5 = (long unsigned int) pMsg;
  Csec_Ip_WriteCommandWord (16, pMsg.349_5);
  Csec_Ip_WriteCommandBytes (32, pMac, 16);
  Csec_Ip_WriteCommandWord (12, u32MsgLen);
  Csec_Ip_WriteCommandHalfWord (8, u16MacLen);
  Csec_Ip_WriteCmdAndWait (6, 1, 0, eKeyId);
  Csec_Ip_pState.350_6 = Csec_Ip_pState;
  _7 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.350_6->ErrCode = _7;
  Csec_Ip_pState.351_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.351_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  u32VerifWord = Csec_Ip_ReadCommandWord (20);
  _10 = u32VerifWord & 4294901760;
  _11 = _10 == 0;
  *pbVerifStatus = _11;

  <bb 6> :
  Csec_Ip_pState.352_12 = Csec_Ip_pState;
  Csec_Ip_pState.352_12->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.353_13 = Csec_Ip_pState;
  D.6571 = Csec_Ip_pState.353_13->ErrCode;

  <bb 8> :
<L5>:
  return D.6571;

}


Csec_Ip_GetStatus ()
{
  Csec_Ip_StatusType D.6564;

  <bb 2> :
  _1 = 1073872896B;
  D.6564 = _1->FCSESTAT;

  <bb 3> :
<L0>:
  return D.6564;

}


Csec_Ip_SetSynchronousCmdTimeout (uint32 u32Timeout)
{
  <bb 2> :
  Csec_Ip_pState.345_1 = Csec_Ip_pState;
  Csec_Ip_pState.345_1->u32Timeout = u32Timeout;
  return;

}


Csec_Ip_IrqHandler ()
{
  <bb 2> :
  _1 = 1073872896B;
  _2 = _1->FCNFG;
  _3 = (signed char) _2;
  if (_3 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  Csec_Ip_pState.343_4 = Csec_Ip_pState;
  if (Csec_Ip_pState.343_4 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Csec_Ip_SetInterrupt (0);
  goto <bb 9>; [INV]

  <bb 5> :
  Csec_Ip_pState.344_5 = Csec_Ip_pState;
  _6 = Csec_Ip_pState.344_5->bCmdInProgress;
  _7 = ~_6;
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Csec_Ip_SetInterrupt (0);
  goto <bb 9>; [INV]

  <bb 7> :
  _8 = 1073872896B;
  _9 = _8->FSTAT;
  _10 = (signed char) _9;
  if (_10 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  Csec_Ip_ProcessReceivedResponse (1);

  <bb 9> :
  return;

}


Csec_Ip_CancelCommand ()
{
  Csec_Ip_ErrorCodeType PrevErrCode;

  <bb 2> :
  Csec_Ip_pState.330_1 = Csec_Ip_pState;
  PrevErrCode = Csec_Ip_pState.330_1->ErrCode;
  Csec_Ip_pState.331_2 = Csec_Ip_pState;
  _3 = Csec_Ip_pState.331_2->bCmdInProgress;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  Csec_Ip_SetInterrupt (0);
  Csec_Ip_pState.332_4 = Csec_Ip_pState;
  Csec_Ip_pState.332_4->ErrCode = 1;
  Csec_Ip_WaitCommandCompletion (10000000, 0);
  Csec_Ip_pState.333_5 = Csec_Ip_pState;
  _6 = Csec_Ip_pState.333_5->ErrCode;
  if (_6 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  Csec_Ip_pState.334_7 = Csec_Ip_pState;
  _8 = Csec_Ip_pState.334_7->eCmd;
  if (_8 != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  Csec_Ip_pState.335_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.335_9->eCmd;
  if (_10 != 3)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  Csec_Ip_pState.336_11 = Csec_Ip_pState;
  _12 = Csec_Ip_pState.336_11->u32InputSize;
  Csec_Ip_pState.337_13 = Csec_Ip_pState;
  _14 = Csec_Ip_pState.337_13->u32Index;
  if (_12 != _14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_pState.338_15 = Csec_Ip_pState;
  _16 = Csec_Ip_pState.338_15->eCmd;
  Csec_Ip_pState.339_17 = Csec_Ip_pState;
  _18 = Csec_Ip_pState.339_17->eKeyId;
  Csec_Ip_WriteCommandHeader (_16, 0, 0, _18);
  Csec_Ip_WaitCommandCompletion (10000000, 0);

  <bb 8> :
  Csec_Ip_pState.340_19 = Csec_Ip_pState;
  _20 = Csec_Ip_pState.340_19->ErrCode;
  if (_20 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Csec_Ip_pState.341_21 = Csec_Ip_pState;
  Csec_Ip_pState.341_21->bCmdInProgress = 0;

  <bb 10> :
  Csec_Ip_pState.342_22 = Csec_Ip_pState;
  Csec_Ip_pState.342_22->ErrCode = PrevErrCode;
  return;

}


Csec_Ip_MainFunction ()
{
  <bb 2> :
  Csec_Ip_ProcessReceivedResponse (2);
  return;

}


Csec_Ip_MpCompress (const uint8 * pMsg, uint16 u16MsgLen, uint8 * pMpCompress)
{
  uint8 u8NumBytes;
  uint8 u8NumPages;
  uint16 u16NumPagesLeft;
  uint32 u32ElapsedTime;
  uint32 u32NumBytes;
  Csec_Ip_ErrorCodeType D.6536;
  unsigned char iftmp.315;

  <bb 2> :
  u32ElapsedTime = 0;
  u16NumPagesLeft = u16MsgLen;
  Csec_Ip_pState.313_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.313_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.314_3 = Csec_Ip_pState;
  Csec_Ip_pState.314_3->ErrCode = 65535;
  goto <bb 19>; [INV]

  <bb 4> :
  Csec_Ip_ClearErrorFlags ();
  _4 = (long unsigned int) u16MsgLen;
  u32NumBytes = _4 << 4;
  Csec_Ip_UpdateState (0, 22, pMsg, pMpCompress, u32NumBytes);
  goto <bb 15>; [INV]

  <bb 5> :
  if (u16NumPagesLeft <= 7)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.315 = (unsigned char) u16NumPagesLeft;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.315 = 7;

  <bb 8> :
  u8NumPages = iftmp.315;
  u8NumBytes = u8NumPages << 4;
  Csec_Ip_pState.316_5 = Csec_Ip_pState;
  _6 = Csec_Ip_pState.316_5->u32Index;
  _7 = pMsg + _6;
  Csec_Ip_WriteCommandBytes (16, _7, u8NumBytes);
  Csec_Ip_WriteCommandHalfWord (14, u16MsgLen);
  Csec_Ip_pState.317_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.317_8->eSeq;
  Csec_Ip_WriteCommandHeader (22, 0, _9, 0);
  Csec_Ip_pState.318_10 = Csec_Ip_pState;
  _11 = Csec_Ip_pState.318_10->u32Timeout;
  u32ElapsedTime = Csec_Ip_WaitCommandCompletion (_11, u32ElapsedTime);
  Csec_Ip_pState.319_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.319_12->ErrCode;
  if (_13 == 65534)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Csec_Ip_CancelCommand ();
  Csec_Ip_pState.320_14 = Csec_Ip_pState;
  Csec_Ip_pState.320_14->bCmdInProgress = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_pState.321_15 = Csec_Ip_pState;
  _16 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.321_15->ErrCode = _16;

  <bb 11> :
  Csec_Ip_pState.322_17 = Csec_Ip_pState;
  _18 = Csec_Ip_pState.322_17->ErrCode;
  if (_18 != 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  goto <bb 16>; [INV]

  <bb 13> :
  _19 = (short unsigned int) u8NumPages;
  u16NumPagesLeft = u16NumPagesLeft - _19;
  Csec_Ip_pState.323_20 = Csec_Ip_pState;
  _21 = Csec_Ip_pState.323_20->u32Index;
  _22 = (long unsigned int) u8NumBytes;
  Csec_Ip_pState.324_23 = Csec_Ip_pState;
  _24 = _21 + _22;
  Csec_Ip_pState.324_23->u32Index = _24;
  Csec_Ip_pState.325_25 = Csec_Ip_pState;
  _26 = Csec_Ip_pState.325_25->eSeq;
  if (_26 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Csec_Ip_pState.326_27 = Csec_Ip_pState;
  Csec_Ip_pState.326_27->eSeq = 1;

  <bb 15> :
  if (u16NumPagesLeft != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  Csec_Ip_pState.327_28 = Csec_Ip_pState;
  _29 = Csec_Ip_pState.327_28->ErrCode;
  if (_29 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  Csec_Ip_ReadCommandBytes (16, pMpCompress, 16);

  <bb 18> :
  Csec_Ip_pState.328_30 = Csec_Ip_pState;
  Csec_Ip_pState.328_30->bCmdInProgress = 0;

  <bb 19> :
  Csec_Ip_pState.329_31 = Csec_Ip_pState;
  D.6536 = Csec_Ip_pState.329_31->ErrCode;

  <bb 20> :
<L18>:
  return D.6536;

}


Csec_Ip_DbgAuth (const uint8 * pAuthorization)
{
  Csec_Ip_ErrorCodeType D.6518;

  <bb 2> :
  Csec_Ip_pState.304_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.304_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.305_3 = Csec_Ip_pState;
  Csec_Ip_pState.305_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.306_4 = Csec_Ip_pState;
  Csec_Ip_pState.306_4->bCmdInProgress = 1;
  Csec_Ip_pState.307_5 = Csec_Ip_pState;
  Csec_Ip_pState.307_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandBytes (16, pAuthorization, 16);
  Csec_Ip_WriteCommandHeader (19, 0, 0, 0);
  Csec_Ip_pState.308_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.308_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.309_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.309_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.310_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.310_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.311_12 = Csec_Ip_pState;
  Csec_Ip_pState.311_12->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.312_13 = Csec_Ip_pState;
  D.6518 = Csec_Ip_pState.312_13->ErrCode;

  <bb 8> :
<L5>:
  return D.6518;

}


Csec_Ip_DbgChal (uint8 * pChallenge)
{
  Csec_Ip_ErrorCodeType D.6511;

  <bb 2> :
  Csec_Ip_pState.294_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.294_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.295_3 = Csec_Ip_pState;
  Csec_Ip_pState.295_3->ErrCode = 65535;
  goto <bb 9>; [INV]

  <bb 4> :
  Csec_Ip_pState.296_4 = Csec_Ip_pState;
  Csec_Ip_pState.296_4->bCmdInProgress = 1;
  Csec_Ip_pState.297_5 = Csec_Ip_pState;
  Csec_Ip_pState.297_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandHeader (18, 0, 0, 0);
  Csec_Ip_pState.298_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.298_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.299_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.299_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.300_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.300_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.301_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.301_12->ErrCode;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_ReadCommandBytes (16, pChallenge, 16);

  <bb 8> :
  Csec_Ip_pState.302_14 = Csec_Ip_pState;
  Csec_Ip_pState.302_14->bCmdInProgress = 0;

  <bb 9> :
  Csec_Ip_pState.303_15 = Csec_Ip_pState;
  D.6511 = Csec_Ip_pState.303_15->ErrCode;

  <bb 10> :
<L7>:
  return D.6511;

}


Csec_Ip_GetId (const uint8 * pChallenge, uint8 * pUid, uint8 * pSreg, uint8 * pMac)
{
  Csec_Ip_ErrorCodeType D.6502;

  <bb 2> :
  Csec_Ip_pState.284_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.284_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.285_3 = Csec_Ip_pState;
  Csec_Ip_pState.285_3->ErrCode = 65535;
  goto <bb 9>; [INV]

  <bb 4> :
  Csec_Ip_pState.286_4 = Csec_Ip_pState;
  Csec_Ip_pState.286_4->bCmdInProgress = 1;
  Csec_Ip_pState.287_5 = Csec_Ip_pState;
  Csec_Ip_pState.287_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandBytes (16, pChallenge, 16);
  Csec_Ip_WriteCommandHeader (16, 0, 0, 0);
  Csec_Ip_pState.288_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.288_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.289_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.289_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.290_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.290_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.291_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.291_12->ErrCode;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_ReadCommandBytes (32, pUid, 15);
  _14 = Csec_Ip_ReadCommandByte (47);
  *pSreg = _14;
  Csec_Ip_ReadCommandBytes (48, pMac, 16);

  <bb 8> :
  Csec_Ip_pState.292_15 = Csec_Ip_pState;
  Csec_Ip_pState.292_15->bCmdInProgress = 0;

  <bb 9> :
  Csec_Ip_pState.293_16 = Csec_Ip_pState;
  D.6502 = Csec_Ip_pState.293_16->ErrCode;

  <bb 10> :
<L7>:
  return D.6502;

}


Csec_Ip_BootDefine (uint32 u32BootSize, Csec_Ip_BootFlavorType eBootFlavor)
{
  Csec_Ip_ErrorCodeType D.6493;

  <bb 2> :
  Csec_Ip_pState.275_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.275_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.276_3 = Csec_Ip_pState;
  Csec_Ip_pState.276_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.277_4 = Csec_Ip_pState;
  Csec_Ip_pState.277_4->bCmdInProgress = 1;
  Csec_Ip_pState.278_5 = Csec_Ip_pState;
  Csec_Ip_pState.278_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandWord (28, u32BootSize);
  _6 = (unsigned char) eBootFlavor;
  Csec_Ip_WriteCommandByte (27, _6);
  Csec_Ip_WriteCommandHeader (17, 0, 0, 0);
  Csec_Ip_pState.279_7 = Csec_Ip_pState;
  _8 = Csec_Ip_pState.279_7->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_8, 0);
  Csec_Ip_pState.280_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.280_9->ErrCode;
  if (_10 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.281_11 = Csec_Ip_pState;
  _12 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.281_11->ErrCode = _12;

  <bb 6> :
  Csec_Ip_pState.282_13 = Csec_Ip_pState;
  Csec_Ip_pState.282_13->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.283_14 = Csec_Ip_pState;
  D.6493 = Csec_Ip_pState.283_14->ErrCode;

  <bb 8> :
<L5>:
  return D.6493;

}


Csec_Ip_BootOk ()
{
  Csec_Ip_ErrorCodeType D.6486;

  <bb 2> :
  Csec_Ip_pState.266_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.266_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.267_3 = Csec_Ip_pState;
  Csec_Ip_pState.267_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.268_4 = Csec_Ip_pState;
  Csec_Ip_pState.268_4->bCmdInProgress = 1;
  Csec_Ip_pState.269_5 = Csec_Ip_pState;
  Csec_Ip_pState.269_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandHeader (15, 0, 0, 0);
  Csec_Ip_pState.270_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.270_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.271_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.271_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.272_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.272_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.273_12 = Csec_Ip_pState;
  Csec_Ip_pState.273_12->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.274_13 = Csec_Ip_pState;
  D.6486 = Csec_Ip_pState.274_13->ErrCode;

  <bb 8> :
<L5>:
  return D.6486;

}


Csec_Ip_BootFailure ()
{
  Csec_Ip_ErrorCodeType D.6479;

  <bb 2> :
  Csec_Ip_pState.257_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.257_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.258_3 = Csec_Ip_pState;
  Csec_Ip_pState.258_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.259_4 = Csec_Ip_pState;
  Csec_Ip_pState.259_4->bCmdInProgress = 1;
  Csec_Ip_pState.260_5 = Csec_Ip_pState;
  Csec_Ip_pState.260_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandHeader (14, 0, 0, 0);
  Csec_Ip_pState.261_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.261_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.262_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.262_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.263_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.263_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.264_12 = Csec_Ip_pState;
  Csec_Ip_pState.264_12->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.265_13 = Csec_Ip_pState;
  D.6479 = Csec_Ip_pState.265_13->ErrCode;

  <bb 8> :
<L5>:
  return D.6479;

}


Csec_Ip_GenerateRnd (const struct Csec_Ip_ReqType * pRequest, uint8 * pRnd)
{
  Csec_Ip_ErrorCodeType D.6472;

  <bb 2> :
  Csec_Ip_pState.245_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.245_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.246_3 = Csec_Ip_pState;
  Csec_Ip_pState.246_3->ErrCode = 65535;
  goto <bb 12>; [INV]

  <bb 4> :
  Csec_Ip_pState.247_4 = Csec_Ip_pState;
  Csec_Ip_pState.247_4->bCmdInProgress = 1;
  Csec_Ip_UpdateState (255, 12, 0B, pRnd, 0);
  Csec_Ip_ClearErrorFlags ();
  _5 = pRequest->eReqType;
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  Csec_Ip_WriteCommandHeader (12, 0, 0, 0);
  Csec_Ip_pState.248_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.248_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.249_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.249_8->ErrCode;
  if (_9 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Csec_Ip_pState.250_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.250_10->ErrCode = _11;

  <bb 7> :
  Csec_Ip_pState.251_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.251_12->ErrCode;
  if (_13 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_ReadCommandBytes (16, pRnd, 16);

  <bb 9> :
  Csec_Ip_pState.252_14 = Csec_Ip_pState;
  Csec_Ip_pState.252_14->bCmdInProgress = 0;
  goto <bb 12>; [INV]

  <bb 10> :
  Csec_Ip_pState.253_15 = Csec_Ip_pState;
  _16 = pRequest->pfCallback;
  Csec_Ip_pState.253_15->pfCallback = _16;
  Csec_Ip_pState.254_17 = Csec_Ip_pState;
  _18 = pRequest->pCallbackParam;
  Csec_Ip_pState.254_17->pCallbackParam = _18;
  Csec_Ip_pState.255_19 = Csec_Ip_pState;
  _20 = pRequest->eReqType;
  Csec_Ip_pState.255_19->eReqType = _20;
  Csec_Ip_WriteCommandHeader (12, 0, 0, 0);
  _21 = pRequest->eReqType;
  if (_21 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Csec_Ip_SetInterrupt (1);

  <bb 12> :
  Csec_Ip_pState.256_22 = Csec_Ip_pState;
  D.6472 = Csec_Ip_pState.256_22->ErrCode;

  <bb 13> :
<L12>:
  return D.6472;

}


Csec_Ip_ExtendSeed (const uint8 * pEntropy)
{
  Csec_Ip_ErrorCodeType D.6458;

  <bb 2> :
  Csec_Ip_pState.236_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.236_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.237_3 = Csec_Ip_pState;
  Csec_Ip_pState.237_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.238_4 = Csec_Ip_pState;
  Csec_Ip_pState.238_4->bCmdInProgress = 1;
  Csec_Ip_pState.239_5 = Csec_Ip_pState;
  Csec_Ip_pState.239_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandBytes (16, pEntropy, 16);
  Csec_Ip_WriteCommandHeader (11, 0, 0, 0);
  Csec_Ip_pState.240_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.240_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.241_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.241_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.242_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.242_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.243_12 = Csec_Ip_pState;
  Csec_Ip_pState.243_12->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.244_13 = Csec_Ip_pState;
  D.6458 = Csec_Ip_pState.244_13->ErrCode;

  <bb 8> :
<L5>:
  return D.6458;

}


Csec_Ip_InitRng ()
{
  Csec_Ip_ErrorCodeType D.6451;

  <bb 2> :
  Csec_Ip_pState.227_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.227_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.228_3 = Csec_Ip_pState;
  Csec_Ip_pState.228_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.229_4 = Csec_Ip_pState;
  Csec_Ip_pState.229_4->bCmdInProgress = 1;
  Csec_Ip_pState.230_5 = Csec_Ip_pState;
  Csec_Ip_pState.230_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandHeader (10, 0, 0, 0);
  Csec_Ip_pState.231_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.231_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.232_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.232_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.233_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.233_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.234_12 = Csec_Ip_pState;
  Csec_Ip_pState.234_12->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.235_13 = Csec_Ip_pState;
  D.6451 = Csec_Ip_pState.235_13->ErrCode;

  <bb 8> :
<L5>:
  return D.6451;

}


Csec_Ip_ExportRamKey (uint8 * pM1, uint8 * pM2, uint8 * pM3, uint8 * pM4, uint8 * pM5)
{
  Csec_Ip_ErrorCodeType D.6444;

  <bb 2> :
  Csec_Ip_pState.217_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.217_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.218_3 = Csec_Ip_pState;
  Csec_Ip_pState.218_3->ErrCode = 65535;
  goto <bb 9>; [INV]

  <bb 4> :
  Csec_Ip_pState.219_4 = Csec_Ip_pState;
  Csec_Ip_pState.219_4->bCmdInProgress = 1;
  Csec_Ip_pState.220_5 = Csec_Ip_pState;
  Csec_Ip_pState.220_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandHeader (9, 0, 0, 15);
  Csec_Ip_pState.221_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.221_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.222_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.222_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.223_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.223_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.224_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.224_12->ErrCode;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_ReadCommandBytes (16, pM1, 16);
  Csec_Ip_ReadCommandBytes (32, pM2, 32);
  Csec_Ip_ReadCommandBytes (64, pM3, 16);
  Csec_Ip_ReadCommandBytes (80, pM4, 32);
  Csec_Ip_ReadCommandBytes (112, pM5, 16);

  <bb 8> :
  Csec_Ip_pState.225_14 = Csec_Ip_pState;
  Csec_Ip_pState.225_14->bCmdInProgress = 0;

  <bb 9> :
  Csec_Ip_pState.226_15 = Csec_Ip_pState;
  D.6444 = Csec_Ip_pState.226_15->ErrCode;

  <bb 10> :
<L7>:
  return D.6444;

}


Csec_Ip_LoadPlainKey (const uint8 * pPlainKey)
{
  Csec_Ip_ErrorCodeType D.6435;

  <bb 2> :
  Csec_Ip_pState.208_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.208_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.209_3 = Csec_Ip_pState;
  Csec_Ip_pState.209_3->ErrCode = 65535;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.210_4 = Csec_Ip_pState;
  Csec_Ip_pState.210_4->bCmdInProgress = 1;
  Csec_Ip_pState.211_5 = Csec_Ip_pState;
  Csec_Ip_pState.211_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandBytes (16, pPlainKey, 16);
  Csec_Ip_WriteCommandHeader (8, 0, 0, 15);
  Csec_Ip_pState.212_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.212_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.213_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.213_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.214_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.214_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.215_12 = Csec_Ip_pState;
  Csec_Ip_pState.215_12->bCmdInProgress = 0;

  <bb 7> :
  Csec_Ip_pState.216_13 = Csec_Ip_pState;
  D.6435 = Csec_Ip_pState.216_13->ErrCode;

  <bb 8> :
<L5>:
  return D.6435;

}


Csec_Ip_LoadKey (Csec_Ip_KeyIdType eKeyId, const uint8 * pM1, const uint8 * pM2, const uint8 * pM3, uint8 * pM4, uint8 * pM5)
{
  Csec_Ip_ErrorCodeType D.6428;

  <bb 2> :
  Csec_Ip_pState.198_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.198_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.199_3 = Csec_Ip_pState;
  Csec_Ip_pState.199_3->ErrCode = 65535;
  goto <bb 9>; [INV]

  <bb 4> :
  Csec_Ip_pState.200_4 = Csec_Ip_pState;
  Csec_Ip_pState.200_4->bCmdInProgress = 1;
  Csec_Ip_pState.201_5 = Csec_Ip_pState;
  Csec_Ip_pState.201_5->ErrCode = 1;
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_WriteCommandBytes (16, pM1, 16);
  Csec_Ip_WriteCommandBytes (32, pM2, 32);
  Csec_Ip_WriteCommandBytes (64, pM3, 16);
  Csec_Ip_WriteCommandHeader (7, 0, 0, eKeyId);
  Csec_Ip_pState.202_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.202_6->u32Timeout;
  Csec_Ip_WaitCommandCompletion (_7, 0);
  Csec_Ip_pState.203_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.203_8->ErrCode;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.204_10 = Csec_Ip_pState;
  _11 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.204_10->ErrCode = _11;

  <bb 6> :
  Csec_Ip_pState.205_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.205_12->ErrCode;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_ReadCommandBytes (80, pM4, 32);
  Csec_Ip_ReadCommandBytes (112, pM5, 16);

  <bb 8> :
  Csec_Ip_pState.206_14 = Csec_Ip_pState;
  Csec_Ip_pState.206_14->bCmdInProgress = 0;

  <bb 9> :
  Csec_Ip_pState.207_15 = Csec_Ip_pState;
  D.6428 = Csec_Ip_pState.207_15->ErrCode;

  <bb 10> :
<L7>:
  return D.6428;

}


Csec_Ip_VerifyMac (const struct Csec_Ip_ReqType * pRequest, Csec_Ip_KeyIdType eKeyId, const uint8 * pMsg, uint32 u32MsgLen, const uint8 * pMac, uint16 u16MacLen, boolean * pbVerifStatus)
{
  uint32 u32ByteSize;
  uint32 u32ElapsedTime;
  Csec_Ip_ErrorCodeType D.6419;

  <bb 2> :
  u32ElapsedTime = 0;
  Csec_Ip_pState.186_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.186_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.187_3 = Csec_Ip_pState;
  Csec_Ip_pState.187_3->ErrCode = 65535;
  goto <bb 11>; [INV]

  <bb 4> :
  Csec_Ip_ClearErrorFlags ();
  u32ByteSize = Csec_Ip_BitsToBytesWithRound (u32MsgLen);
  Csec_Ip_UpdateState (eKeyId, 6, pMsg, 0B, u32ByteSize);
  Csec_Ip_pState.188_4 = Csec_Ip_pState;
  Csec_Ip_pState.188_4->u32MsgLen = u32MsgLen;
  Csec_Ip_pState.189_5 = Csec_Ip_pState;
  Csec_Ip_pState.189_5->pbVerifStatus = pbVerifStatus;
  Csec_Ip_pState.190_6 = Csec_Ip_pState;
  Csec_Ip_pState.190_6->bMacWritten = 0;
  Csec_Ip_pState.191_7 = Csec_Ip_pState;
  Csec_Ip_pState.191_7->pMac = pMac;
  Csec_Ip_pState.192_8 = Csec_Ip_pState;
  Csec_Ip_pState.192_8->u16MacLen = u16MacLen;
  _9 = pRequest->eReqType;
  if (_9 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  Csec_Ip_StartVerifMACCmd ();
  goto <bb 9>; [INV]

  <bb 6> :
  Csec_Ip_pState.193_10 = Csec_Ip_pState;
  _11 = Csec_Ip_pState.193_10->u32Timeout;
  u32ElapsedTime = Csec_Ip_WaitCommandCompletion (_11, u32ElapsedTime);
  Csec_Ip_pState.194_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.194_12->ErrCode;
  if (_13 == 65534)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_CancelCommand ();
  Csec_Ip_pState.195_14 = Csec_Ip_pState;
  Csec_Ip_pState.195_14->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_ContinueVerifMACCmd ();

  <bb 9> :
  Csec_Ip_pState.196_15 = Csec_Ip_pState;
  _16 = Csec_Ip_pState.196_15->bCmdInProgress;
  if (_16 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_VerifyMacAsync (pRequest);

  <bb 11> :
  Csec_Ip_pState.197_17 = Csec_Ip_pState;
  D.6419 = Csec_Ip_pState.197_17->ErrCode;

  <bb 12> :
<L12>:
  return D.6419;

}


Csec_Ip_GenerateMac (const struct Csec_Ip_ReqType * pRequest, Csec_Ip_KeyIdType eKeyId, const uint8 * pMsg, uint32 u32MsgLen, uint8 * pCmac)
{
  uint32 u32ByteSize;
  uint32 u32ElapsedTime;
  Csec_Ip_ErrorCodeType D.6406;

  <bb 2> :
  u32ElapsedTime = 0;
  Csec_Ip_pState.178_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.178_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.179_3 = Csec_Ip_pState;
  Csec_Ip_pState.179_3->ErrCode = 65535;
  goto <bb 11>; [INV]

  <bb 4> :
  Csec_Ip_ClearErrorFlags ();
  u32ByteSize = Csec_Ip_BitsToBytesWithRound (u32MsgLen);
  Csec_Ip_UpdateState (eKeyId, 5, pMsg, pCmac, u32ByteSize);
  Csec_Ip_pState.180_4 = Csec_Ip_pState;
  Csec_Ip_pState.180_4->u32MsgLen = u32MsgLen;
  _5 = pRequest->eReqType;
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  Csec_Ip_StartGenMACCmd ();
  goto <bb 9>; [INV]

  <bb 6> :
  Csec_Ip_pState.181_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.181_6->u32Timeout;
  u32ElapsedTime = Csec_Ip_WaitCommandCompletion (_7, u32ElapsedTime);
  Csec_Ip_pState.182_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.182_8->ErrCode;
  if (_9 == 65534)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_CancelCommand ();
  Csec_Ip_pState.183_10 = Csec_Ip_pState;
  Csec_Ip_pState.183_10->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_ContinueGenMACCmd ();

  <bb 9> :
  Csec_Ip_pState.184_11 = Csec_Ip_pState;
  _12 = Csec_Ip_pState.184_11->bCmdInProgress;
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_GenerateMacAsync (pRequest);

  <bb 11> :
  Csec_Ip_pState.185_13 = Csec_Ip_pState;
  D.6406 = Csec_Ip_pState.185_13->ErrCode;

  <bb 12> :
<L12>:
  return D.6406;

}


Csec_Ip_DecryptCbc (const struct Csec_Ip_ReqType * pRequest, Csec_Ip_KeyIdType eKeyId, const uint8 * pCipherText, uint32 u32Length, const uint8 * pIV, uint8 * pPlainText)
{
  uint32 u32ElapsedTime;
  Csec_Ip_ErrorCodeType D.6395;

  <bb 2> :
  u32ElapsedTime = 0;
  Csec_Ip_pState.170_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.170_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.171_3 = Csec_Ip_pState;
  Csec_Ip_pState.171_3->ErrCode = 65535;
  goto <bb 11>; [INV]

  <bb 4> :
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_UpdateState (eKeyId, 4, pCipherText, pPlainText, u32Length);
  Csec_Ip_pState.172_4 = Csec_Ip_pState;
  Csec_Ip_pState.172_4->pIV = pIV;
  _5 = pRequest->eReqType;
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  Csec_Ip_StartEncDecCBCCmd ();
  goto <bb 9>; [INV]

  <bb 6> :
  Csec_Ip_pState.173_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.173_6->u32Timeout;
  u32ElapsedTime = Csec_Ip_WaitCommandCompletion (_7, u32ElapsedTime);
  Csec_Ip_pState.174_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.174_8->ErrCode;
  if (_9 == 65534)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_CancelCommand ();
  Csec_Ip_pState.175_10 = Csec_Ip_pState;
  Csec_Ip_pState.175_10->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_ContinueEncDecCBCCmd ();

  <bb 9> :
  Csec_Ip_pState.176_11 = Csec_Ip_pState;
  _12 = Csec_Ip_pState.176_11->bCmdInProgress;
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_DecryptCbcAsync (pRequest);

  <bb 11> :
  Csec_Ip_pState.177_13 = Csec_Ip_pState;
  D.6395 = Csec_Ip_pState.177_13->ErrCode;

  <bb 12> :
<L12>:
  return D.6395;

}


Csec_Ip_EncryptCbc (const struct Csec_Ip_ReqType * pRequest, Csec_Ip_KeyIdType eKeyId, const uint8 * pPlainText, uint32 u32Length, const uint8 * pIV, uint8 * pCipherText)
{
  uint32 u32ElapsedTime;
  Csec_Ip_ErrorCodeType D.6384;

  <bb 2> :
  u32ElapsedTime = 0;
  Csec_Ip_pState.162_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.162_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.163_3 = Csec_Ip_pState;
  Csec_Ip_pState.163_3->ErrCode = 65535;
  goto <bb 11>; [INV]

  <bb 4> :
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_UpdateState (eKeyId, 2, pPlainText, pCipherText, u32Length);
  Csec_Ip_pState.164_4 = Csec_Ip_pState;
  Csec_Ip_pState.164_4->pIV = pIV;
  _5 = pRequest->eReqType;
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  Csec_Ip_StartEncDecCBCCmd ();
  goto <bb 9>; [INV]

  <bb 6> :
  Csec_Ip_pState.165_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.165_6->u32Timeout;
  u32ElapsedTime = Csec_Ip_WaitCommandCompletion (_7, u32ElapsedTime);
  Csec_Ip_pState.166_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.166_8->ErrCode;
  if (_9 == 65534)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_CancelCommand ();
  Csec_Ip_pState.167_10 = Csec_Ip_pState;
  Csec_Ip_pState.167_10->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_ContinueEncDecCBCCmd ();

  <bb 9> :
  Csec_Ip_pState.168_11 = Csec_Ip_pState;
  _12 = Csec_Ip_pState.168_11->bCmdInProgress;
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_EncryptCbcAsync (pRequest);

  <bb 11> :
  Csec_Ip_pState.169_13 = Csec_Ip_pState;
  D.6384 = Csec_Ip_pState.169_13->ErrCode;

  <bb 12> :
<L12>:
  return D.6384;

}


Csec_Ip_DecryptEcb (const struct Csec_Ip_ReqType * pRequest, Csec_Ip_KeyIdType eKeyId, const uint8 * pCipherText, uint32 u32Length, uint8 * pPlainText)
{
  uint32 u32ElapsedTime;
  Csec_Ip_ErrorCodeType D.6373;

  <bb 2> :
  u32ElapsedTime = 0;
  Csec_Ip_pState.155_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.155_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.156_3 = Csec_Ip_pState;
  Csec_Ip_pState.156_3->ErrCode = 65535;
  goto <bb 11>; [INV]

  <bb 4> :
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_UpdateState (eKeyId, 3, pCipherText, pPlainText, u32Length);
  _4 = pRequest->eReqType;
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  Csec_Ip_StartEncDecECBCmd ();
  goto <bb 9>; [INV]

  <bb 6> :
  Csec_Ip_pState.157_5 = Csec_Ip_pState;
  _6 = Csec_Ip_pState.157_5->u32Timeout;
  u32ElapsedTime = Csec_Ip_WaitCommandCompletion (_6, u32ElapsedTime);
  Csec_Ip_pState.158_7 = Csec_Ip_pState;
  _8 = Csec_Ip_pState.158_7->ErrCode;
  if (_8 == 65534)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_CancelCommand ();
  Csec_Ip_pState.159_9 = Csec_Ip_pState;
  Csec_Ip_pState.159_9->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_ContinueEncDecECBCmd ();

  <bb 9> :
  Csec_Ip_pState.160_10 = Csec_Ip_pState;
  _11 = Csec_Ip_pState.160_10->bCmdInProgress;
  if (_11 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_DecryptEcbAsync (pRequest);

  <bb 11> :
  Csec_Ip_pState.161_12 = Csec_Ip_pState;
  D.6373 = Csec_Ip_pState.161_12->ErrCode;

  <bb 12> :
<L12>:
  return D.6373;

}


Csec_Ip_EncryptEcb (const struct Csec_Ip_ReqType * pRequest, Csec_Ip_KeyIdType eKeyId, const uint8 * pPlainText, uint32 u32Length, uint8 * pCipherText)
{
  uint32 u32ElapsedTime;
  Csec_Ip_ErrorCodeType D.6360;

  <bb 2> :
  u32ElapsedTime = 0;
  Csec_Ip_pState.139_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.139_1->bCmdInProgress;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.140_3 = Csec_Ip_pState;
  Csec_Ip_pState.140_3->ErrCode = 65535;
  goto <bb 11>; [INV]

  <bb 4> :
  Csec_Ip_ClearErrorFlags ();
  Csec_Ip_UpdateState (eKeyId, 1, pPlainText, pCipherText, u32Length);
  _4 = pRequest->eReqType;
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  Csec_Ip_StartEncDecECBCmd ();
  goto <bb 9>; [INV]

  <bb 6> :
  Csec_Ip_pState.141_5 = Csec_Ip_pState;
  _6 = Csec_Ip_pState.141_5->u32Timeout;
  u32ElapsedTime = Csec_Ip_WaitCommandCompletion (_6, u32ElapsedTime);
  Csec_Ip_pState.142_7 = Csec_Ip_pState;
  _8 = Csec_Ip_pState.142_7->ErrCode;
  if (_8 == 65534)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_CancelCommand ();
  Csec_Ip_pState.143_9 = Csec_Ip_pState;
  Csec_Ip_pState.143_9->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_ContinueEncDecECBCmd ();

  <bb 9> :
  Csec_Ip_pState.144_10 = Csec_Ip_pState;
  _11 = Csec_Ip_pState.144_10->bCmdInProgress;
  if (_11 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_EncryptEcbAsync (pRequest);

  <bb 11> :
  Csec_Ip_pState.145_12 = Csec_Ip_pState;
  D.6360 = Csec_Ip_pState.145_12->ErrCode;

  <bb 12> :
<L12>:
  return D.6360;

}


Csec_Ip_Deinit ()
{
  <bb 2> :
  Csec_Ip_pState = 0B;
  return;

}


Csec_Ip_Init (struct Csec_Ip_StateType * pState)
{
  <bb 2> :
  Csec_Ip_pState = pState;
  Csec_Ip_pState.137_1 = Csec_Ip_pState;
  Csec_Ip_pState.137_1->bCmdInProgress = 0;
  Csec_Ip_pState.138_2 = Csec_Ip_pState;
  Csec_Ip_pState.138_2->u32Timeout = 1000000000;
  return;

}


Csec_Ip_VerifyMacAsync (const struct Csec_Ip_ReqType * pRequest)
{
  <bb 2> :
  Csec_Ip_pState.134_1 = Csec_Ip_pState;
  _2 = pRequest->pfCallback;
  Csec_Ip_pState.134_1->pfCallback = _2;
  Csec_Ip_pState.135_3 = Csec_Ip_pState;
  _4 = pRequest->pCallbackParam;
  Csec_Ip_pState.135_3->pCallbackParam = _4;
  Csec_Ip_pState.136_5 = Csec_Ip_pState;
  _6 = pRequest->eReqType;
  Csec_Ip_pState.136_5->eReqType = _6;
  Csec_Ip_StartVerifMACCmd ();
  _7 = pRequest->eReqType;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_SetInterrupt (1);

  <bb 4> :
  return;

}


Csec_Ip_GenerateMacAsync (const struct Csec_Ip_ReqType * pRequest)
{
  <bb 2> :
  Csec_Ip_pState.131_1 = Csec_Ip_pState;
  _2 = pRequest->pfCallback;
  Csec_Ip_pState.131_1->pfCallback = _2;
  Csec_Ip_pState.132_3 = Csec_Ip_pState;
  _4 = pRequest->pCallbackParam;
  Csec_Ip_pState.132_3->pCallbackParam = _4;
  Csec_Ip_pState.133_5 = Csec_Ip_pState;
  _6 = pRequest->eReqType;
  Csec_Ip_pState.133_5->eReqType = _6;
  Csec_Ip_StartGenMACCmd ();
  _7 = pRequest->eReqType;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_SetInterrupt (1);

  <bb 4> :
  return;

}


Csec_Ip_DecryptCbcAsync (const struct Csec_Ip_ReqType * pRequest)
{
  <bb 2> :
  Csec_Ip_pState.128_1 = Csec_Ip_pState;
  _2 = pRequest->pfCallback;
  Csec_Ip_pState.128_1->pfCallback = _2;
  Csec_Ip_pState.129_3 = Csec_Ip_pState;
  _4 = pRequest->pCallbackParam;
  Csec_Ip_pState.129_3->pCallbackParam = _4;
  Csec_Ip_pState.130_5 = Csec_Ip_pState;
  _6 = pRequest->eReqType;
  Csec_Ip_pState.130_5->eReqType = _6;
  Csec_Ip_StartEncDecCBCCmd ();
  _7 = pRequest->eReqType;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_SetInterrupt (1);

  <bb 4> :
  return;

}


Csec_Ip_EncryptCbcAsync (const struct Csec_Ip_ReqType * pRequest)
{
  <bb 2> :
  Csec_Ip_pState.125_1 = Csec_Ip_pState;
  _2 = pRequest->pfCallback;
  Csec_Ip_pState.125_1->pfCallback = _2;
  Csec_Ip_pState.126_3 = Csec_Ip_pState;
  _4 = pRequest->pCallbackParam;
  Csec_Ip_pState.126_3->pCallbackParam = _4;
  Csec_Ip_pState.127_5 = Csec_Ip_pState;
  _6 = pRequest->eReqType;
  Csec_Ip_pState.127_5->eReqType = _6;
  Csec_Ip_StartEncDecCBCCmd ();
  _7 = pRequest->eReqType;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_SetInterrupt (1);

  <bb 4> :
  return;

}


Csec_Ip_DecryptEcbAsync (const struct Csec_Ip_ReqType * pRequest)
{
  <bb 2> :
  Csec_Ip_pState.122_1 = Csec_Ip_pState;
  _2 = pRequest->pfCallback;
  Csec_Ip_pState.122_1->pfCallback = _2;
  Csec_Ip_pState.123_3 = Csec_Ip_pState;
  _4 = pRequest->pCallbackParam;
  Csec_Ip_pState.123_3->pCallbackParam = _4;
  Csec_Ip_pState.124_5 = Csec_Ip_pState;
  _6 = pRequest->eReqType;
  Csec_Ip_pState.124_5->eReqType = _6;
  Csec_Ip_StartEncDecECBCmd ();
  _7 = pRequest->eReqType;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_SetInterrupt (1);

  <bb 4> :
  return;

}


Csec_Ip_EncryptEcbAsync (const struct Csec_Ip_ReqType * pRequest)
{
  <bb 2> :
  Csec_Ip_pState.119_1 = Csec_Ip_pState;
  _2 = pRequest->pfCallback;
  Csec_Ip_pState.119_1->pfCallback = _2;
  Csec_Ip_pState.120_3 = Csec_Ip_pState;
  _4 = pRequest->pCallbackParam;
  Csec_Ip_pState.120_3->pCallbackParam = _4;
  Csec_Ip_pState.121_5 = Csec_Ip_pState;
  _6 = pRequest->eReqType;
  Csec_Ip_pState.121_5->eReqType = _6;
  Csec_Ip_StartEncDecECBCmd ();
  _7 = pRequest->eReqType;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_SetInterrupt (1);

  <bb 4> :
  return;

}


Csec_Ip_ProcessReceivedResponse (Csec_Ip_ReqTypeType eReqType)
{
  <bb 2> :
  _1 = 1073872896B;
  _2 = _1->FSTAT;
  _3 = (signed char) _2;
  if (_3 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  Csec_Ip_pState.107_4 = Csec_Ip_pState;
  _5 = Csec_Ip_pState.107_4->bCmdInProgress;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 4> :
  Csec_Ip_pState.108_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.108_6->eCmd;
  switch (_7) <default: <L11> [INV], case 1: <L2> [INV], case 2: <L4> [INV], case 3: <L2> [INV], case 4: <L4> [INV], case 5: <L6> [INV], case 6: <L7> [INV], case 12: <L8> [INV]>

  <bb 5> :
<L2>:
  Csec_Ip_ContinueEncDecECBCmd ();
  goto <bb 13>; [INV]

  <bb 6> :
<L4>:
  Csec_Ip_ContinueEncDecCBCCmd ();
  goto <bb 13>; [INV]

  <bb 7> :
<L6>:
  Csec_Ip_ContinueGenMACCmd ();
  goto <bb 13>; [INV]

  <bb 8> :
<L7>:
  Csec_Ip_ContinueVerifMACCmd ();
  goto <bb 13>; [INV]

  <bb 9> :
<L8>:
  _8 = Csec_Ip_ReadErrorBits ();
  if (_8 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_pState.109_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.109_9->pOutputBuff;
  Csec_Ip_ReadCommandBytes (16, _10, 16);

  <bb 11> :
  Csec_Ip_pState.110_11 = Csec_Ip_pState;
  Csec_Ip_pState.110_11->bCmdInProgress = 0;
  goto <bb 13>; [INV]

  <bb 12> :
<L11>:

  <bb 13> :
  Csec_Ip_pState.111_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.111_12->bCmdInProgress;
  _14 = ~_13;
  if (_14 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  if (eReqType == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  Csec_Ip_SetInterrupt (0);

  <bb 16> :
  Csec_Ip_pState.112_15 = Csec_Ip_pState;
  _16 = Csec_Ip_pState.112_15->pfCallback;
  if (_16 != 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  Csec_Ip_pState.113_17 = Csec_Ip_pState;
  _18 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.113_17->ErrCode = _18;
  Csec_Ip_pState.114_19 = Csec_Ip_pState;
  _20 = Csec_Ip_pState.114_19->pfCallback;
  Csec_Ip_pState.115_21 = Csec_Ip_pState;
  _22 = Csec_Ip_pState.115_21->ErrCode;
  Csec_Ip_pState.116_23 = Csec_Ip_pState;
  _24 = Csec_Ip_pState.116_23->eCmd;
  Csec_Ip_pState.117_25 = Csec_Ip_pState;
  _26 = Csec_Ip_pState.117_25->pCallbackParam;
  _20 (_22, _24, _26);

  <bb 18> :
  return;

}


Csec_Ip_ContinueVerifMACCmd ()
{
  uint32 u32VerifWord;

  <bb 2> :
  Csec_Ip_pState.95_1 = Csec_Ip_pState;
  _2 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.95_1->ErrCode = _2;
  Csec_Ip_pState.96_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.96_3->ErrCode;
  if (_4 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.97_5 = Csec_Ip_pState;
  Csec_Ip_pState.97_5->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 4> :
  Csec_Ip_pState.98_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.98_6->eSeq;
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.99_8 = Csec_Ip_pState;
  Csec_Ip_pState.99_8->eSeq = 1;

  <bb 6> :
  Csec_Ip_pState.100_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.100_9->u32Index;
  Csec_Ip_pState.101_11 = Csec_Ip_pState;
  _12 = Csec_Ip_pState.101_11->u8PartialSize;
  _13 = (long unsigned int) _12;
  Csec_Ip_pState.102_14 = Csec_Ip_pState;
  _15 = _10 + _13;
  Csec_Ip_pState.102_14->u32Index = _15;
  Csec_Ip_pState.103_16 = Csec_Ip_pState;
  _17 = Csec_Ip_pState.103_16->bMacWritten;
  _18 = (int) _17;
  _19 = _18 != 0;
  _20 = ~_19;
  _21 = (int) _20;
  Csec_Ip_pState.104_22 = Csec_Ip_pState;
  _23 = (_Bool) _21;
  Csec_Ip_pState.104_22->bCmdInProgress = _23;
  Csec_Ip_pState.105_24 = Csec_Ip_pState;
  _25 = Csec_Ip_pState.105_24->bCmdInProgress;
  if (_25 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_StartVerifMACCmd ();
  goto <bb 9>; [INV]

  <bb 8> :
  u32VerifWord = Csec_Ip_ReadCommandWord (20);
  _26 = u32VerifWord & 4294901760;
  Csec_Ip_pState.106_27 = Csec_Ip_pState;
  _28 = Csec_Ip_pState.106_27->pbVerifStatus;
  _29 = _26 == 0;
  *_28 = _29;

  <bb 9> :
  return;

}


Csec_Ip_StartVerifMACCmd ()
{
  uint8 u8MacOffset;
  uint8 u8NumBytes;
  unsigned char iftmp.80;

  <bb 2> :
  Csec_Ip_pState.81_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.81_1->u32InputSize;
  Csec_Ip_pState.82_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.82_3->u32Index;
  _5 = _2 - _4;
  if (_5 <= 112)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.83_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.83_6->u32InputSize;
  _8 = (unsigned char) _7;
  Csec_Ip_pState.84_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.84_9->u32Index;
  _11 = (unsigned char) _10;
  iftmp.80 = _8 - _11;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.80 = 112;

  <bb 5> :
  u8NumBytes = iftmp.80;
  _12 = u8NumBytes + 15;
  u8MacOffset = _12 & 240;
  Csec_Ip_pState.85_13 = Csec_Ip_pState;
  _14 = Csec_Ip_pState.85_13->pInputBuff;
  Csec_Ip_pState.86_15 = Csec_Ip_pState;
  _16 = Csec_Ip_pState.86_15->u32Index;
  _17 = _14 + _16;
  Csec_Ip_WriteCommandBytes (16, _17, u8NumBytes);
  Csec_Ip_pState.87_18 = Csec_Ip_pState;
  _19 = Csec_Ip_pState.87_18->u32MsgLen;
  Csec_Ip_WriteCommandWord (12, _19);
  Csec_Ip_pState.88_20 = Csec_Ip_pState;
  _21 = Csec_Ip_pState.88_20->u16MacLen;
  Csec_Ip_WriteCommandHalfWord (8, _21);
  if (u8MacOffset <= 95)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _22 = u8MacOffset + 16;
  Csec_Ip_pState.89_23 = Csec_Ip_pState;
  _24 = Csec_Ip_pState.89_23->pMac;
  Csec_Ip_WriteCommandBytes (_22, _24, 16);
  Csec_Ip_pState.90_25 = Csec_Ip_pState;
  Csec_Ip_pState.90_25->bMacWritten = 1;

  <bb 7> :
  Csec_Ip_pState.91_26 = Csec_Ip_pState;
  Csec_Ip_pState.91_26->u8PartialSize = u8NumBytes;
  Csec_Ip_pState.92_27 = Csec_Ip_pState;
  _28 = Csec_Ip_pState.92_27->eCmd;
  Csec_Ip_pState.93_29 = Csec_Ip_pState;
  _30 = Csec_Ip_pState.93_29->eSeq;
  Csec_Ip_pState.94_31 = Csec_Ip_pState;
  _32 = Csec_Ip_pState.94_31->eKeyId;
  Csec_Ip_WriteCommandHeader (_28, 0, _30, _32);
  return;

}


Csec_Ip_ContinueGenMACCmd ()
{
  <bb 2> :
  Csec_Ip_pState.68_1 = Csec_Ip_pState;
  _2 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.68_1->ErrCode = _2;
  Csec_Ip_pState.69_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.69_3->ErrCode;
  if (_4 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.70_5 = Csec_Ip_pState;
  Csec_Ip_pState.70_5->bCmdInProgress = 0;
  goto <bb 9>; [INV]

  <bb 4> :
  Csec_Ip_pState.71_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.71_6->eSeq;
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.72_8 = Csec_Ip_pState;
  Csec_Ip_pState.72_8->eSeq = 1;

  <bb 6> :
  Csec_Ip_pState.73_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.73_9->u32Index;
  Csec_Ip_pState.74_11 = Csec_Ip_pState;
  _12 = Csec_Ip_pState.74_11->u8PartialSize;
  _13 = (long unsigned int) _12;
  Csec_Ip_pState.75_14 = Csec_Ip_pState;
  _15 = _10 + _13;
  Csec_Ip_pState.75_14->u32Index = _15;
  Csec_Ip_pState.76_16 = Csec_Ip_pState;
  _17 = Csec_Ip_pState.76_16->u32Index;
  Csec_Ip_pState.77_18 = Csec_Ip_pState;
  _19 = Csec_Ip_pState.77_18->u32InputSize;
  if (_17 >= _19)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_pState.78_20 = Csec_Ip_pState;
  Csec_Ip_pState.78_20->bCmdInProgress = 0;
  Csec_Ip_pState.79_21 = Csec_Ip_pState;
  _22 = Csec_Ip_pState.79_21->pOutputBuff;
  Csec_Ip_ReadCommandBytes (32, _22, 16);
  goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_StartGenMACCmd ();

  <bb 9> :
  return;

}


Csec_Ip_StartGenMACCmd ()
{
  uint8 u8NumBytes;
  unsigned char iftmp.56;

  <bb 2> :
  Csec_Ip_pState.57_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.57_1->u32InputSize;
  Csec_Ip_pState.58_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.58_3->u32Index;
  _5 = _2 - _4;
  if (_5 <= 112)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.59_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.59_6->u32InputSize;
  _8 = (unsigned char) _7;
  Csec_Ip_pState.60_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.60_9->u32Index;
  _11 = (unsigned char) _10;
  iftmp.56 = _8 - _11;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.56 = 112;

  <bb 5> :
  u8NumBytes = iftmp.56;
  Csec_Ip_pState.61_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.61_12->pInputBuff;
  Csec_Ip_pState.62_14 = Csec_Ip_pState;
  _15 = Csec_Ip_pState.62_14->u32Index;
  _16 = _13 + _15;
  Csec_Ip_WriteCommandBytes (16, _16, u8NumBytes);
  Csec_Ip_pState.63_17 = Csec_Ip_pState;
  _18 = Csec_Ip_pState.63_17->u32MsgLen;
  Csec_Ip_WriteCommandWord (12, _18);
  Csec_Ip_pState.64_19 = Csec_Ip_pState;
  Csec_Ip_pState.64_19->u8PartialSize = u8NumBytes;
  Csec_Ip_pState.65_20 = Csec_Ip_pState;
  _21 = Csec_Ip_pState.65_20->eCmd;
  Csec_Ip_pState.66_22 = Csec_Ip_pState;
  _23 = Csec_Ip_pState.66_22->eSeq;
  Csec_Ip_pState.67_24 = Csec_Ip_pState;
  _25 = Csec_Ip_pState.67_24->eKeyId;
  Csec_Ip_WriteCommandHeader (_21, 0, _23, _25);
  return;

}


Csec_Ip_ContinueEncDecCBCCmd ()
{
  <bb 2> :
  Csec_Ip_pState.39_1 = Csec_Ip_pState;
  _2 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.39_1->ErrCode = _2;
  Csec_Ip_pState.40_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.40_3->ErrCode;
  if (_4 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.41_5 = Csec_Ip_pState;
  Csec_Ip_pState.41_5->bCmdInProgress = 0;
  goto <bb 10>; [INV]

  <bb 4> :
  Csec_Ip_pState.42_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.42_6->eSeq;
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.43_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.43_8->pOutputBuff;
  Csec_Ip_pState.44_10 = Csec_Ip_pState;
  _11 = Csec_Ip_pState.44_10->u32Index;
  _12 = _9 + _11;
  Csec_Ip_pState.45_13 = Csec_Ip_pState;
  _14 = Csec_Ip_pState.45_13->u8PartialSize;
  Csec_Ip_ReadCommandBytes (32, _12, _14);
  Csec_Ip_pState.46_15 = Csec_Ip_pState;
  Csec_Ip_pState.46_15->eSeq = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  Csec_Ip_pState.47_16 = Csec_Ip_pState;
  _17 = Csec_Ip_pState.47_16->pOutputBuff;
  Csec_Ip_pState.48_18 = Csec_Ip_pState;
  _19 = Csec_Ip_pState.48_18->u32Index;
  _20 = _17 + _19;
  Csec_Ip_pState.49_21 = Csec_Ip_pState;
  _22 = Csec_Ip_pState.49_21->u8PartialSize;
  Csec_Ip_ReadCommandBytes (16, _20, _22);

  <bb 7> :
  Csec_Ip_pState.50_23 = Csec_Ip_pState;
  _24 = Csec_Ip_pState.50_23->u32Index;
  Csec_Ip_pState.51_25 = Csec_Ip_pState;
  _26 = Csec_Ip_pState.51_25->u8PartialSize;
  _27 = (long unsigned int) _26;
  Csec_Ip_pState.52_28 = Csec_Ip_pState;
  _29 = _24 + _27;
  Csec_Ip_pState.52_28->u32Index = _29;
  Csec_Ip_pState.53_30 = Csec_Ip_pState;
  _31 = Csec_Ip_pState.53_30->u32Index;
  Csec_Ip_pState.54_32 = Csec_Ip_pState;
  _33 = Csec_Ip_pState.54_32->u32InputSize;
  if (_31 >= _33)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Csec_Ip_pState.55_34 = Csec_Ip_pState;
  Csec_Ip_pState.55_34->bCmdInProgress = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  Csec_Ip_StartEncDecCBCCmd ();

  <bb 10> :
  return;

}


Csec_Ip_StartEncDecCBCCmd ()
{
  uint8 u8NumBytes;
  uint16 u16NumPages;
  uint32 u32NumPagesLeft;
  short unsigned int iftmp.28;
  short unsigned int iftmp.26;

  <bb 2> :
  Csec_Ip_pState.24_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.24_1->u32InputSize;
  Csec_Ip_pState.25_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.25_3->u32Index;
  _5 = _2 - _4;
  u32NumPagesLeft = _5 >> 4;
  if (u32NumPagesLeft <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.26 = (short unsigned int) u32NumPagesLeft;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.26 = 7;

  <bb 5> :
  u16NumPages = iftmp.26;
  _6 = (unsigned char) u16NumPages;
  u8NumBytes = _6 << 4;
  Csec_Ip_pState.27_7 = Csec_Ip_pState;
  _8 = Csec_Ip_pState.27_7->eSeq;
  if (_8 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  if (u32NumPagesLeft <= 6)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.28 = (short unsigned int) u32NumPagesLeft;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.28 = 6;

  <bb 9> :
  u16NumPages = iftmp.28;
  _9 = (unsigned char) u16NumPages;
  u8NumBytes = _9 << 4;
  Csec_Ip_pState.29_10 = Csec_Ip_pState;
  _11 = Csec_Ip_pState.29_10->pIV;
  Csec_Ip_WriteCommandBytes (16, _11, 16);
  Csec_Ip_pState.30_12 = Csec_Ip_pState;
  _13 = Csec_Ip_pState.30_12->pInputBuff;
  Csec_Ip_pState.31_14 = Csec_Ip_pState;
  _15 = Csec_Ip_pState.31_14->u32Index;
  _16 = _13 + _15;
  Csec_Ip_WriteCommandBytes (32, _16, u8NumBytes);
  goto <bb 11>; [INV]

  <bb 10> :
  Csec_Ip_pState.32_17 = Csec_Ip_pState;
  _18 = Csec_Ip_pState.32_17->pInputBuff;
  Csec_Ip_pState.33_19 = Csec_Ip_pState;
  _20 = Csec_Ip_pState.33_19->u32Index;
  _21 = _18 + _20;
  Csec_Ip_WriteCommandBytes (16, _21, u8NumBytes);

  <bb 11> :
  Csec_Ip_pState.34_22 = Csec_Ip_pState;
  _23 = Csec_Ip_pState.34_22->u32InputSize;
  _24 = _23 >> 4;
  _25 = (short unsigned int) _24;
  Csec_Ip_WriteCommandHalfWord (14, _25);
  Csec_Ip_pState.35_26 = Csec_Ip_pState;
  Csec_Ip_pState.35_26->u8PartialSize = u8NumBytes;
  Csec_Ip_pState.36_27 = Csec_Ip_pState;
  _28 = Csec_Ip_pState.36_27->eCmd;
  Csec_Ip_pState.37_29 = Csec_Ip_pState;
  _30 = Csec_Ip_pState.37_29->eSeq;
  Csec_Ip_pState.38_31 = Csec_Ip_pState;
  _32 = Csec_Ip_pState.38_31->eKeyId;
  Csec_Ip_WriteCommandHeader (_28, 0, _30, _32);
  return;

}


Csec_Ip_ContinueEncDecECBCmd ()
{
  <bb 2> :
  Csec_Ip_pState.12_1 = Csec_Ip_pState;
  _2 = Csec_Ip_ReadErrorBits ();
  Csec_Ip_pState.12_1->ErrCode = _2;
  Csec_Ip_pState.13_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.13_3->ErrCode;
  if (_4 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Csec_Ip_pState.14_5 = Csec_Ip_pState;
  Csec_Ip_pState.14_5->bCmdInProgress = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  Csec_Ip_pState.15_6 = Csec_Ip_pState;
  _7 = Csec_Ip_pState.15_6->pOutputBuff;
  Csec_Ip_pState.16_8 = Csec_Ip_pState;
  _9 = Csec_Ip_pState.16_8->u32Index;
  _10 = _7 + _9;
  Csec_Ip_pState.17_11 = Csec_Ip_pState;
  _12 = Csec_Ip_pState.17_11->u8PartialSize;
  Csec_Ip_ReadCommandBytes (16, _10, _12);
  Csec_Ip_pState.18_13 = Csec_Ip_pState;
  _14 = Csec_Ip_pState.18_13->u32Index;
  Csec_Ip_pState.19_15 = Csec_Ip_pState;
  _16 = Csec_Ip_pState.19_15->u8PartialSize;
  _17 = (long unsigned int) _16;
  Csec_Ip_pState.20_18 = Csec_Ip_pState;
  _19 = _14 + _17;
  Csec_Ip_pState.20_18->u32Index = _19;
  Csec_Ip_pState.21_20 = Csec_Ip_pState;
  _21 = Csec_Ip_pState.21_20->u32Index;
  Csec_Ip_pState.22_22 = Csec_Ip_pState;
  _23 = Csec_Ip_pState.22_22->u32InputSize;
  if (_21 >= _23)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Csec_Ip_pState.23_24 = Csec_Ip_pState;
  Csec_Ip_pState.23_24->bCmdInProgress = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  Csec_Ip_StartEncDecECBCmd ();

  <bb 7> :
  return;

}


Csec_Ip_StartEncDecECBCmd ()
{
  uint8 u8NumBytes;
  uint16 u16NumPages;
  uint32 u32NumPagesLeft;
  short unsigned int iftmp.5;

  <bb 2> :
  Csec_Ip_pState.3_1 = Csec_Ip_pState;
  _2 = Csec_Ip_pState.3_1->u32InputSize;
  Csec_Ip_pState.4_3 = Csec_Ip_pState;
  _4 = Csec_Ip_pState.4_3->u32Index;
  _5 = _2 - _4;
  u32NumPagesLeft = _5 >> 4;
  if (u32NumPagesLeft <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5 = (short unsigned int) u32NumPagesLeft;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5 = 7;

  <bb 5> :
  u16NumPages = iftmp.5;
  _6 = (unsigned char) u16NumPages;
  u8NumBytes = _6 << 4;
  Csec_Ip_pState.6_7 = Csec_Ip_pState;
  _8 = Csec_Ip_pState.6_7->pInputBuff;
  Csec_Ip_pState.7_9 = Csec_Ip_pState;
  _10 = Csec_Ip_pState.7_9->u32Index;
  _11 = _8 + _10;
  Csec_Ip_WriteCommandBytes (16, _11, u8NumBytes);
  Csec_Ip_WriteCommandHalfWord (14, u16NumPages);
  Csec_Ip_pState.8_12 = Csec_Ip_pState;
  Csec_Ip_pState.8_12->u8PartialSize = u8NumBytes;
  Csec_Ip_pState.9_13 = Csec_Ip_pState;
  _14 = Csec_Ip_pState.9_13->eCmd;
  Csec_Ip_pState.10_15 = Csec_Ip_pState;
  _16 = Csec_Ip_pState.10_15->eSeq;
  Csec_Ip_pState.11_17 = Csec_Ip_pState;
  _18 = Csec_Ip_pState.11_17->eKeyId;
  Csec_Ip_WriteCommandHeader (_14, 0, _16, _18);
  return;

}


Csec_Ip_WriteCommandWord (const uint8 u8Offset, const uint32 u32Word)
{
  uint8 u8IndexWord;

  <bb 2> :
  u8IndexWord = u8Offset >> 2;
  _1 = 335548416B;
  _2 = (int) u8IndexWord;
  _1->Csec_Ip_aPramRegister[_2] = u32Word;
  return;

}


Csec_Ip_BitsToBytesWithRound (uint32 u32Size)
{
  uint32 u32Result;
  uint32 D.6408;

  <bb 2> :
  _1 = u32Size + 7;
  u32Result = _1 & 4294967288;
  u32Result = u32Result >> 3;
  D.6408 = u32Result;

  <bb 3> :
<L0>:
  return D.6408;

}


Csec_Ip_SetInterrupt (boolean bEnable)
{
  uint8 u8FCNFG;
  unsigned char iftmp.118;

  <bb 2> :
  SchM_Enter_Crypto_CRYPTO_EXCLUSIVE_AREA_12 ();
  _1 = 1073872896B;
  u8FCNFG = _1->FCNFG;
  _2 = u8FCNFG & 127;
  if (bEnable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.118 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.118 = 0;

  <bb 5> :
  _3 = 1073872896B;
  _4 = iftmp.118 | _2;
  _3->FCNFG = _4;
  SchM_Exit_Crypto_CRYPTO_EXCLUSIVE_AREA_12 ();
  return;

}


Csec_Ip_ReadCommandBytes (uint8 u8Offset, uint8 * pOutputbytes, uint8 u8NumBytes)
{
  uint32 u32Temp;
  uint8 u8Index;

  <bb 2> :
  u8Index = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = 335548416B;
  _2 = (int) u8Offset;
  _3 = (int) u8Index;
  _4 = _2 + _3;
  _5 = _4 >> 2;
  u32Temp = _1->Csec_Ip_aPramRegister[_5];
  _6 = u32Temp >> 24;
  _7 = (sizetype) u8Index;
  _8 = pOutputbytes + _7;
  _9 = (unsigned char) _6;
  *_8 = _9;
  _10 = u32Temp >> 16;
  _11 = (sizetype) u8Index;
  _12 = _11 + 1;
  _13 = pOutputbytes + _12;
  _14 = (unsigned char) _10;
  *_13 = _14;
  _15 = u32Temp >> 8;
  _16 = (sizetype) u8Index;
  _17 = _16 + 2;
  _18 = pOutputbytes + _17;
  _19 = (unsigned char) _15;
  *_18 = _19;
  _20 = (sizetype) u8Index;
  _21 = _20 + 3;
  _22 = pOutputbytes + _21;
  _23 = (unsigned char) u32Temp;
  *_22 = _23;
  u8Index = u8Index + 4;

  <bb 4> :
  _24 = (unsigned int) u8Index;
  _25 = _24 + 3;
  _26 = (unsigned int) u8NumBytes;
  if (_25 < _26)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  goto <bb 7>; [INV]

  <bb 6> :
  _27 = u8Offset + u8Index;
  _28 = (sizetype) u8Index;
  _29 = pOutputbytes + _28;
  _30 = Csec_Ip_ReadCommandByte (_27);
  *_29 = _30;
  u8Index.2_31 = u8Index;
  u8Index = u8Index.2_31 + 1;

  <bb 7> :
  if (u8Index < u8NumBytes)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Csec_Ip_ReadCommandByte (uint8 u8Offset)
{
  uint8 u8ByteValue;
  uint8 u8ByteX;
  uint32 u32Temp;
  uint8 D.6265;

  <bb 2> :
  _1 = 335548416B;
  _2 = u8Offset >> 2;
  _3 = (int) _2;
  u32Temp = _1->Csec_Ip_aPramRegister[_3];
  u8ByteX = u8Offset & 3;
  _4 = (long unsigned int) u8ByteX;
  _5 = 3 - _4;
  _6 = _5 * 8;
  _7 = 255 << _6;
  _8 = u32Temp & _7;
  _9 = (long unsigned int) u8ByteX;
  _10 = 3 - _9;
  _11 = _10 * 8;
  _12 = _8 >> _11;
  u8ByteValue = (uint8) _12;
  D.6265 = u8ByteValue;

  <bb 3> :
<L0>:
  return D.6265;

}


Csec_Ip_ReadErrorBits ()
{
  Csec_Ip_ErrorCodeType CsecResponse;
  uint32 u32ErrWord;
  Csec_Ip_ErrorCodeType D.6261;

  <bb 2> :
  u32ErrWord = Csec_Ip_ReadCommandWord (4);
  _1 = u32ErrWord >> 16;
  CsecResponse = (Csec_Ip_ErrorCodeType) _1;
  D.6261 = CsecResponse;

  <bb 3> :
<L0>:
  return D.6261;

}


Csec_Ip_ReadCommandWord (uint8 u8Offset)
{
  uint32 D.6263;

  <bb 2> :
  _1 = 335548416B;
  _2 = u8Offset >> 2;
  _3 = (int) _2;
  D.6263 = _1->Csec_Ip_aPramRegister[_3];

  <bb 3> :
<L0>:
  return D.6263;

}


Csec_Ip_WaitCommandCompletion (uint32 u32Timeout, uint32 u32ElapsedTimeInTicks)
{
  uint32 u32CurrentTicks;
  uint32 u32TimeoutTicks;
  uint32 u32ElapsedTicks;
  uint32 D.6258;
  long unsigned int D.6254;

  <bb 2> :
  u32ElapsedTicks = u32ElapsedTimeInTicks;
  u32TimeoutTicks = OsIf_MicrosToTicks (u32Timeout, 0);
  _1 = OsIf_GetCounter (0);
  u32CurrentTicks = _1;
  goto <bb 4>; [INV]

  <bb 3> :
  D.6254 = OsIf_GetElapsed (&u32CurrentTicks, 0);
  u32ElapsedTicks = D.6254 + u32ElapsedTicks;

  <bb 4> :
  _2 = 1073872896B;
  _3 = _2->FSTAT;
  _4 = (signed char) _3;
  if (_4 >= 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (u32ElapsedTicks < u32TimeoutTicks)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (u32ElapsedTicks >= u32TimeoutTicks)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Csec_Ip_pState.1_5 = Csec_Ip_pState;
  Csec_Ip_pState.1_5->ErrCode = 65534;

  <bb 8> :
  D.6258 = u32ElapsedTicks;
  u32CurrentTicks = {CLOBBER};

  <bb 9> :
<L7>:
  return D.6258;

}


Csec_Ip_WriteCommandHeader (Csec_Ip_CmdType eFuncId, Csec_Ip_FuncFormatType eFuncFormat, Csec_Ip_CallSequenceType eCallSeq, Csec_Ip_KeyIdType eKeyId)
{
  <bb 2> :
  _1 = eFuncId << 24;
  _2 = eFuncFormat << 16;
  _3 = _2 & 16711680;
  _4 = _1 | _3;
  _5 = eCallSeq << 8;
  _6 = _5 & 65535;
  _7 = _4 | _6;
  _8 = eKeyId & 255;
  _9 = 335548416B;
  _10 = _7 | _8;
  _9->Csec_Ip_aPramRegister[0] = _10;
  return;

}


Csec_Ip_WriteCommandHalfWord (uint8 u8Offset, uint16 u16HalfWord)
{
  uint32 u32Temp;

  <bb 2> :
  _1 = 335548416B;
  _2 = u8Offset >> 2;
  _3 = (int) _2;
  u32Temp = _1->Csec_Ip_aPramRegister[_3];
  _4 = (int) u8Offset;
  _5 = _4 & 2;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  u32Temp = u32Temp & 4294901760;
  _6 = (long unsigned int) u16HalfWord;
  u32Temp = u32Temp | _6;
  goto <bb 5>; [INV]

  <bb 4> :
  u32Temp = u32Temp & 65535;
  _7 = (long unsigned int) u16HalfWord;
  _8 = _7 << 16;
  u32Temp = u32Temp | _8;

  <bb 5> :
  _9 = 335548416B;
  _10 = u8Offset >> 2;
  _11 = (int) _10;
  _9->Csec_Ip_aPramRegister[_11] = u32Temp;
  return;

}


Csec_Ip_WriteCommandByte (const uint8 u8Offset, const uint8 u8InputByte)
{
  uint8 u8ByteX;
  uint32 u32Temp;

  <bb 2> :
  _1 = 335548416B;
  _2 = u8Offset >> 2;
  _3 = (int) _2;
  u32Temp = _1->Csec_Ip_aPramRegister[_3];
  u8ByteX = u8Offset & 3;
  _4 = (long unsigned int) u8ByteX;
  _5 = 3 - _4;
  _6 = _5 * 8;
  _7 = 255 << _6;
  _8 = ~_7;
  u32Temp = u32Temp & _8;
  _9 = (long unsigned int) u8InputByte;
  _10 = (long unsigned int) u8ByteX;
  _11 = 3 - _10;
  _12 = _11 * 8;
  _13 = _9 << _12;
  _14 = (long unsigned int) u8ByteX;
  _15 = 3 - _14;
  _16 = _15 * 8;
  _17 = 255 << _16;
  _18 = _13 & _17;
  u32Temp = u32Temp | _18;
  _19 = 335548416B;
  _20 = u8Offset >> 2;
  _21 = (int) _20;
  _19->Csec_Ip_aPramRegister[_21] = u32Temp;
  return;

}


Csec_Ip_WriteCommandBytes (const uint8 u8Offset, const uint8 * pInputBytes, const uint8 u8NumBytes)
{
  uint8 u8Index;

  <bb 2> :
  u8Index = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (sizetype) u8Index;
  _2 = pInputBytes + _1;
  _3 = *_2;
  _4 = (long unsigned int) _3;
  _5 = _4 << 24;
  _6 = (sizetype) u8Index;
  _7 = _6 + 1;
  _8 = pInputBytes + _7;
  _9 = *_8;
  _10 = (long unsigned int) _9;
  _11 = _10 << 16;
  _12 = _11 & 16711680;
  _13 = _5 | _12;
  _14 = (sizetype) u8Index;
  _15 = _14 + 2;
  _16 = pInputBytes + _15;
  _17 = *_16;
  _18 = (long unsigned int) _17;
  _19 = _18 << 8;
  _20 = _19 & 65535;
  _21 = _13 | _20;
  _22 = (sizetype) u8Index;
  _23 = _22 + 3;
  _24 = pInputBytes + _23;
  _25 = *_24;
  _26 = (long unsigned int) _25;
  _27 = 335548416B;
  _28 = (int) u8Offset;
  _29 = (int) u8Index;
  _30 = _28 + _29;
  _31 = _30 >> 2;
  _32 = _21 | _26;
  _27->Csec_Ip_aPramRegister[_31] = _32;
  u8Index = u8Index + 4;

  <bb 4> :
  _33 = (unsigned int) u8Index;
  _34 = _33 + 3;
  _35 = (unsigned int) u8NumBytes;
  if (_34 < _35)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  goto <bb 7>; [INV]

  <bb 6> :
  _36 = u8Offset + u8Index;
  _37 = (sizetype) u8Index;
  _38 = pInputBytes + _37;
  _39 = *_38;
  Csec_Ip_WriteCommandByte (_36, _39);
  u8Index.0_40 = u8Index;
  u8Index = u8Index.0_40 + 1;

  <bb 7> :
  if (u8Index < u8NumBytes)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Csec_Ip_UpdateState (Csec_Ip_KeyIdType eKeyId, Csec_Ip_CmdType eCmd, const uint8 * pInputBuff, uint8 * pOutputBuff, uint32 u32InputSize)
{
  <bb 2> :
  Csec_Ip_pState.146_1 = Csec_Ip_pState;
  Csec_Ip_pState.146_1->bCmdInProgress = 1;
  Csec_Ip_pState.147_2 = Csec_Ip_pState;
  Csec_Ip_pState.147_2->eCmd = eCmd;
  Csec_Ip_pState.148_3 = Csec_Ip_pState;
  Csec_Ip_pState.148_3->pInputBuff = pInputBuff;
  Csec_Ip_pState.149_4 = Csec_Ip_pState;
  Csec_Ip_pState.149_4->pOutputBuff = pOutputBuff;
  Csec_Ip_pState.150_5 = Csec_Ip_pState;
  Csec_Ip_pState.150_5->eKeyId = eKeyId;
  Csec_Ip_pState.151_6 = Csec_Ip_pState;
  Csec_Ip_pState.151_6->u32InputSize = u32InputSize;
  Csec_Ip_pState.152_7 = Csec_Ip_pState;
  Csec_Ip_pState.152_7->u32Index = 0;
  Csec_Ip_pState.153_8 = Csec_Ip_pState;
  Csec_Ip_pState.153_8->ErrCode = 1;
  Csec_Ip_pState.154_9 = Csec_Ip_pState;
  Csec_Ip_pState.154_9->eSeq = 0;
  return;

}


Csec_Ip_ClearErrorFlags ()
{
  <bb 2> :
  _1 = 1073872896B;
  _2 = _1->FSTAT;
  _3 = (signed char) _2;
  if (_3 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = 1073872896B;
  _4->FSTAT = 48;

  <bb 4> :
  return;

}


Csec_Ip_WriteCmdAndWait (Csec_Ip_CmdType eFuncId, Csec_Ip_FuncFormatType eFuncFormat, Csec_Ip_CallSequenceType eCallSeq, Csec_Ip_KeyIdType eKeyId)
{
  <bb 2> :
  _1 = eFuncId << 24;
  _2 = eFuncFormat << 16;
  _3 = _2 & 16711680;
  _4 = _1 | _3;
  _5 = eCallSeq << 8;
  _6 = _5 & 65535;
  _7 = _4 | _6;
  _8 = eKeyId & 255;
  _9 = 335548416B;
  _10 = _7 | _8;
  _9->Csec_Ip_aPramRegister[0] = _10;

  <bb 3> :
  _11 = 1073872896B;
  _12 = _11->FSTAT;
  _13 = (signed char) _12;
  if (_13 >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  return;

}


